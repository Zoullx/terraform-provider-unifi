// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_wlans

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func WlansDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the WLANs are associated with.",
				MarkdownDescription: "The name of the site the WLANs are associated with.",
			},
			"wlans": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"ap_group_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "IDs of the AP groups to use for the network.",
							MarkdownDescription: "IDs of the AP groups to use for the network.",
						},
						"ap_group_mode": schema.StringAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is. Valid values are: `all`, `groups`, and `devices`.",
							MarkdownDescription: "TODO: Figure out what this is. Valid values are: `all`, `groups`, and `devices`.",
						},
						"b_supported": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"broadcast_filter_list": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"bss_transition": schema.BoolAttribute{
							Computed:            true,
							Description:         "Improves client transitions between APs when they have a weak signal.",
							MarkdownDescription: "Improves client transitions between APs when they have a weak signal.",
						},
						"dtim_2g": schema.Int64Attribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"dtim_5g": schema.Int64Attribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"dtim_6e": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"dtim_mode": schema.StringAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is. Valid values are: `default` and `custom`.",
							MarkdownDescription: "TODO: Figure out what this is. Valid values are: `default` and `custom`.",
						},
						"enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not to enable this WLAN.",
							MarkdownDescription: "Indicates whether or not to enable this WLAN.",
						},
						"enhanced_iot": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not to enable enhanced handling for IoT devices.",
							MarkdownDescription: "Indicates whether or not to enable enhanced handling for IoT devices.",
						},
						"fast_roaming_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Enables 802.11r fast roaming.",
							MarkdownDescription: "Enables 802.11r fast roaming.",
						},
						"group_rekey": schema.Int64Attribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"hide_ssid": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not to hide the SSID from broadcast.",
							MarkdownDescription: "Indicates whether or not to hide the SSID from broadcast.",
						},
						"hotspot2conf_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"iapp_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"iapp_key": schema.StringAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the WLAN to look up.",
							MarkdownDescription: "The ID of the WLAN to look up.",
						},
						"is_guest": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates that this is a guest WLAN and should use guest behaviors.",
							MarkdownDescription: "Indicates that this is a guest WLAN and should use guest behaviors.",
						},
						"l2_isolation": schema.BoolAttribute{
							Computed:            true,
							Description:         "Isolates stations on layer 2 (ethernet) level.",
							MarkdownDescription: "Isolates stations on layer 2 (ethernet) level.",
						},
						"mac_filter_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not the MAC filter is turned on for the network.",
							MarkdownDescription: "Indicates whether or not the MAC filter is turned on for the network.",
						},
						"mac_filter_list": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).",
							MarkdownDescription: "List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).",
						},
						"mac_filter_policy": schema.StringAttribute{
							Computed:            true,
							Description:         "MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Valid values are: `allow` and `deny`.",
							MarkdownDescription: "MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Valid values are: `allow` and `deny`.",
						},
						"minimum_2g_advertising_rates": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"minimum_2g_data_rate_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not to enable minimum data rates for 2G band.",
							MarkdownDescription: "Indicates whether or not to enable minimum data rates for 2G band.",
						},
						"minimum_2g_data_rate_kbps": schema.Int64Attribute{
							Computed:            true,
							Description:         "Set minimum data rate control for 2G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
							MarkdownDescription: "Set minimum data rate control for 2G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
						},
						"minimum_5g_advertising_rates": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"minimum_5g_data_rate_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not to enable minimum data rates for 5G band.",
							MarkdownDescription: "Indicates whether or not to enable minimum data rates for 5G band.",
						},
						"minimum_5g_data_rate_kbps": schema.Int64Attribute{
							Computed:            true,
							Description:         "Set minimum data rate control for 5G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
							MarkdownDescription: "Set minimum data rate control for 5G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
						},
						"minimum_data_rate_setting_preference": schema.StringAttribute{
							Computed:            true,
							Description:         "Specifies the minimum data rate setting preference. Valid values are: `auto` or `manual`.",
							MarkdownDescription: "Specifies the minimum data rate setting preference. Valid values are: `auto` or `manual`.",
						},
						"mlo_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"multicast_enhance_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not Multicast Enhance is turned on for the network.",
							MarkdownDescription: "Indicates whether or not Multicast Enhance is turned on for the network.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the WLAN.",
							MarkdownDescription: "The name of the WLAN.",
						},
						"network_id": schema.StringAttribute{
							Computed:            true,
							Description:         "ID of the network for this SSID.",
							MarkdownDescription: "ID of the network for this SSID.",
						},
						"no2ghz_oui": schema.BoolAttribute{
							Computed:            true,
							Description:         "Notify high performance clients to move to 5GHz to improve network performance.",
							MarkdownDescription: "Notify high performance clients to move to 5GHz to improve network performance.",
						},
						"optimize_iot_wifi_connectivity": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"passphrase": schema.StringAttribute{
							Computed:            true,
							Description:         "The passphrase for the network. This is only required if `security` is not set to `open`.",
							MarkdownDescription: "The passphrase for the network. This is only required if `security` is not set to `open`.",
						},
						"passphrase_autogenerated": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not to autogenerate the passphrase.",
							MarkdownDescription: "Indicates whether or not to autogenerate the passphrase.",
						},
						"pmf_mode": schema.StringAttribute{
							Computed:            true,
							Description:         "Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`.",
							MarkdownDescription: "Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`.",
						},
						"private_preshared_keys": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"network_id": schema.StringAttribute{
										Computed:            true,
										Description:         "The ID of the Network associated with the Preshared Key.",
										MarkdownDescription: "The ID of the Network associated with the Preshared Key.",
									},
									"password": schema.StringAttribute{
										Computed:            true,
										Description:         "The password of the Preshared Key.",
										MarkdownDescription: "The password of the Preshared Key.",
									},
								},
								CustomType: PrivatePresharedKeysType{
									ObjectType: types.ObjectType{
										AttrTypes: PrivatePresharedKeysValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "List of private preshared keys (only valid if `private_preshared_keys_enabled` is `true`).",
							MarkdownDescription: "List of private preshared keys (only valid if `private_preshared_keys_enabled` is `true`).",
						},
						"private_preshared_keys_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Indicates whether or not to enable private preshared keys.",
							MarkdownDescription: "Indicates whether or not to enable private preshared keys.",
						},
						"proxy_arp": schema.BoolAttribute{
							Computed:            true,
							Description:         "Reduces airtime usage by allowing APs to \"proxy\" common broadcast frames as unicast.",
							MarkdownDescription: "Reduces airtime usage by allowing APs to \"proxy\" common broadcast frames as unicast.",
						},
						"radius_das_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"radius_mac_acl_format": schema.StringAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is. Valid values are: `none_lower`, `hyphen_lower`, `colon_lower`, `none_upper`, `hyphen_upper`, and `colon_upper`",
							MarkdownDescription: "TODO: Figure out what this is. Valid values are: `none_lower`, `hyphen_lower`, `colon_lower`, `none_upper`, `hyphen_upper`, and `colon_upper`",
						},
						"radius_mac_auth_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"radius_profile_id": schema.StringAttribute{
							Computed:            true,
							Description:         "ID of the RADIUS profile to use when security `wpaeap`. You can query this via `unifi_radius_profile` data source.",
							MarkdownDescription: "ID of the RADIUS profile to use when security `wpaeap`. You can query this via `unifi_radius_profile` data source.",
						},
						"sae_groups": schema.ListAttribute{
							ElementType:         types.Int64Type,
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"sae_psks": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed:            true,
										Description:         "Id of the SAE Psk.",
										MarkdownDescription: "Id of the SAE Psk.",
									},
									"mac": schema.StringAttribute{
										Computed:            true,
										Description:         "MAC Address of the SAE Psk.",
										MarkdownDescription: "MAC Address of the SAE Psk.",
									},
									"psk": schema.StringAttribute{
										Computed:            true,
										Description:         "Psk of the SAE Psk.",
										MarkdownDescription: "Psk of the SAE Psk.",
									},
									"vlan": schema.Int64Attribute{
										Computed:            true,
										Description:         "VLAN for this SAE Psk.",
										MarkdownDescription: "VLAN for this SAE Psk.",
									},
								},
								CustomType: SaePsksType{
									ObjectType: types.ObjectType{
										AttrTypes: SaePsksValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"schedule": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"day_of_week": schema.StringAttribute{
										Computed:            true,
										Description:         "Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.",
										MarkdownDescription: "Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.",
									},
									"duration": schema.Int64Attribute{
										Computed:            true,
										Description:         "Length of the block in minutes.",
										MarkdownDescription: "Length of the block in minutes.",
									},
									"name": schema.StringAttribute{
										Computed:            true,
										Description:         "Name of the block.",
										MarkdownDescription: "Name of the block.",
									},
									"start_hour": schema.Int64Attribute{
										Computed:            true,
										Description:         "Start hour for the block (0-23).",
										MarkdownDescription: "Start hour for the block (0-23).",
									},
									"start_minute": schema.Int64Attribute{
										Computed:            true,
										Description:         "Start minute for the block (0-59).",
										MarkdownDescription: "Start minute for the block (0-59).",
									},
								},
								CustomType: ScheduleType{
									ObjectType: types.ObjectType{
										AttrTypes: ScheduleValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Start and stop schedules for the WLAN.",
							MarkdownDescription: "Start and stop schedules for the WLAN.",
						},
						"security": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.",
							MarkdownDescription: "The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.",
						},
						"setting_preference": schema.StringAttribute{
							Computed:            true,
							Description:         "Specifies the setting preference for the Network. Valid values are: `auto` or `manual`",
							MarkdownDescription: "Specifies the setting preference for the Network. Valid values are: `auto` or `manual`",
						},
						"site_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the site the WLAN is associated with.",
							MarkdownDescription: "The name of the site the WLAN is associated with.",
						},
						"uapsd_enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Enable Unscheduled Automatic Power Save Delivery.",
							MarkdownDescription: "Enable Unscheduled Automatic Power Save Delivery.",
						},
						"user_group_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Id of the user group to use for this network.",
							MarkdownDescription: "Id of the user group to use for this network.",
						},
						"wlan_band": schema.StringAttribute{
							Computed:            true,
							Description:         "Radio band your WiFi network will use. Valid values are: `2g`, `5g`, or `both`.",
							MarkdownDescription: "Radio band your WiFi network will use. Valid values are: `2g`, `5g`, or `both`.",
						},
						"wlan_bands": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of bands to use for this WLAN. Valid items are: `2g`, `5g` and/or `6g`. (`6g` only works if the specified AP's are compatible)",
							MarkdownDescription: "List of bands to use for this WLAN. Valid items are: `2g`, `5g` and/or `6g`. (`6g` only works if the specified AP's are compatible)",
						},
						"wpa3_enhanced_192": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"wpa3_fast_roaming": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"wpa3_support": schema.BoolAttribute{
							Computed:            true,
							Description:         "Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).",
							MarkdownDescription: "Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).",
						},
						"wpa3_transition": schema.BoolAttribute{
							Computed:            true,
							Description:         "Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).",
							MarkdownDescription: "Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).",
						},
						"wpa_enc": schema.StringAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is. Valid values are: `auto`, `ccmp`, `gcmp`, `ccmp-256`, and `gcmp-256`.",
							MarkdownDescription: "TODO: Figure out what this is. Valid values are: `auto`, `ccmp`, `gcmp`, `ccmp-256`, and `gcmp-256`.",
						},
						"wpa_mode": schema.StringAttribute{
							Computed:            true,
							Description:         "Specifies the mode of WPA. Valid values are: `auto`, `wpa1`, and `wpa2`",
							MarkdownDescription: "Specifies the mode of WPA. Valid values are: `auto`, `wpa1`, and `wpa2`",
						},
					},
					CustomType: WlansType{
						ObjectType: types.ObjectType{
							AttrTypes: WlansValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of WLANs associated with the site.",
				MarkdownDescription: "The list of WLANs associated with the site.",
			},
		},
	}
}

type WlansModel struct {
	Site  types.String `tfsdk:"site"`
	Wlans types.List   `tfsdk:"wlans"`
}

var _ basetypes.ObjectTypable = WlansType{}

type WlansType struct {
	basetypes.ObjectType
}

func (t WlansType) Equal(o attr.Type) bool {
	other, ok := o.(WlansType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WlansType) String() string {
	return "WlansType"
}

func (t WlansType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apGroupIdsAttribute, ok := attributes["ap_group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ap_group_ids is missing from object`)

		return nil, diags
	}

	apGroupIdsVal, ok := apGroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ap_group_ids expected to be basetypes.ListValue, was: %T`, apGroupIdsAttribute))
	}

	apGroupModeAttribute, ok := attributes["ap_group_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ap_group_mode is missing from object`)

		return nil, diags
	}

	apGroupModeVal, ok := apGroupModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ap_group_mode expected to be basetypes.StringValue, was: %T`, apGroupModeAttribute))
	}

	bSupportedAttribute, ok := attributes["b_supported"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`b_supported is missing from object`)

		return nil, diags
	}

	bSupportedVal, ok := bSupportedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`b_supported expected to be basetypes.BoolValue, was: %T`, bSupportedAttribute))
	}

	broadcastFilterListAttribute, ok := attributes["broadcast_filter_list"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`broadcast_filter_list is missing from object`)

		return nil, diags
	}

	broadcastFilterListVal, ok := broadcastFilterListAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`broadcast_filter_list expected to be basetypes.ListValue, was: %T`, broadcastFilterListAttribute))
	}

	bssTransitionAttribute, ok := attributes["bss_transition"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bss_transition is missing from object`)

		return nil, diags
	}

	bssTransitionVal, ok := bssTransitionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bss_transition expected to be basetypes.BoolValue, was: %T`, bssTransitionAttribute))
	}

	dtim2gAttribute, ok := attributes["dtim_2g"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_2g is missing from object`)

		return nil, diags
	}

	dtim2gVal, ok := dtim2gAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_2g expected to be basetypes.Int64Value, was: %T`, dtim2gAttribute))
	}

	dtim5gAttribute, ok := attributes["dtim_5g"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_5g is missing from object`)

		return nil, diags
	}

	dtim5gVal, ok := dtim5gAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_5g expected to be basetypes.Int64Value, was: %T`, dtim5gAttribute))
	}

	dtim6eAttribute, ok := attributes["dtim_6e"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_6e is missing from object`)

		return nil, diags
	}

	dtim6eVal, ok := dtim6eAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_6e expected to be basetypes.BoolValue, was: %T`, dtim6eAttribute))
	}

	dtimModeAttribute, ok := attributes["dtim_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_mode is missing from object`)

		return nil, diags
	}

	dtimModeVal, ok := dtimModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_mode expected to be basetypes.StringValue, was: %T`, dtimModeAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	enhancedIotAttribute, ok := attributes["enhanced_iot"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enhanced_iot is missing from object`)

		return nil, diags
	}

	enhancedIotVal, ok := enhancedIotAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enhanced_iot expected to be basetypes.BoolValue, was: %T`, enhancedIotAttribute))
	}

	fastRoamingEnabledAttribute, ok := attributes["fast_roaming_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fast_roaming_enabled is missing from object`)

		return nil, diags
	}

	fastRoamingEnabledVal, ok := fastRoamingEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fast_roaming_enabled expected to be basetypes.BoolValue, was: %T`, fastRoamingEnabledAttribute))
	}

	groupRekeyAttribute, ok := attributes["group_rekey"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_rekey is missing from object`)

		return nil, diags
	}

	groupRekeyVal, ok := groupRekeyAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_rekey expected to be basetypes.Int64Value, was: %T`, groupRekeyAttribute))
	}

	hideSsidAttribute, ok := attributes["hide_ssid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hide_ssid is missing from object`)

		return nil, diags
	}

	hideSsidVal, ok := hideSsidAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hide_ssid expected to be basetypes.BoolValue, was: %T`, hideSsidAttribute))
	}

	hotspot2confEnabledAttribute, ok := attributes["hotspot2conf_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hotspot2conf_enabled is missing from object`)

		return nil, diags
	}

	hotspot2confEnabledVal, ok := hotspot2confEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hotspot2conf_enabled expected to be basetypes.BoolValue, was: %T`, hotspot2confEnabledAttribute))
	}

	iappEnabledAttribute, ok := attributes["iapp_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iapp_enabled is missing from object`)

		return nil, diags
	}

	iappEnabledVal, ok := iappEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iapp_enabled expected to be basetypes.BoolValue, was: %T`, iappEnabledAttribute))
	}

	iappKeyAttribute, ok := attributes["iapp_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iapp_key is missing from object`)

		return nil, diags
	}

	iappKeyVal, ok := iappKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iapp_key expected to be basetypes.StringValue, was: %T`, iappKeyAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isGuestAttribute, ok := attributes["is_guest"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_guest is missing from object`)

		return nil, diags
	}

	isGuestVal, ok := isGuestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_guest expected to be basetypes.BoolValue, was: %T`, isGuestAttribute))
	}

	l2IsolationAttribute, ok := attributes["l2_isolation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`l2_isolation is missing from object`)

		return nil, diags
	}

	l2IsolationVal, ok := l2IsolationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`l2_isolation expected to be basetypes.BoolValue, was: %T`, l2IsolationAttribute))
	}

	macFilterEnabledAttribute, ok := attributes["mac_filter_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_filter_enabled is missing from object`)

		return nil, diags
	}

	macFilterEnabledVal, ok := macFilterEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_filter_enabled expected to be basetypes.BoolValue, was: %T`, macFilterEnabledAttribute))
	}

	macFilterListAttribute, ok := attributes["mac_filter_list"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_filter_list is missing from object`)

		return nil, diags
	}

	macFilterListVal, ok := macFilterListAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_filter_list expected to be basetypes.ListValue, was: %T`, macFilterListAttribute))
	}

	macFilterPolicyAttribute, ok := attributes["mac_filter_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_filter_policy is missing from object`)

		return nil, diags
	}

	macFilterPolicyVal, ok := macFilterPolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_filter_policy expected to be basetypes.StringValue, was: %T`, macFilterPolicyAttribute))
	}

	minimum2gAdvertisingRatesAttribute, ok := attributes["minimum_2g_advertising_rates"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_2g_advertising_rates is missing from object`)

		return nil, diags
	}

	minimum2gAdvertisingRatesVal, ok := minimum2gAdvertisingRatesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_2g_advertising_rates expected to be basetypes.BoolValue, was: %T`, minimum2gAdvertisingRatesAttribute))
	}

	minimum2gDataRateEnabledAttribute, ok := attributes["minimum_2g_data_rate_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_2g_data_rate_enabled is missing from object`)

		return nil, diags
	}

	minimum2gDataRateEnabledVal, ok := minimum2gDataRateEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_2g_data_rate_enabled expected to be basetypes.BoolValue, was: %T`, minimum2gDataRateEnabledAttribute))
	}

	minimum2gDataRateKbpsAttribute, ok := attributes["minimum_2g_data_rate_kbps"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_2g_data_rate_kbps is missing from object`)

		return nil, diags
	}

	minimum2gDataRateKbpsVal, ok := minimum2gDataRateKbpsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_2g_data_rate_kbps expected to be basetypes.Int64Value, was: %T`, minimum2gDataRateKbpsAttribute))
	}

	minimum5gAdvertisingRatesAttribute, ok := attributes["minimum_5g_advertising_rates"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_5g_advertising_rates is missing from object`)

		return nil, diags
	}

	minimum5gAdvertisingRatesVal, ok := minimum5gAdvertisingRatesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_5g_advertising_rates expected to be basetypes.BoolValue, was: %T`, minimum5gAdvertisingRatesAttribute))
	}

	minimum5gDataRateEnabledAttribute, ok := attributes["minimum_5g_data_rate_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_5g_data_rate_enabled is missing from object`)

		return nil, diags
	}

	minimum5gDataRateEnabledVal, ok := minimum5gDataRateEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_5g_data_rate_enabled expected to be basetypes.BoolValue, was: %T`, minimum5gDataRateEnabledAttribute))
	}

	minimum5gDataRateKbpsAttribute, ok := attributes["minimum_5g_data_rate_kbps"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_5g_data_rate_kbps is missing from object`)

		return nil, diags
	}

	minimum5gDataRateKbpsVal, ok := minimum5gDataRateKbpsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_5g_data_rate_kbps expected to be basetypes.Int64Value, was: %T`, minimum5gDataRateKbpsAttribute))
	}

	minimumDataRateSettingPreferenceAttribute, ok := attributes["minimum_data_rate_setting_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_data_rate_setting_preference is missing from object`)

		return nil, diags
	}

	minimumDataRateSettingPreferenceVal, ok := minimumDataRateSettingPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_data_rate_setting_preference expected to be basetypes.StringValue, was: %T`, minimumDataRateSettingPreferenceAttribute))
	}

	mloEnabledAttribute, ok := attributes["mlo_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mlo_enabled is missing from object`)

		return nil, diags
	}

	mloEnabledVal, ok := mloEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mlo_enabled expected to be basetypes.BoolValue, was: %T`, mloEnabledAttribute))
	}

	multicastEnhanceEnabledAttribute, ok := attributes["multicast_enhance_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multicast_enhance_enabled is missing from object`)

		return nil, diags
	}

	multicastEnhanceEnabledVal, ok := multicastEnhanceEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multicast_enhance_enabled expected to be basetypes.BoolValue, was: %T`, multicastEnhanceEnabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return nil, diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	no2ghzOuiAttribute, ok := attributes["no2ghz_oui"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`no2ghz_oui is missing from object`)

		return nil, diags
	}

	no2ghzOuiVal, ok := no2ghzOuiAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`no2ghz_oui expected to be basetypes.BoolValue, was: %T`, no2ghzOuiAttribute))
	}

	optimizeIotWifiConnectivityAttribute, ok := attributes["optimize_iot_wifi_connectivity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optimize_iot_wifi_connectivity is missing from object`)

		return nil, diags
	}

	optimizeIotWifiConnectivityVal, ok := optimizeIotWifiConnectivityAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optimize_iot_wifi_connectivity expected to be basetypes.BoolValue, was: %T`, optimizeIotWifiConnectivityAttribute))
	}

	passphraseAttribute, ok := attributes["passphrase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase is missing from object`)

		return nil, diags
	}

	passphraseVal, ok := passphraseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase expected to be basetypes.StringValue, was: %T`, passphraseAttribute))
	}

	passphraseAutogeneratedAttribute, ok := attributes["passphrase_autogenerated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_autogenerated is missing from object`)

		return nil, diags
	}

	passphraseAutogeneratedVal, ok := passphraseAutogeneratedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_autogenerated expected to be basetypes.BoolValue, was: %T`, passphraseAutogeneratedAttribute))
	}

	pmfModeAttribute, ok := attributes["pmf_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pmf_mode is missing from object`)

		return nil, diags
	}

	pmfModeVal, ok := pmfModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pmf_mode expected to be basetypes.StringValue, was: %T`, pmfModeAttribute))
	}

	privatePresharedKeysAttribute, ok := attributes["private_preshared_keys"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_preshared_keys is missing from object`)

		return nil, diags
	}

	privatePresharedKeysVal, ok := privatePresharedKeysAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_preshared_keys expected to be basetypes.ListValue, was: %T`, privatePresharedKeysAttribute))
	}

	privatePresharedKeysEnabledAttribute, ok := attributes["private_preshared_keys_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_preshared_keys_enabled is missing from object`)

		return nil, diags
	}

	privatePresharedKeysEnabledVal, ok := privatePresharedKeysEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_preshared_keys_enabled expected to be basetypes.BoolValue, was: %T`, privatePresharedKeysEnabledAttribute))
	}

	proxyArpAttribute, ok := attributes["proxy_arp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`proxy_arp is missing from object`)

		return nil, diags
	}

	proxyArpVal, ok := proxyArpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`proxy_arp expected to be basetypes.BoolValue, was: %T`, proxyArpAttribute))
	}

	radiusDasEnabledAttribute, ok := attributes["radius_das_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_das_enabled is missing from object`)

		return nil, diags
	}

	radiusDasEnabledVal, ok := radiusDasEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_das_enabled expected to be basetypes.BoolValue, was: %T`, radiusDasEnabledAttribute))
	}

	radiusMacAclFormatAttribute, ok := attributes["radius_mac_acl_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_mac_acl_format is missing from object`)

		return nil, diags
	}

	radiusMacAclFormatVal, ok := radiusMacAclFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_mac_acl_format expected to be basetypes.StringValue, was: %T`, radiusMacAclFormatAttribute))
	}

	radiusMacAuthEnabledAttribute, ok := attributes["radius_mac_auth_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_mac_auth_enabled is missing from object`)

		return nil, diags
	}

	radiusMacAuthEnabledVal, ok := radiusMacAuthEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_mac_auth_enabled expected to be basetypes.BoolValue, was: %T`, radiusMacAuthEnabledAttribute))
	}

	radiusProfileIdAttribute, ok := attributes["radius_profile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_profile_id is missing from object`)

		return nil, diags
	}

	radiusProfileIdVal, ok := radiusProfileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_profile_id expected to be basetypes.StringValue, was: %T`, radiusProfileIdAttribute))
	}

	saeGroupsAttribute, ok := attributes["sae_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sae_groups is missing from object`)

		return nil, diags
	}

	saeGroupsVal, ok := saeGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sae_groups expected to be basetypes.ListValue, was: %T`, saeGroupsAttribute))
	}

	saePsksAttribute, ok := attributes["sae_psks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sae_psks is missing from object`)

		return nil, diags
	}

	saePsksVal, ok := saePsksAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sae_psks expected to be basetypes.ListValue, was: %T`, saePsksAttribute))
	}

	scheduleAttribute, ok := attributes["schedule"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schedule is missing from object`)

		return nil, diags
	}

	scheduleVal, ok := scheduleAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schedule expected to be basetypes.ListValue, was: %T`, scheduleAttribute))
	}

	securityAttribute, ok := attributes["security"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security is missing from object`)

		return nil, diags
	}

	securityVal, ok := securityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security expected to be basetypes.StringValue, was: %T`, securityAttribute))
	}

	settingPreferenceAttribute, ok := attributes["setting_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`setting_preference is missing from object`)

		return nil, diags
	}

	settingPreferenceVal, ok := settingPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`setting_preference expected to be basetypes.StringValue, was: %T`, settingPreferenceAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return nil, diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	uapsdEnabledAttribute, ok := attributes["uapsd_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uapsd_enabled is missing from object`)

		return nil, diags
	}

	uapsdEnabledVal, ok := uapsdEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uapsd_enabled expected to be basetypes.BoolValue, was: %T`, uapsdEnabledAttribute))
	}

	userGroupIdAttribute, ok := attributes["user_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_group_id is missing from object`)

		return nil, diags
	}

	userGroupIdVal, ok := userGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_group_id expected to be basetypes.StringValue, was: %T`, userGroupIdAttribute))
	}

	wlanBandAttribute, ok := attributes["wlan_band"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wlan_band is missing from object`)

		return nil, diags
	}

	wlanBandVal, ok := wlanBandAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wlan_band expected to be basetypes.StringValue, was: %T`, wlanBandAttribute))
	}

	wlanBandsAttribute, ok := attributes["wlan_bands"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wlan_bands is missing from object`)

		return nil, diags
	}

	wlanBandsVal, ok := wlanBandsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wlan_bands expected to be basetypes.ListValue, was: %T`, wlanBandsAttribute))
	}

	wpa3Enhanced192Attribute, ok := attributes["wpa3_enhanced_192"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_enhanced_192 is missing from object`)

		return nil, diags
	}

	wpa3Enhanced192Val, ok := wpa3Enhanced192Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_enhanced_192 expected to be basetypes.BoolValue, was: %T`, wpa3Enhanced192Attribute))
	}

	wpa3FastRoamingAttribute, ok := attributes["wpa3_fast_roaming"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_fast_roaming is missing from object`)

		return nil, diags
	}

	wpa3FastRoamingVal, ok := wpa3FastRoamingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_fast_roaming expected to be basetypes.BoolValue, was: %T`, wpa3FastRoamingAttribute))
	}

	wpa3SupportAttribute, ok := attributes["wpa3_support"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_support is missing from object`)

		return nil, diags
	}

	wpa3SupportVal, ok := wpa3SupportAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_support expected to be basetypes.BoolValue, was: %T`, wpa3SupportAttribute))
	}

	wpa3TransitionAttribute, ok := attributes["wpa3_transition"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_transition is missing from object`)

		return nil, diags
	}

	wpa3TransitionVal, ok := wpa3TransitionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_transition expected to be basetypes.BoolValue, was: %T`, wpa3TransitionAttribute))
	}

	wpaEncAttribute, ok := attributes["wpa_enc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa_enc is missing from object`)

		return nil, diags
	}

	wpaEncVal, ok := wpaEncAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa_enc expected to be basetypes.StringValue, was: %T`, wpaEncAttribute))
	}

	wpaModeAttribute, ok := attributes["wpa_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa_mode is missing from object`)

		return nil, diags
	}

	wpaModeVal, ok := wpaModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa_mode expected to be basetypes.StringValue, was: %T`, wpaModeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WlansValue{
		ApGroupIds:                       apGroupIdsVal,
		ApGroupMode:                      apGroupModeVal,
		BSupported:                       bSupportedVal,
		BroadcastFilterList:              broadcastFilterListVal,
		BssTransition:                    bssTransitionVal,
		Dtim2g:                           dtim2gVal,
		Dtim5g:                           dtim5gVal,
		Dtim6e:                           dtim6eVal,
		DtimMode:                         dtimModeVal,
		Enabled:                          enabledVal,
		EnhancedIot:                      enhancedIotVal,
		FastRoamingEnabled:               fastRoamingEnabledVal,
		GroupRekey:                       groupRekeyVal,
		HideSsid:                         hideSsidVal,
		Hotspot2confEnabled:              hotspot2confEnabledVal,
		IappEnabled:                      iappEnabledVal,
		IappKey:                          iappKeyVal,
		Id:                               idVal,
		IsGuest:                          isGuestVal,
		L2Isolation:                      l2IsolationVal,
		MacFilterEnabled:                 macFilterEnabledVal,
		MacFilterList:                    macFilterListVal,
		MacFilterPolicy:                  macFilterPolicyVal,
		Minimum2gAdvertisingRates:        minimum2gAdvertisingRatesVal,
		Minimum2gDataRateEnabled:         minimum2gDataRateEnabledVal,
		Minimum2gDataRateKbps:            minimum2gDataRateKbpsVal,
		Minimum5gAdvertisingRates:        minimum5gAdvertisingRatesVal,
		Minimum5gDataRateEnabled:         minimum5gDataRateEnabledVal,
		Minimum5gDataRateKbps:            minimum5gDataRateKbpsVal,
		MinimumDataRateSettingPreference: minimumDataRateSettingPreferenceVal,
		MloEnabled:                       mloEnabledVal,
		MulticastEnhanceEnabled:          multicastEnhanceEnabledVal,
		Name:                             nameVal,
		NetworkId:                        networkIdVal,
		No2ghzOui:                        no2ghzOuiVal,
		OptimizeIotWifiConnectivity:      optimizeIotWifiConnectivityVal,
		Passphrase:                       passphraseVal,
		PassphraseAutogenerated:          passphraseAutogeneratedVal,
		PmfMode:                          pmfModeVal,
		PrivatePresharedKeys:             privatePresharedKeysVal,
		PrivatePresharedKeysEnabled:      privatePresharedKeysEnabledVal,
		ProxyArp:                         proxyArpVal,
		RadiusDasEnabled:                 radiusDasEnabledVal,
		RadiusMacAclFormat:               radiusMacAclFormatVal,
		RadiusMacAuthEnabled:             radiusMacAuthEnabledVal,
		RadiusProfileId:                  radiusProfileIdVal,
		SaeGroups:                        saeGroupsVal,
		SaePsks:                          saePsksVal,
		Schedule:                         scheduleVal,
		Security:                         securityVal,
		SettingPreference:                settingPreferenceVal,
		SiteId:                           siteIdVal,
		UapsdEnabled:                     uapsdEnabledVal,
		UserGroupId:                      userGroupIdVal,
		WlanBand:                         wlanBandVal,
		WlanBands:                        wlanBandsVal,
		Wpa3Enhanced192:                  wpa3Enhanced192Val,
		Wpa3FastRoaming:                  wpa3FastRoamingVal,
		Wpa3Support:                      wpa3SupportVal,
		Wpa3Transition:                   wpa3TransitionVal,
		WpaEnc:                           wpaEncVal,
		WpaMode:                          wpaModeVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewWlansValueNull() WlansValue {
	return WlansValue{
		state: attr.ValueStateNull,
	}
}

func NewWlansValueUnknown() WlansValue {
	return WlansValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWlansValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WlansValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WlansValue Attribute Value",
				"While creating a WlansValue value, a missing attribute value was detected. "+
					"A WlansValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WlansValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WlansValue Attribute Type",
				"While creating a WlansValue value, an invalid attribute value was detected. "+
					"A WlansValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WlansValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WlansValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WlansValue Attribute Value",
				"While creating a WlansValue value, an extra attribute value was detected. "+
					"A WlansValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WlansValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWlansValueUnknown(), diags
	}

	apGroupIdsAttribute, ok := attributes["ap_group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ap_group_ids is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	apGroupIdsVal, ok := apGroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ap_group_ids expected to be basetypes.ListValue, was: %T`, apGroupIdsAttribute))
	}

	apGroupModeAttribute, ok := attributes["ap_group_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ap_group_mode is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	apGroupModeVal, ok := apGroupModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ap_group_mode expected to be basetypes.StringValue, was: %T`, apGroupModeAttribute))
	}

	bSupportedAttribute, ok := attributes["b_supported"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`b_supported is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	bSupportedVal, ok := bSupportedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`b_supported expected to be basetypes.BoolValue, was: %T`, bSupportedAttribute))
	}

	broadcastFilterListAttribute, ok := attributes["broadcast_filter_list"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`broadcast_filter_list is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	broadcastFilterListVal, ok := broadcastFilterListAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`broadcast_filter_list expected to be basetypes.ListValue, was: %T`, broadcastFilterListAttribute))
	}

	bssTransitionAttribute, ok := attributes["bss_transition"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bss_transition is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	bssTransitionVal, ok := bssTransitionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bss_transition expected to be basetypes.BoolValue, was: %T`, bssTransitionAttribute))
	}

	dtim2gAttribute, ok := attributes["dtim_2g"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_2g is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	dtim2gVal, ok := dtim2gAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_2g expected to be basetypes.Int64Value, was: %T`, dtim2gAttribute))
	}

	dtim5gAttribute, ok := attributes["dtim_5g"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_5g is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	dtim5gVal, ok := dtim5gAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_5g expected to be basetypes.Int64Value, was: %T`, dtim5gAttribute))
	}

	dtim6eAttribute, ok := attributes["dtim_6e"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_6e is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	dtim6eVal, ok := dtim6eAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_6e expected to be basetypes.BoolValue, was: %T`, dtim6eAttribute))
	}

	dtimModeAttribute, ok := attributes["dtim_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dtim_mode is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	dtimModeVal, ok := dtimModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dtim_mode expected to be basetypes.StringValue, was: %T`, dtimModeAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	enhancedIotAttribute, ok := attributes["enhanced_iot"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enhanced_iot is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	enhancedIotVal, ok := enhancedIotAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enhanced_iot expected to be basetypes.BoolValue, was: %T`, enhancedIotAttribute))
	}

	fastRoamingEnabledAttribute, ok := attributes["fast_roaming_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fast_roaming_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	fastRoamingEnabledVal, ok := fastRoamingEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fast_roaming_enabled expected to be basetypes.BoolValue, was: %T`, fastRoamingEnabledAttribute))
	}

	groupRekeyAttribute, ok := attributes["group_rekey"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_rekey is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	groupRekeyVal, ok := groupRekeyAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_rekey expected to be basetypes.Int64Value, was: %T`, groupRekeyAttribute))
	}

	hideSsidAttribute, ok := attributes["hide_ssid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hide_ssid is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	hideSsidVal, ok := hideSsidAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hide_ssid expected to be basetypes.BoolValue, was: %T`, hideSsidAttribute))
	}

	hotspot2confEnabledAttribute, ok := attributes["hotspot2conf_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hotspot2conf_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	hotspot2confEnabledVal, ok := hotspot2confEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hotspot2conf_enabled expected to be basetypes.BoolValue, was: %T`, hotspot2confEnabledAttribute))
	}

	iappEnabledAttribute, ok := attributes["iapp_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iapp_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	iappEnabledVal, ok := iappEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iapp_enabled expected to be basetypes.BoolValue, was: %T`, iappEnabledAttribute))
	}

	iappKeyAttribute, ok := attributes["iapp_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`iapp_key is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	iappKeyVal, ok := iappKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`iapp_key expected to be basetypes.StringValue, was: %T`, iappKeyAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isGuestAttribute, ok := attributes["is_guest"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_guest is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	isGuestVal, ok := isGuestAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_guest expected to be basetypes.BoolValue, was: %T`, isGuestAttribute))
	}

	l2IsolationAttribute, ok := attributes["l2_isolation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`l2_isolation is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	l2IsolationVal, ok := l2IsolationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`l2_isolation expected to be basetypes.BoolValue, was: %T`, l2IsolationAttribute))
	}

	macFilterEnabledAttribute, ok := attributes["mac_filter_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_filter_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	macFilterEnabledVal, ok := macFilterEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_filter_enabled expected to be basetypes.BoolValue, was: %T`, macFilterEnabledAttribute))
	}

	macFilterListAttribute, ok := attributes["mac_filter_list"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_filter_list is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	macFilterListVal, ok := macFilterListAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_filter_list expected to be basetypes.ListValue, was: %T`, macFilterListAttribute))
	}

	macFilterPolicyAttribute, ok := attributes["mac_filter_policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac_filter_policy is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	macFilterPolicyVal, ok := macFilterPolicyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac_filter_policy expected to be basetypes.StringValue, was: %T`, macFilterPolicyAttribute))
	}

	minimum2gAdvertisingRatesAttribute, ok := attributes["minimum_2g_advertising_rates"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_2g_advertising_rates is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	minimum2gAdvertisingRatesVal, ok := minimum2gAdvertisingRatesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_2g_advertising_rates expected to be basetypes.BoolValue, was: %T`, minimum2gAdvertisingRatesAttribute))
	}

	minimum2gDataRateEnabledAttribute, ok := attributes["minimum_2g_data_rate_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_2g_data_rate_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	minimum2gDataRateEnabledVal, ok := minimum2gDataRateEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_2g_data_rate_enabled expected to be basetypes.BoolValue, was: %T`, minimum2gDataRateEnabledAttribute))
	}

	minimum2gDataRateKbpsAttribute, ok := attributes["minimum_2g_data_rate_kbps"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_2g_data_rate_kbps is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	minimum2gDataRateKbpsVal, ok := minimum2gDataRateKbpsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_2g_data_rate_kbps expected to be basetypes.Int64Value, was: %T`, minimum2gDataRateKbpsAttribute))
	}

	minimum5gAdvertisingRatesAttribute, ok := attributes["minimum_5g_advertising_rates"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_5g_advertising_rates is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	minimum5gAdvertisingRatesVal, ok := minimum5gAdvertisingRatesAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_5g_advertising_rates expected to be basetypes.BoolValue, was: %T`, minimum5gAdvertisingRatesAttribute))
	}

	minimum5gDataRateEnabledAttribute, ok := attributes["minimum_5g_data_rate_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_5g_data_rate_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	minimum5gDataRateEnabledVal, ok := minimum5gDataRateEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_5g_data_rate_enabled expected to be basetypes.BoolValue, was: %T`, minimum5gDataRateEnabledAttribute))
	}

	minimum5gDataRateKbpsAttribute, ok := attributes["minimum_5g_data_rate_kbps"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_5g_data_rate_kbps is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	minimum5gDataRateKbpsVal, ok := minimum5gDataRateKbpsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_5g_data_rate_kbps expected to be basetypes.Int64Value, was: %T`, minimum5gDataRateKbpsAttribute))
	}

	minimumDataRateSettingPreferenceAttribute, ok := attributes["minimum_data_rate_setting_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minimum_data_rate_setting_preference is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	minimumDataRateSettingPreferenceVal, ok := minimumDataRateSettingPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minimum_data_rate_setting_preference expected to be basetypes.StringValue, was: %T`, minimumDataRateSettingPreferenceAttribute))
	}

	mloEnabledAttribute, ok := attributes["mlo_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mlo_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	mloEnabledVal, ok := mloEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mlo_enabled expected to be basetypes.BoolValue, was: %T`, mloEnabledAttribute))
	}

	multicastEnhanceEnabledAttribute, ok := attributes["multicast_enhance_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multicast_enhance_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	multicastEnhanceEnabledVal, ok := multicastEnhanceEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multicast_enhance_enabled expected to be basetypes.BoolValue, was: %T`, multicastEnhanceEnabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	no2ghzOuiAttribute, ok := attributes["no2ghz_oui"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`no2ghz_oui is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	no2ghzOuiVal, ok := no2ghzOuiAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`no2ghz_oui expected to be basetypes.BoolValue, was: %T`, no2ghzOuiAttribute))
	}

	optimizeIotWifiConnectivityAttribute, ok := attributes["optimize_iot_wifi_connectivity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optimize_iot_wifi_connectivity is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	optimizeIotWifiConnectivityVal, ok := optimizeIotWifiConnectivityAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optimize_iot_wifi_connectivity expected to be basetypes.BoolValue, was: %T`, optimizeIotWifiConnectivityAttribute))
	}

	passphraseAttribute, ok := attributes["passphrase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	passphraseVal, ok := passphraseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase expected to be basetypes.StringValue, was: %T`, passphraseAttribute))
	}

	passphraseAutogeneratedAttribute, ok := attributes["passphrase_autogenerated"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_autogenerated is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	passphraseAutogeneratedVal, ok := passphraseAutogeneratedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_autogenerated expected to be basetypes.BoolValue, was: %T`, passphraseAutogeneratedAttribute))
	}

	pmfModeAttribute, ok := attributes["pmf_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pmf_mode is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	pmfModeVal, ok := pmfModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pmf_mode expected to be basetypes.StringValue, was: %T`, pmfModeAttribute))
	}

	privatePresharedKeysAttribute, ok := attributes["private_preshared_keys"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_preshared_keys is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	privatePresharedKeysVal, ok := privatePresharedKeysAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_preshared_keys expected to be basetypes.ListValue, was: %T`, privatePresharedKeysAttribute))
	}

	privatePresharedKeysEnabledAttribute, ok := attributes["private_preshared_keys_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_preshared_keys_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	privatePresharedKeysEnabledVal, ok := privatePresharedKeysEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_preshared_keys_enabled expected to be basetypes.BoolValue, was: %T`, privatePresharedKeysEnabledAttribute))
	}

	proxyArpAttribute, ok := attributes["proxy_arp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`proxy_arp is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	proxyArpVal, ok := proxyArpAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`proxy_arp expected to be basetypes.BoolValue, was: %T`, proxyArpAttribute))
	}

	radiusDasEnabledAttribute, ok := attributes["radius_das_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_das_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	radiusDasEnabledVal, ok := radiusDasEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_das_enabled expected to be basetypes.BoolValue, was: %T`, radiusDasEnabledAttribute))
	}

	radiusMacAclFormatAttribute, ok := attributes["radius_mac_acl_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_mac_acl_format is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	radiusMacAclFormatVal, ok := radiusMacAclFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_mac_acl_format expected to be basetypes.StringValue, was: %T`, radiusMacAclFormatAttribute))
	}

	radiusMacAuthEnabledAttribute, ok := attributes["radius_mac_auth_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_mac_auth_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	radiusMacAuthEnabledVal, ok := radiusMacAuthEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_mac_auth_enabled expected to be basetypes.BoolValue, was: %T`, radiusMacAuthEnabledAttribute))
	}

	radiusProfileIdAttribute, ok := attributes["radius_profile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_profile_id is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	radiusProfileIdVal, ok := radiusProfileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_profile_id expected to be basetypes.StringValue, was: %T`, radiusProfileIdAttribute))
	}

	saeGroupsAttribute, ok := attributes["sae_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sae_groups is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	saeGroupsVal, ok := saeGroupsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sae_groups expected to be basetypes.ListValue, was: %T`, saeGroupsAttribute))
	}

	saePsksAttribute, ok := attributes["sae_psks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sae_psks is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	saePsksVal, ok := saePsksAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sae_psks expected to be basetypes.ListValue, was: %T`, saePsksAttribute))
	}

	scheduleAttribute, ok := attributes["schedule"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schedule is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	scheduleVal, ok := scheduleAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schedule expected to be basetypes.ListValue, was: %T`, scheduleAttribute))
	}

	securityAttribute, ok := attributes["security"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	securityVal, ok := securityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security expected to be basetypes.StringValue, was: %T`, securityAttribute))
	}

	settingPreferenceAttribute, ok := attributes["setting_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`setting_preference is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	settingPreferenceVal, ok := settingPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`setting_preference expected to be basetypes.StringValue, was: %T`, settingPreferenceAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	uapsdEnabledAttribute, ok := attributes["uapsd_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uapsd_enabled is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	uapsdEnabledVal, ok := uapsdEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uapsd_enabled expected to be basetypes.BoolValue, was: %T`, uapsdEnabledAttribute))
	}

	userGroupIdAttribute, ok := attributes["user_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_group_id is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	userGroupIdVal, ok := userGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_group_id expected to be basetypes.StringValue, was: %T`, userGroupIdAttribute))
	}

	wlanBandAttribute, ok := attributes["wlan_band"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wlan_band is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wlanBandVal, ok := wlanBandAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wlan_band expected to be basetypes.StringValue, was: %T`, wlanBandAttribute))
	}

	wlanBandsAttribute, ok := attributes["wlan_bands"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wlan_bands is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wlanBandsVal, ok := wlanBandsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wlan_bands expected to be basetypes.ListValue, was: %T`, wlanBandsAttribute))
	}

	wpa3Enhanced192Attribute, ok := attributes["wpa3_enhanced_192"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_enhanced_192 is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wpa3Enhanced192Val, ok := wpa3Enhanced192Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_enhanced_192 expected to be basetypes.BoolValue, was: %T`, wpa3Enhanced192Attribute))
	}

	wpa3FastRoamingAttribute, ok := attributes["wpa3_fast_roaming"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_fast_roaming is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wpa3FastRoamingVal, ok := wpa3FastRoamingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_fast_roaming expected to be basetypes.BoolValue, was: %T`, wpa3FastRoamingAttribute))
	}

	wpa3SupportAttribute, ok := attributes["wpa3_support"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_support is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wpa3SupportVal, ok := wpa3SupportAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_support expected to be basetypes.BoolValue, was: %T`, wpa3SupportAttribute))
	}

	wpa3TransitionAttribute, ok := attributes["wpa3_transition"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa3_transition is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wpa3TransitionVal, ok := wpa3TransitionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa3_transition expected to be basetypes.BoolValue, was: %T`, wpa3TransitionAttribute))
	}

	wpaEncAttribute, ok := attributes["wpa_enc"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa_enc is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wpaEncVal, ok := wpaEncAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa_enc expected to be basetypes.StringValue, was: %T`, wpaEncAttribute))
	}

	wpaModeAttribute, ok := attributes["wpa_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wpa_mode is missing from object`)

		return NewWlansValueUnknown(), diags
	}

	wpaModeVal, ok := wpaModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wpa_mode expected to be basetypes.StringValue, was: %T`, wpaModeAttribute))
	}

	if diags.HasError() {
		return NewWlansValueUnknown(), diags
	}

	return WlansValue{
		ApGroupIds:                       apGroupIdsVal,
		ApGroupMode:                      apGroupModeVal,
		BSupported:                       bSupportedVal,
		BroadcastFilterList:              broadcastFilterListVal,
		BssTransition:                    bssTransitionVal,
		Dtim2g:                           dtim2gVal,
		Dtim5g:                           dtim5gVal,
		Dtim6e:                           dtim6eVal,
		DtimMode:                         dtimModeVal,
		Enabled:                          enabledVal,
		EnhancedIot:                      enhancedIotVal,
		FastRoamingEnabled:               fastRoamingEnabledVal,
		GroupRekey:                       groupRekeyVal,
		HideSsid:                         hideSsidVal,
		Hotspot2confEnabled:              hotspot2confEnabledVal,
		IappEnabled:                      iappEnabledVal,
		IappKey:                          iappKeyVal,
		Id:                               idVal,
		IsGuest:                          isGuestVal,
		L2Isolation:                      l2IsolationVal,
		MacFilterEnabled:                 macFilterEnabledVal,
		MacFilterList:                    macFilterListVal,
		MacFilterPolicy:                  macFilterPolicyVal,
		Minimum2gAdvertisingRates:        minimum2gAdvertisingRatesVal,
		Minimum2gDataRateEnabled:         minimum2gDataRateEnabledVal,
		Minimum2gDataRateKbps:            minimum2gDataRateKbpsVal,
		Minimum5gAdvertisingRates:        minimum5gAdvertisingRatesVal,
		Minimum5gDataRateEnabled:         minimum5gDataRateEnabledVal,
		Minimum5gDataRateKbps:            minimum5gDataRateKbpsVal,
		MinimumDataRateSettingPreference: minimumDataRateSettingPreferenceVal,
		MloEnabled:                       mloEnabledVal,
		MulticastEnhanceEnabled:          multicastEnhanceEnabledVal,
		Name:                             nameVal,
		NetworkId:                        networkIdVal,
		No2ghzOui:                        no2ghzOuiVal,
		OptimizeIotWifiConnectivity:      optimizeIotWifiConnectivityVal,
		Passphrase:                       passphraseVal,
		PassphraseAutogenerated:          passphraseAutogeneratedVal,
		PmfMode:                          pmfModeVal,
		PrivatePresharedKeys:             privatePresharedKeysVal,
		PrivatePresharedKeysEnabled:      privatePresharedKeysEnabledVal,
		ProxyArp:                         proxyArpVal,
		RadiusDasEnabled:                 radiusDasEnabledVal,
		RadiusMacAclFormat:               radiusMacAclFormatVal,
		RadiusMacAuthEnabled:             radiusMacAuthEnabledVal,
		RadiusProfileId:                  radiusProfileIdVal,
		SaeGroups:                        saeGroupsVal,
		SaePsks:                          saePsksVal,
		Schedule:                         scheduleVal,
		Security:                         securityVal,
		SettingPreference:                settingPreferenceVal,
		SiteId:                           siteIdVal,
		UapsdEnabled:                     uapsdEnabledVal,
		UserGroupId:                      userGroupIdVal,
		WlanBand:                         wlanBandVal,
		WlanBands:                        wlanBandsVal,
		Wpa3Enhanced192:                  wpa3Enhanced192Val,
		Wpa3FastRoaming:                  wpa3FastRoamingVal,
		Wpa3Support:                      wpa3SupportVal,
		Wpa3Transition:                   wpa3TransitionVal,
		WpaEnc:                           wpaEncVal,
		WpaMode:                          wpaModeVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewWlansValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WlansValue {
	object, diags := NewWlansValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWlansValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WlansType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWlansValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWlansValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWlansValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWlansValueMust(WlansValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WlansType) ValueType(ctx context.Context) attr.Value {
	return WlansValue{}
}

var _ basetypes.ObjectValuable = WlansValue{}

type WlansValue struct {
	ApGroupIds                       basetypes.ListValue   `tfsdk:"ap_group_ids"`
	ApGroupMode                      basetypes.StringValue `tfsdk:"ap_group_mode"`
	BSupported                       basetypes.BoolValue   `tfsdk:"b_supported"`
	BroadcastFilterList              basetypes.ListValue   `tfsdk:"broadcast_filter_list"`
	BssTransition                    basetypes.BoolValue   `tfsdk:"bss_transition"`
	Dtim2g                           basetypes.Int64Value  `tfsdk:"dtim_2g"`
	Dtim5g                           basetypes.Int64Value  `tfsdk:"dtim_5g"`
	Dtim6e                           basetypes.BoolValue   `tfsdk:"dtim_6e"`
	DtimMode                         basetypes.StringValue `tfsdk:"dtim_mode"`
	Enabled                          basetypes.BoolValue   `tfsdk:"enabled"`
	EnhancedIot                      basetypes.BoolValue   `tfsdk:"enhanced_iot"`
	FastRoamingEnabled               basetypes.BoolValue   `tfsdk:"fast_roaming_enabled"`
	GroupRekey                       basetypes.Int64Value  `tfsdk:"group_rekey"`
	HideSsid                         basetypes.BoolValue   `tfsdk:"hide_ssid"`
	Hotspot2confEnabled              basetypes.BoolValue   `tfsdk:"hotspot2conf_enabled"`
	IappEnabled                      basetypes.BoolValue   `tfsdk:"iapp_enabled"`
	IappKey                          basetypes.StringValue `tfsdk:"iapp_key"`
	Id                               basetypes.StringValue `tfsdk:"id"`
	IsGuest                          basetypes.BoolValue   `tfsdk:"is_guest"`
	L2Isolation                      basetypes.BoolValue   `tfsdk:"l2_isolation"`
	MacFilterEnabled                 basetypes.BoolValue   `tfsdk:"mac_filter_enabled"`
	MacFilterList                    basetypes.ListValue   `tfsdk:"mac_filter_list"`
	MacFilterPolicy                  basetypes.StringValue `tfsdk:"mac_filter_policy"`
	Minimum2gAdvertisingRates        basetypes.BoolValue   `tfsdk:"minimum_2g_advertising_rates"`
	Minimum2gDataRateEnabled         basetypes.BoolValue   `tfsdk:"minimum_2g_data_rate_enabled"`
	Minimum2gDataRateKbps            basetypes.Int64Value  `tfsdk:"minimum_2g_data_rate_kbps"`
	Minimum5gAdvertisingRates        basetypes.BoolValue   `tfsdk:"minimum_5g_advertising_rates"`
	Minimum5gDataRateEnabled         basetypes.BoolValue   `tfsdk:"minimum_5g_data_rate_enabled"`
	Minimum5gDataRateKbps            basetypes.Int64Value  `tfsdk:"minimum_5g_data_rate_kbps"`
	MinimumDataRateSettingPreference basetypes.StringValue `tfsdk:"minimum_data_rate_setting_preference"`
	MloEnabled                       basetypes.BoolValue   `tfsdk:"mlo_enabled"`
	MulticastEnhanceEnabled          basetypes.BoolValue   `tfsdk:"multicast_enhance_enabled"`
	Name                             basetypes.StringValue `tfsdk:"name"`
	NetworkId                        basetypes.StringValue `tfsdk:"network_id"`
	No2ghzOui                        basetypes.BoolValue   `tfsdk:"no2ghz_oui"`
	OptimizeIotWifiConnectivity      basetypes.BoolValue   `tfsdk:"optimize_iot_wifi_connectivity"`
	Passphrase                       basetypes.StringValue `tfsdk:"passphrase"`
	PassphraseAutogenerated          basetypes.BoolValue   `tfsdk:"passphrase_autogenerated"`
	PmfMode                          basetypes.StringValue `tfsdk:"pmf_mode"`
	PrivatePresharedKeys             basetypes.ListValue   `tfsdk:"private_preshared_keys"`
	PrivatePresharedKeysEnabled      basetypes.BoolValue   `tfsdk:"private_preshared_keys_enabled"`
	ProxyArp                         basetypes.BoolValue   `tfsdk:"proxy_arp"`
	RadiusDasEnabled                 basetypes.BoolValue   `tfsdk:"radius_das_enabled"`
	RadiusMacAclFormat               basetypes.StringValue `tfsdk:"radius_mac_acl_format"`
	RadiusMacAuthEnabled             basetypes.BoolValue   `tfsdk:"radius_mac_auth_enabled"`
	RadiusProfileId                  basetypes.StringValue `tfsdk:"radius_profile_id"`
	SaeGroups                        basetypes.ListValue   `tfsdk:"sae_groups"`
	SaePsks                          basetypes.ListValue   `tfsdk:"sae_psks"`
	Schedule                         basetypes.ListValue   `tfsdk:"schedule"`
	Security                         basetypes.StringValue `tfsdk:"security"`
	SettingPreference                basetypes.StringValue `tfsdk:"setting_preference"`
	SiteId                           basetypes.StringValue `tfsdk:"site_id"`
	UapsdEnabled                     basetypes.BoolValue   `tfsdk:"uapsd_enabled"`
	UserGroupId                      basetypes.StringValue `tfsdk:"user_group_id"`
	WlanBand                         basetypes.StringValue `tfsdk:"wlan_band"`
	WlanBands                        basetypes.ListValue   `tfsdk:"wlan_bands"`
	Wpa3Enhanced192                  basetypes.BoolValue   `tfsdk:"wpa3_enhanced_192"`
	Wpa3FastRoaming                  basetypes.BoolValue   `tfsdk:"wpa3_fast_roaming"`
	Wpa3Support                      basetypes.BoolValue   `tfsdk:"wpa3_support"`
	Wpa3Transition                   basetypes.BoolValue   `tfsdk:"wpa3_transition"`
	WpaEnc                           basetypes.StringValue `tfsdk:"wpa_enc"`
	WpaMode                          basetypes.StringValue `tfsdk:"wpa_mode"`
	state                            attr.ValueState
}

func (v WlansValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 62)

	var val tftypes.Value
	var err error

	attrTypes["ap_group_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["ap_group_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["b_supported"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["broadcast_filter_list"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["bss_transition"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["dtim_2g"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["dtim_5g"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["dtim_6e"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["dtim_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["enhanced_iot"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["fast_roaming_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["group_rekey"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["hide_ssid"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["hotspot2conf_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["iapp_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["iapp_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_guest"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["l2_isolation"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["mac_filter_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["mac_filter_list"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["mac_filter_policy"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["minimum_2g_advertising_rates"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["minimum_2g_data_rate_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["minimum_2g_data_rate_kbps"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minimum_5g_advertising_rates"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["minimum_5g_data_rate_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["minimum_5g_data_rate_kbps"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["minimum_data_rate_setting_preference"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mlo_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["multicast_enhance_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["no2ghz_oui"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["optimize_iot_wifi_connectivity"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["passphrase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_autogenerated"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["pmf_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_preshared_keys"] = basetypes.ListType{
		ElemType: PrivatePresharedKeysValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["private_preshared_keys_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["proxy_arp"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["radius_das_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["radius_mac_acl_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["radius_mac_auth_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["radius_profile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sae_groups"] = basetypes.ListType{
		ElemType: types.Int64Type,
	}.TerraformType(ctx)
	attrTypes["sae_psks"] = basetypes.ListType{
		ElemType: SaePsksValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["schedule"] = basetypes.ListType{
		ElemType: ScheduleValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["security"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["setting_preference"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uapsd_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["user_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["wlan_band"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["wlan_bands"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["wpa3_enhanced_192"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["wpa3_fast_roaming"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["wpa3_support"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["wpa3_transition"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["wpa_enc"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["wpa_mode"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 62)

		val, err = v.ApGroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ap_group_ids"] = val

		val, err = v.ApGroupMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ap_group_mode"] = val

		val, err = v.BSupported.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["b_supported"] = val

		val, err = v.BroadcastFilterList.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["broadcast_filter_list"] = val

		val, err = v.BssTransition.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bss_transition"] = val

		val, err = v.Dtim2g.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dtim_2g"] = val

		val, err = v.Dtim5g.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dtim_5g"] = val

		val, err = v.Dtim6e.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dtim_6e"] = val

		val, err = v.DtimMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dtim_mode"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.EnhancedIot.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enhanced_iot"] = val

		val, err = v.FastRoamingEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fast_roaming_enabled"] = val

		val, err = v.GroupRekey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group_rekey"] = val

		val, err = v.HideSsid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hide_ssid"] = val

		val, err = v.Hotspot2confEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hotspot2conf_enabled"] = val

		val, err = v.IappEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["iapp_enabled"] = val

		val, err = v.IappKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["iapp_key"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.IsGuest.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_guest"] = val

		val, err = v.L2Isolation.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["l2_isolation"] = val

		val, err = v.MacFilterEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac_filter_enabled"] = val

		val, err = v.MacFilterList.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac_filter_list"] = val

		val, err = v.MacFilterPolicy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac_filter_policy"] = val

		val, err = v.Minimum2gAdvertisingRates.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minimum_2g_advertising_rates"] = val

		val, err = v.Minimum2gDataRateEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minimum_2g_data_rate_enabled"] = val

		val, err = v.Minimum2gDataRateKbps.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minimum_2g_data_rate_kbps"] = val

		val, err = v.Minimum5gAdvertisingRates.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minimum_5g_advertising_rates"] = val

		val, err = v.Minimum5gDataRateEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minimum_5g_data_rate_enabled"] = val

		val, err = v.Minimum5gDataRateKbps.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minimum_5g_data_rate_kbps"] = val

		val, err = v.MinimumDataRateSettingPreference.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minimum_data_rate_setting_preference"] = val

		val, err = v.MloEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mlo_enabled"] = val

		val, err = v.MulticastEnhanceEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["multicast_enhance_enabled"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.NetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_id"] = val

		val, err = v.No2ghzOui.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["no2ghz_oui"] = val

		val, err = v.OptimizeIotWifiConnectivity.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["optimize_iot_wifi_connectivity"] = val

		val, err = v.Passphrase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase"] = val

		val, err = v.PassphraseAutogenerated.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_autogenerated"] = val

		val, err = v.PmfMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["pmf_mode"] = val

		val, err = v.PrivatePresharedKeys.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_preshared_keys"] = val

		val, err = v.PrivatePresharedKeysEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_preshared_keys_enabled"] = val

		val, err = v.ProxyArp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["proxy_arp"] = val

		val, err = v.RadiusDasEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["radius_das_enabled"] = val

		val, err = v.RadiusMacAclFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["radius_mac_acl_format"] = val

		val, err = v.RadiusMacAuthEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["radius_mac_auth_enabled"] = val

		val, err = v.RadiusProfileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["radius_profile_id"] = val

		val, err = v.SaeGroups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sae_groups"] = val

		val, err = v.SaePsks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sae_psks"] = val

		val, err = v.Schedule.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schedule"] = val

		val, err = v.Security.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security"] = val

		val, err = v.SettingPreference.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["setting_preference"] = val

		val, err = v.SiteId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_id"] = val

		val, err = v.UapsdEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uapsd_enabled"] = val

		val, err = v.UserGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user_group_id"] = val

		val, err = v.WlanBand.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wlan_band"] = val

		val, err = v.WlanBands.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wlan_bands"] = val

		val, err = v.Wpa3Enhanced192.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wpa3_enhanced_192"] = val

		val, err = v.Wpa3FastRoaming.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wpa3_fast_roaming"] = val

		val, err = v.Wpa3Support.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wpa3_support"] = val

		val, err = v.Wpa3Transition.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wpa3_transition"] = val

		val, err = v.WpaEnc.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wpa_enc"] = val

		val, err = v.WpaMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wpa_mode"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WlansValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WlansValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WlansValue) String() string {
	return "WlansValue"
}

func (v WlansValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	privatePresharedKeys := types.ListValueMust(
		PrivatePresharedKeysType{
			basetypes.ObjectType{
				AttrTypes: PrivatePresharedKeysValue{}.AttributeTypes(ctx),
			},
		},
		v.PrivatePresharedKeys.Elements(),
	)

	if v.PrivatePresharedKeys.IsNull() {
		privatePresharedKeys = types.ListNull(
			PrivatePresharedKeysType{
				basetypes.ObjectType{
					AttrTypes: PrivatePresharedKeysValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.PrivatePresharedKeys.IsUnknown() {
		privatePresharedKeys = types.ListUnknown(
			PrivatePresharedKeysType{
				basetypes.ObjectType{
					AttrTypes: PrivatePresharedKeysValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	saePsks := types.ListValueMust(
		SaePsksType{
			basetypes.ObjectType{
				AttrTypes: SaePsksValue{}.AttributeTypes(ctx),
			},
		},
		v.SaePsks.Elements(),
	)

	if v.SaePsks.IsNull() {
		saePsks = types.ListNull(
			SaePsksType{
				basetypes.ObjectType{
					AttrTypes: SaePsksValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.SaePsks.IsUnknown() {
		saePsks = types.ListUnknown(
			SaePsksType{
				basetypes.ObjectType{
					AttrTypes: SaePsksValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	schedule := types.ListValueMust(
		ScheduleType{
			basetypes.ObjectType{
				AttrTypes: ScheduleValue{}.AttributeTypes(ctx),
			},
		},
		v.Schedule.Elements(),
	)

	if v.Schedule.IsNull() {
		schedule = types.ListNull(
			ScheduleType{
				basetypes.ObjectType{
					AttrTypes: ScheduleValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Schedule.IsUnknown() {
		schedule = types.ListUnknown(
			ScheduleType{
				basetypes.ObjectType{
					AttrTypes: ScheduleValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var apGroupIdsVal basetypes.ListValue
	switch {
	case v.ApGroupIds.IsUnknown():
		apGroupIdsVal = types.ListUnknown(types.StringType)
	case v.ApGroupIds.IsNull():
		apGroupIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		apGroupIdsVal, d = types.ListValue(types.StringType, v.ApGroupIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"ap_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ap_group_mode": basetypes.StringType{},
			"b_supported":   basetypes.BoolType{},
			"broadcast_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"bss_transition":       basetypes.BoolType{},
			"dtim_2g":              basetypes.Int64Type{},
			"dtim_5g":              basetypes.Int64Type{},
			"dtim_6e":              basetypes.BoolType{},
			"dtim_mode":            basetypes.StringType{},
			"enabled":              basetypes.BoolType{},
			"enhanced_iot":         basetypes.BoolType{},
			"fast_roaming_enabled": basetypes.BoolType{},
			"group_rekey":          basetypes.Int64Type{},
			"hide_ssid":            basetypes.BoolType{},
			"hotspot2conf_enabled": basetypes.BoolType{},
			"iapp_enabled":         basetypes.BoolType{},
			"iapp_key":             basetypes.StringType{},
			"id":                   basetypes.StringType{},
			"is_guest":             basetypes.BoolType{},
			"l2_isolation":         basetypes.BoolType{},
			"mac_filter_enabled":   basetypes.BoolType{},
			"mac_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mac_filter_policy":                    basetypes.StringType{},
			"minimum_2g_advertising_rates":         basetypes.BoolType{},
			"minimum_2g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_2g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_5g_advertising_rates":         basetypes.BoolType{},
			"minimum_5g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_5g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_data_rate_setting_preference": basetypes.StringType{},
			"mlo_enabled":                          basetypes.BoolType{},
			"multicast_enhance_enabled":            basetypes.BoolType{},
			"name":                                 basetypes.StringType{},
			"network_id":                           basetypes.StringType{},
			"no2ghz_oui":                           basetypes.BoolType{},
			"optimize_iot_wifi_connectivity":       basetypes.BoolType{},
			"passphrase":                           basetypes.StringType{},
			"passphrase_autogenerated":             basetypes.BoolType{},
			"pmf_mode":                             basetypes.StringType{},
			"private_preshared_keys": basetypes.ListType{
				ElemType: PrivatePresharedKeysValue{}.Type(ctx),
			},
			"private_preshared_keys_enabled": basetypes.BoolType{},
			"proxy_arp":                      basetypes.BoolType{},
			"radius_das_enabled":             basetypes.BoolType{},
			"radius_mac_acl_format":          basetypes.StringType{},
			"radius_mac_auth_enabled":        basetypes.BoolType{},
			"radius_profile_id":              basetypes.StringType{},
			"sae_groups": basetypes.ListType{
				ElemType: types.Int64Type,
			},
			"sae_psks": basetypes.ListType{
				ElemType: SaePsksValue{}.Type(ctx),
			},
			"schedule": basetypes.ListType{
				ElemType: ScheduleValue{}.Type(ctx),
			},
			"security":           basetypes.StringType{},
			"setting_preference": basetypes.StringType{},
			"site_id":            basetypes.StringType{},
			"uapsd_enabled":      basetypes.BoolType{},
			"user_group_id":      basetypes.StringType{},
			"wlan_band":          basetypes.StringType{},
			"wlan_bands": basetypes.ListType{
				ElemType: types.StringType,
			},
			"wpa3_enhanced_192": basetypes.BoolType{},
			"wpa3_fast_roaming": basetypes.BoolType{},
			"wpa3_support":      basetypes.BoolType{},
			"wpa3_transition":   basetypes.BoolType{},
			"wpa_enc":           basetypes.StringType{},
			"wpa_mode":          basetypes.StringType{},
		}), diags
	}

	var broadcastFilterListVal basetypes.ListValue
	switch {
	case v.BroadcastFilterList.IsUnknown():
		broadcastFilterListVal = types.ListUnknown(types.StringType)
	case v.BroadcastFilterList.IsNull():
		broadcastFilterListVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		broadcastFilterListVal, d = types.ListValue(types.StringType, v.BroadcastFilterList.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"ap_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ap_group_mode": basetypes.StringType{},
			"b_supported":   basetypes.BoolType{},
			"broadcast_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"bss_transition":       basetypes.BoolType{},
			"dtim_2g":              basetypes.Int64Type{},
			"dtim_5g":              basetypes.Int64Type{},
			"dtim_6e":              basetypes.BoolType{},
			"dtim_mode":            basetypes.StringType{},
			"enabled":              basetypes.BoolType{},
			"enhanced_iot":         basetypes.BoolType{},
			"fast_roaming_enabled": basetypes.BoolType{},
			"group_rekey":          basetypes.Int64Type{},
			"hide_ssid":            basetypes.BoolType{},
			"hotspot2conf_enabled": basetypes.BoolType{},
			"iapp_enabled":         basetypes.BoolType{},
			"iapp_key":             basetypes.StringType{},
			"id":                   basetypes.StringType{},
			"is_guest":             basetypes.BoolType{},
			"l2_isolation":         basetypes.BoolType{},
			"mac_filter_enabled":   basetypes.BoolType{},
			"mac_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mac_filter_policy":                    basetypes.StringType{},
			"minimum_2g_advertising_rates":         basetypes.BoolType{},
			"minimum_2g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_2g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_5g_advertising_rates":         basetypes.BoolType{},
			"minimum_5g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_5g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_data_rate_setting_preference": basetypes.StringType{},
			"mlo_enabled":                          basetypes.BoolType{},
			"multicast_enhance_enabled":            basetypes.BoolType{},
			"name":                                 basetypes.StringType{},
			"network_id":                           basetypes.StringType{},
			"no2ghz_oui":                           basetypes.BoolType{},
			"optimize_iot_wifi_connectivity":       basetypes.BoolType{},
			"passphrase":                           basetypes.StringType{},
			"passphrase_autogenerated":             basetypes.BoolType{},
			"pmf_mode":                             basetypes.StringType{},
			"private_preshared_keys": basetypes.ListType{
				ElemType: PrivatePresharedKeysValue{}.Type(ctx),
			},
			"private_preshared_keys_enabled": basetypes.BoolType{},
			"proxy_arp":                      basetypes.BoolType{},
			"radius_das_enabled":             basetypes.BoolType{},
			"radius_mac_acl_format":          basetypes.StringType{},
			"radius_mac_auth_enabled":        basetypes.BoolType{},
			"radius_profile_id":              basetypes.StringType{},
			"sae_groups": basetypes.ListType{
				ElemType: types.Int64Type,
			},
			"sae_psks": basetypes.ListType{
				ElemType: SaePsksValue{}.Type(ctx),
			},
			"schedule": basetypes.ListType{
				ElemType: ScheduleValue{}.Type(ctx),
			},
			"security":           basetypes.StringType{},
			"setting_preference": basetypes.StringType{},
			"site_id":            basetypes.StringType{},
			"uapsd_enabled":      basetypes.BoolType{},
			"user_group_id":      basetypes.StringType{},
			"wlan_band":          basetypes.StringType{},
			"wlan_bands": basetypes.ListType{
				ElemType: types.StringType,
			},
			"wpa3_enhanced_192": basetypes.BoolType{},
			"wpa3_fast_roaming": basetypes.BoolType{},
			"wpa3_support":      basetypes.BoolType{},
			"wpa3_transition":   basetypes.BoolType{},
			"wpa_enc":           basetypes.StringType{},
			"wpa_mode":          basetypes.StringType{},
		}), diags
	}

	var macFilterListVal basetypes.ListValue
	switch {
	case v.MacFilterList.IsUnknown():
		macFilterListVal = types.ListUnknown(types.StringType)
	case v.MacFilterList.IsNull():
		macFilterListVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		macFilterListVal, d = types.ListValue(types.StringType, v.MacFilterList.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"ap_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ap_group_mode": basetypes.StringType{},
			"b_supported":   basetypes.BoolType{},
			"broadcast_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"bss_transition":       basetypes.BoolType{},
			"dtim_2g":              basetypes.Int64Type{},
			"dtim_5g":              basetypes.Int64Type{},
			"dtim_6e":              basetypes.BoolType{},
			"dtim_mode":            basetypes.StringType{},
			"enabled":              basetypes.BoolType{},
			"enhanced_iot":         basetypes.BoolType{},
			"fast_roaming_enabled": basetypes.BoolType{},
			"group_rekey":          basetypes.Int64Type{},
			"hide_ssid":            basetypes.BoolType{},
			"hotspot2conf_enabled": basetypes.BoolType{},
			"iapp_enabled":         basetypes.BoolType{},
			"iapp_key":             basetypes.StringType{},
			"id":                   basetypes.StringType{},
			"is_guest":             basetypes.BoolType{},
			"l2_isolation":         basetypes.BoolType{},
			"mac_filter_enabled":   basetypes.BoolType{},
			"mac_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mac_filter_policy":                    basetypes.StringType{},
			"minimum_2g_advertising_rates":         basetypes.BoolType{},
			"minimum_2g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_2g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_5g_advertising_rates":         basetypes.BoolType{},
			"minimum_5g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_5g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_data_rate_setting_preference": basetypes.StringType{},
			"mlo_enabled":                          basetypes.BoolType{},
			"multicast_enhance_enabled":            basetypes.BoolType{},
			"name":                                 basetypes.StringType{},
			"network_id":                           basetypes.StringType{},
			"no2ghz_oui":                           basetypes.BoolType{},
			"optimize_iot_wifi_connectivity":       basetypes.BoolType{},
			"passphrase":                           basetypes.StringType{},
			"passphrase_autogenerated":             basetypes.BoolType{},
			"pmf_mode":                             basetypes.StringType{},
			"private_preshared_keys": basetypes.ListType{
				ElemType: PrivatePresharedKeysValue{}.Type(ctx),
			},
			"private_preshared_keys_enabled": basetypes.BoolType{},
			"proxy_arp":                      basetypes.BoolType{},
			"radius_das_enabled":             basetypes.BoolType{},
			"radius_mac_acl_format":          basetypes.StringType{},
			"radius_mac_auth_enabled":        basetypes.BoolType{},
			"radius_profile_id":              basetypes.StringType{},
			"sae_groups": basetypes.ListType{
				ElemType: types.Int64Type,
			},
			"sae_psks": basetypes.ListType{
				ElemType: SaePsksValue{}.Type(ctx),
			},
			"schedule": basetypes.ListType{
				ElemType: ScheduleValue{}.Type(ctx),
			},
			"security":           basetypes.StringType{},
			"setting_preference": basetypes.StringType{},
			"site_id":            basetypes.StringType{},
			"uapsd_enabled":      basetypes.BoolType{},
			"user_group_id":      basetypes.StringType{},
			"wlan_band":          basetypes.StringType{},
			"wlan_bands": basetypes.ListType{
				ElemType: types.StringType,
			},
			"wpa3_enhanced_192": basetypes.BoolType{},
			"wpa3_fast_roaming": basetypes.BoolType{},
			"wpa3_support":      basetypes.BoolType{},
			"wpa3_transition":   basetypes.BoolType{},
			"wpa_enc":           basetypes.StringType{},
			"wpa_mode":          basetypes.StringType{},
		}), diags
	}

	var saeGroupsVal basetypes.ListValue
	switch {
	case v.SaeGroups.IsUnknown():
		saeGroupsVal = types.ListUnknown(types.Int64Type)
	case v.SaeGroups.IsNull():
		saeGroupsVal = types.ListNull(types.Int64Type)
	default:
		var d diag.Diagnostics
		saeGroupsVal, d = types.ListValue(types.Int64Type, v.SaeGroups.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"ap_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ap_group_mode": basetypes.StringType{},
			"b_supported":   basetypes.BoolType{},
			"broadcast_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"bss_transition":       basetypes.BoolType{},
			"dtim_2g":              basetypes.Int64Type{},
			"dtim_5g":              basetypes.Int64Type{},
			"dtim_6e":              basetypes.BoolType{},
			"dtim_mode":            basetypes.StringType{},
			"enabled":              basetypes.BoolType{},
			"enhanced_iot":         basetypes.BoolType{},
			"fast_roaming_enabled": basetypes.BoolType{},
			"group_rekey":          basetypes.Int64Type{},
			"hide_ssid":            basetypes.BoolType{},
			"hotspot2conf_enabled": basetypes.BoolType{},
			"iapp_enabled":         basetypes.BoolType{},
			"iapp_key":             basetypes.StringType{},
			"id":                   basetypes.StringType{},
			"is_guest":             basetypes.BoolType{},
			"l2_isolation":         basetypes.BoolType{},
			"mac_filter_enabled":   basetypes.BoolType{},
			"mac_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mac_filter_policy":                    basetypes.StringType{},
			"minimum_2g_advertising_rates":         basetypes.BoolType{},
			"minimum_2g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_2g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_5g_advertising_rates":         basetypes.BoolType{},
			"minimum_5g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_5g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_data_rate_setting_preference": basetypes.StringType{},
			"mlo_enabled":                          basetypes.BoolType{},
			"multicast_enhance_enabled":            basetypes.BoolType{},
			"name":                                 basetypes.StringType{},
			"network_id":                           basetypes.StringType{},
			"no2ghz_oui":                           basetypes.BoolType{},
			"optimize_iot_wifi_connectivity":       basetypes.BoolType{},
			"passphrase":                           basetypes.StringType{},
			"passphrase_autogenerated":             basetypes.BoolType{},
			"pmf_mode":                             basetypes.StringType{},
			"private_preshared_keys": basetypes.ListType{
				ElemType: PrivatePresharedKeysValue{}.Type(ctx),
			},
			"private_preshared_keys_enabled": basetypes.BoolType{},
			"proxy_arp":                      basetypes.BoolType{},
			"radius_das_enabled":             basetypes.BoolType{},
			"radius_mac_acl_format":          basetypes.StringType{},
			"radius_mac_auth_enabled":        basetypes.BoolType{},
			"radius_profile_id":              basetypes.StringType{},
			"sae_groups": basetypes.ListType{
				ElemType: types.Int64Type,
			},
			"sae_psks": basetypes.ListType{
				ElemType: SaePsksValue{}.Type(ctx),
			},
			"schedule": basetypes.ListType{
				ElemType: ScheduleValue{}.Type(ctx),
			},
			"security":           basetypes.StringType{},
			"setting_preference": basetypes.StringType{},
			"site_id":            basetypes.StringType{},
			"uapsd_enabled":      basetypes.BoolType{},
			"user_group_id":      basetypes.StringType{},
			"wlan_band":          basetypes.StringType{},
			"wlan_bands": basetypes.ListType{
				ElemType: types.StringType,
			},
			"wpa3_enhanced_192": basetypes.BoolType{},
			"wpa3_fast_roaming": basetypes.BoolType{},
			"wpa3_support":      basetypes.BoolType{},
			"wpa3_transition":   basetypes.BoolType{},
			"wpa_enc":           basetypes.StringType{},
			"wpa_mode":          basetypes.StringType{},
		}), diags
	}

	var wlanBandsVal basetypes.ListValue
	switch {
	case v.WlanBands.IsUnknown():
		wlanBandsVal = types.ListUnknown(types.StringType)
	case v.WlanBands.IsNull():
		wlanBandsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		wlanBandsVal, d = types.ListValue(types.StringType, v.WlanBands.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"ap_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ap_group_mode": basetypes.StringType{},
			"b_supported":   basetypes.BoolType{},
			"broadcast_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"bss_transition":       basetypes.BoolType{},
			"dtim_2g":              basetypes.Int64Type{},
			"dtim_5g":              basetypes.Int64Type{},
			"dtim_6e":              basetypes.BoolType{},
			"dtim_mode":            basetypes.StringType{},
			"enabled":              basetypes.BoolType{},
			"enhanced_iot":         basetypes.BoolType{},
			"fast_roaming_enabled": basetypes.BoolType{},
			"group_rekey":          basetypes.Int64Type{},
			"hide_ssid":            basetypes.BoolType{},
			"hotspot2conf_enabled": basetypes.BoolType{},
			"iapp_enabled":         basetypes.BoolType{},
			"iapp_key":             basetypes.StringType{},
			"id":                   basetypes.StringType{},
			"is_guest":             basetypes.BoolType{},
			"l2_isolation":         basetypes.BoolType{},
			"mac_filter_enabled":   basetypes.BoolType{},
			"mac_filter_list": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mac_filter_policy":                    basetypes.StringType{},
			"minimum_2g_advertising_rates":         basetypes.BoolType{},
			"minimum_2g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_2g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_5g_advertising_rates":         basetypes.BoolType{},
			"minimum_5g_data_rate_enabled":         basetypes.BoolType{},
			"minimum_5g_data_rate_kbps":            basetypes.Int64Type{},
			"minimum_data_rate_setting_preference": basetypes.StringType{},
			"mlo_enabled":                          basetypes.BoolType{},
			"multicast_enhance_enabled":            basetypes.BoolType{},
			"name":                                 basetypes.StringType{},
			"network_id":                           basetypes.StringType{},
			"no2ghz_oui":                           basetypes.BoolType{},
			"optimize_iot_wifi_connectivity":       basetypes.BoolType{},
			"passphrase":                           basetypes.StringType{},
			"passphrase_autogenerated":             basetypes.BoolType{},
			"pmf_mode":                             basetypes.StringType{},
			"private_preshared_keys": basetypes.ListType{
				ElemType: PrivatePresharedKeysValue{}.Type(ctx),
			},
			"private_preshared_keys_enabled": basetypes.BoolType{},
			"proxy_arp":                      basetypes.BoolType{},
			"radius_das_enabled":             basetypes.BoolType{},
			"radius_mac_acl_format":          basetypes.StringType{},
			"radius_mac_auth_enabled":        basetypes.BoolType{},
			"radius_profile_id":              basetypes.StringType{},
			"sae_groups": basetypes.ListType{
				ElemType: types.Int64Type,
			},
			"sae_psks": basetypes.ListType{
				ElemType: SaePsksValue{}.Type(ctx),
			},
			"schedule": basetypes.ListType{
				ElemType: ScheduleValue{}.Type(ctx),
			},
			"security":           basetypes.StringType{},
			"setting_preference": basetypes.StringType{},
			"site_id":            basetypes.StringType{},
			"uapsd_enabled":      basetypes.BoolType{},
			"user_group_id":      basetypes.StringType{},
			"wlan_band":          basetypes.StringType{},
			"wlan_bands": basetypes.ListType{
				ElemType: types.StringType,
			},
			"wpa3_enhanced_192": basetypes.BoolType{},
			"wpa3_fast_roaming": basetypes.BoolType{},
			"wpa3_support":      basetypes.BoolType{},
			"wpa3_transition":   basetypes.BoolType{},
			"wpa_enc":           basetypes.StringType{},
			"wpa_mode":          basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"ap_group_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"ap_group_mode": basetypes.StringType{},
		"b_supported":   basetypes.BoolType{},
		"broadcast_filter_list": basetypes.ListType{
			ElemType: types.StringType,
		},
		"bss_transition":       basetypes.BoolType{},
		"dtim_2g":              basetypes.Int64Type{},
		"dtim_5g":              basetypes.Int64Type{},
		"dtim_6e":              basetypes.BoolType{},
		"dtim_mode":            basetypes.StringType{},
		"enabled":              basetypes.BoolType{},
		"enhanced_iot":         basetypes.BoolType{},
		"fast_roaming_enabled": basetypes.BoolType{},
		"group_rekey":          basetypes.Int64Type{},
		"hide_ssid":            basetypes.BoolType{},
		"hotspot2conf_enabled": basetypes.BoolType{},
		"iapp_enabled":         basetypes.BoolType{},
		"iapp_key":             basetypes.StringType{},
		"id":                   basetypes.StringType{},
		"is_guest":             basetypes.BoolType{},
		"l2_isolation":         basetypes.BoolType{},
		"mac_filter_enabled":   basetypes.BoolType{},
		"mac_filter_list": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mac_filter_policy":                    basetypes.StringType{},
		"minimum_2g_advertising_rates":         basetypes.BoolType{},
		"minimum_2g_data_rate_enabled":         basetypes.BoolType{},
		"minimum_2g_data_rate_kbps":            basetypes.Int64Type{},
		"minimum_5g_advertising_rates":         basetypes.BoolType{},
		"minimum_5g_data_rate_enabled":         basetypes.BoolType{},
		"minimum_5g_data_rate_kbps":            basetypes.Int64Type{},
		"minimum_data_rate_setting_preference": basetypes.StringType{},
		"mlo_enabled":                          basetypes.BoolType{},
		"multicast_enhance_enabled":            basetypes.BoolType{},
		"name":                                 basetypes.StringType{},
		"network_id":                           basetypes.StringType{},
		"no2ghz_oui":                           basetypes.BoolType{},
		"optimize_iot_wifi_connectivity":       basetypes.BoolType{},
		"passphrase":                           basetypes.StringType{},
		"passphrase_autogenerated":             basetypes.BoolType{},
		"pmf_mode":                             basetypes.StringType{},
		"private_preshared_keys": basetypes.ListType{
			ElemType: PrivatePresharedKeysValue{}.Type(ctx),
		},
		"private_preshared_keys_enabled": basetypes.BoolType{},
		"proxy_arp":                      basetypes.BoolType{},
		"radius_das_enabled":             basetypes.BoolType{},
		"radius_mac_acl_format":          basetypes.StringType{},
		"radius_mac_auth_enabled":        basetypes.BoolType{},
		"radius_profile_id":              basetypes.StringType{},
		"sae_groups": basetypes.ListType{
			ElemType: types.Int64Type,
		},
		"sae_psks": basetypes.ListType{
			ElemType: SaePsksValue{}.Type(ctx),
		},
		"schedule": basetypes.ListType{
			ElemType: ScheduleValue{}.Type(ctx),
		},
		"security":           basetypes.StringType{},
		"setting_preference": basetypes.StringType{},
		"site_id":            basetypes.StringType{},
		"uapsd_enabled":      basetypes.BoolType{},
		"user_group_id":      basetypes.StringType{},
		"wlan_band":          basetypes.StringType{},
		"wlan_bands": basetypes.ListType{
			ElemType: types.StringType,
		},
		"wpa3_enhanced_192": basetypes.BoolType{},
		"wpa3_fast_roaming": basetypes.BoolType{},
		"wpa3_support":      basetypes.BoolType{},
		"wpa3_transition":   basetypes.BoolType{},
		"wpa_enc":           basetypes.StringType{},
		"wpa_mode":          basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ap_group_ids":                         apGroupIdsVal,
			"ap_group_mode":                        v.ApGroupMode,
			"b_supported":                          v.BSupported,
			"broadcast_filter_list":                broadcastFilterListVal,
			"bss_transition":                       v.BssTransition,
			"dtim_2g":                              v.Dtim2g,
			"dtim_5g":                              v.Dtim5g,
			"dtim_6e":                              v.Dtim6e,
			"dtim_mode":                            v.DtimMode,
			"enabled":                              v.Enabled,
			"enhanced_iot":                         v.EnhancedIot,
			"fast_roaming_enabled":                 v.FastRoamingEnabled,
			"group_rekey":                          v.GroupRekey,
			"hide_ssid":                            v.HideSsid,
			"hotspot2conf_enabled":                 v.Hotspot2confEnabled,
			"iapp_enabled":                         v.IappEnabled,
			"iapp_key":                             v.IappKey,
			"id":                                   v.Id,
			"is_guest":                             v.IsGuest,
			"l2_isolation":                         v.L2Isolation,
			"mac_filter_enabled":                   v.MacFilterEnabled,
			"mac_filter_list":                      macFilterListVal,
			"mac_filter_policy":                    v.MacFilterPolicy,
			"minimum_2g_advertising_rates":         v.Minimum2gAdvertisingRates,
			"minimum_2g_data_rate_enabled":         v.Minimum2gDataRateEnabled,
			"minimum_2g_data_rate_kbps":            v.Minimum2gDataRateKbps,
			"minimum_5g_advertising_rates":         v.Minimum5gAdvertisingRates,
			"minimum_5g_data_rate_enabled":         v.Minimum5gDataRateEnabled,
			"minimum_5g_data_rate_kbps":            v.Minimum5gDataRateKbps,
			"minimum_data_rate_setting_preference": v.MinimumDataRateSettingPreference,
			"mlo_enabled":                          v.MloEnabled,
			"multicast_enhance_enabled":            v.MulticastEnhanceEnabled,
			"name":                                 v.Name,
			"network_id":                           v.NetworkId,
			"no2ghz_oui":                           v.No2ghzOui,
			"optimize_iot_wifi_connectivity":       v.OptimizeIotWifiConnectivity,
			"passphrase":                           v.Passphrase,
			"passphrase_autogenerated":             v.PassphraseAutogenerated,
			"pmf_mode":                             v.PmfMode,
			"private_preshared_keys":               privatePresharedKeys,
			"private_preshared_keys_enabled":       v.PrivatePresharedKeysEnabled,
			"proxy_arp":                            v.ProxyArp,
			"radius_das_enabled":                   v.RadiusDasEnabled,
			"radius_mac_acl_format":                v.RadiusMacAclFormat,
			"radius_mac_auth_enabled":              v.RadiusMacAuthEnabled,
			"radius_profile_id":                    v.RadiusProfileId,
			"sae_groups":                           saeGroupsVal,
			"sae_psks":                             saePsks,
			"schedule":                             schedule,
			"security":                             v.Security,
			"setting_preference":                   v.SettingPreference,
			"site_id":                              v.SiteId,
			"uapsd_enabled":                        v.UapsdEnabled,
			"user_group_id":                        v.UserGroupId,
			"wlan_band":                            v.WlanBand,
			"wlan_bands":                           wlanBandsVal,
			"wpa3_enhanced_192":                    v.Wpa3Enhanced192,
			"wpa3_fast_roaming":                    v.Wpa3FastRoaming,
			"wpa3_support":                         v.Wpa3Support,
			"wpa3_transition":                      v.Wpa3Transition,
			"wpa_enc":                              v.WpaEnc,
			"wpa_mode":                             v.WpaMode,
		})

	return objVal, diags
}

func (v WlansValue) Equal(o attr.Value) bool {
	other, ok := o.(WlansValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApGroupIds.Equal(other.ApGroupIds) {
		return false
	}

	if !v.ApGroupMode.Equal(other.ApGroupMode) {
		return false
	}

	if !v.BSupported.Equal(other.BSupported) {
		return false
	}

	if !v.BroadcastFilterList.Equal(other.BroadcastFilterList) {
		return false
	}

	if !v.BssTransition.Equal(other.BssTransition) {
		return false
	}

	if !v.Dtim2g.Equal(other.Dtim2g) {
		return false
	}

	if !v.Dtim5g.Equal(other.Dtim5g) {
		return false
	}

	if !v.Dtim6e.Equal(other.Dtim6e) {
		return false
	}

	if !v.DtimMode.Equal(other.DtimMode) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.EnhancedIot.Equal(other.EnhancedIot) {
		return false
	}

	if !v.FastRoamingEnabled.Equal(other.FastRoamingEnabled) {
		return false
	}

	if !v.GroupRekey.Equal(other.GroupRekey) {
		return false
	}

	if !v.HideSsid.Equal(other.HideSsid) {
		return false
	}

	if !v.Hotspot2confEnabled.Equal(other.Hotspot2confEnabled) {
		return false
	}

	if !v.IappEnabled.Equal(other.IappEnabled) {
		return false
	}

	if !v.IappKey.Equal(other.IappKey) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.IsGuest.Equal(other.IsGuest) {
		return false
	}

	if !v.L2Isolation.Equal(other.L2Isolation) {
		return false
	}

	if !v.MacFilterEnabled.Equal(other.MacFilterEnabled) {
		return false
	}

	if !v.MacFilterList.Equal(other.MacFilterList) {
		return false
	}

	if !v.MacFilterPolicy.Equal(other.MacFilterPolicy) {
		return false
	}

	if !v.Minimum2gAdvertisingRates.Equal(other.Minimum2gAdvertisingRates) {
		return false
	}

	if !v.Minimum2gDataRateEnabled.Equal(other.Minimum2gDataRateEnabled) {
		return false
	}

	if !v.Minimum2gDataRateKbps.Equal(other.Minimum2gDataRateKbps) {
		return false
	}

	if !v.Minimum5gAdvertisingRates.Equal(other.Minimum5gAdvertisingRates) {
		return false
	}

	if !v.Minimum5gDataRateEnabled.Equal(other.Minimum5gDataRateEnabled) {
		return false
	}

	if !v.Minimum5gDataRateKbps.Equal(other.Minimum5gDataRateKbps) {
		return false
	}

	if !v.MinimumDataRateSettingPreference.Equal(other.MinimumDataRateSettingPreference) {
		return false
	}

	if !v.MloEnabled.Equal(other.MloEnabled) {
		return false
	}

	if !v.MulticastEnhanceEnabled.Equal(other.MulticastEnhanceEnabled) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.NetworkId.Equal(other.NetworkId) {
		return false
	}

	if !v.No2ghzOui.Equal(other.No2ghzOui) {
		return false
	}

	if !v.OptimizeIotWifiConnectivity.Equal(other.OptimizeIotWifiConnectivity) {
		return false
	}

	if !v.Passphrase.Equal(other.Passphrase) {
		return false
	}

	if !v.PassphraseAutogenerated.Equal(other.PassphraseAutogenerated) {
		return false
	}

	if !v.PmfMode.Equal(other.PmfMode) {
		return false
	}

	if !v.PrivatePresharedKeys.Equal(other.PrivatePresharedKeys) {
		return false
	}

	if !v.PrivatePresharedKeysEnabled.Equal(other.PrivatePresharedKeysEnabled) {
		return false
	}

	if !v.ProxyArp.Equal(other.ProxyArp) {
		return false
	}

	if !v.RadiusDasEnabled.Equal(other.RadiusDasEnabled) {
		return false
	}

	if !v.RadiusMacAclFormat.Equal(other.RadiusMacAclFormat) {
		return false
	}

	if !v.RadiusMacAuthEnabled.Equal(other.RadiusMacAuthEnabled) {
		return false
	}

	if !v.RadiusProfileId.Equal(other.RadiusProfileId) {
		return false
	}

	if !v.SaeGroups.Equal(other.SaeGroups) {
		return false
	}

	if !v.SaePsks.Equal(other.SaePsks) {
		return false
	}

	if !v.Schedule.Equal(other.Schedule) {
		return false
	}

	if !v.Security.Equal(other.Security) {
		return false
	}

	if !v.SettingPreference.Equal(other.SettingPreference) {
		return false
	}

	if !v.SiteId.Equal(other.SiteId) {
		return false
	}

	if !v.UapsdEnabled.Equal(other.UapsdEnabled) {
		return false
	}

	if !v.UserGroupId.Equal(other.UserGroupId) {
		return false
	}

	if !v.WlanBand.Equal(other.WlanBand) {
		return false
	}

	if !v.WlanBands.Equal(other.WlanBands) {
		return false
	}

	if !v.Wpa3Enhanced192.Equal(other.Wpa3Enhanced192) {
		return false
	}

	if !v.Wpa3FastRoaming.Equal(other.Wpa3FastRoaming) {
		return false
	}

	if !v.Wpa3Support.Equal(other.Wpa3Support) {
		return false
	}

	if !v.Wpa3Transition.Equal(other.Wpa3Transition) {
		return false
	}

	if !v.WpaEnc.Equal(other.WpaEnc) {
		return false
	}

	if !v.WpaMode.Equal(other.WpaMode) {
		return false
	}

	return true
}

func (v WlansValue) Type(ctx context.Context) attr.Type {
	return WlansType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WlansValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ap_group_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"ap_group_mode": basetypes.StringType{},
		"b_supported":   basetypes.BoolType{},
		"broadcast_filter_list": basetypes.ListType{
			ElemType: types.StringType,
		},
		"bss_transition":       basetypes.BoolType{},
		"dtim_2g":              basetypes.Int64Type{},
		"dtim_5g":              basetypes.Int64Type{},
		"dtim_6e":              basetypes.BoolType{},
		"dtim_mode":            basetypes.StringType{},
		"enabled":              basetypes.BoolType{},
		"enhanced_iot":         basetypes.BoolType{},
		"fast_roaming_enabled": basetypes.BoolType{},
		"group_rekey":          basetypes.Int64Type{},
		"hide_ssid":            basetypes.BoolType{},
		"hotspot2conf_enabled": basetypes.BoolType{},
		"iapp_enabled":         basetypes.BoolType{},
		"iapp_key":             basetypes.StringType{},
		"id":                   basetypes.StringType{},
		"is_guest":             basetypes.BoolType{},
		"l2_isolation":         basetypes.BoolType{},
		"mac_filter_enabled":   basetypes.BoolType{},
		"mac_filter_list": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mac_filter_policy":                    basetypes.StringType{},
		"minimum_2g_advertising_rates":         basetypes.BoolType{},
		"minimum_2g_data_rate_enabled":         basetypes.BoolType{},
		"minimum_2g_data_rate_kbps":            basetypes.Int64Type{},
		"minimum_5g_advertising_rates":         basetypes.BoolType{},
		"minimum_5g_data_rate_enabled":         basetypes.BoolType{},
		"minimum_5g_data_rate_kbps":            basetypes.Int64Type{},
		"minimum_data_rate_setting_preference": basetypes.StringType{},
		"mlo_enabled":                          basetypes.BoolType{},
		"multicast_enhance_enabled":            basetypes.BoolType{},
		"name":                                 basetypes.StringType{},
		"network_id":                           basetypes.StringType{},
		"no2ghz_oui":                           basetypes.BoolType{},
		"optimize_iot_wifi_connectivity":       basetypes.BoolType{},
		"passphrase":                           basetypes.StringType{},
		"passphrase_autogenerated":             basetypes.BoolType{},
		"pmf_mode":                             basetypes.StringType{},
		"private_preshared_keys": basetypes.ListType{
			ElemType: PrivatePresharedKeysValue{}.Type(ctx),
		},
		"private_preshared_keys_enabled": basetypes.BoolType{},
		"proxy_arp":                      basetypes.BoolType{},
		"radius_das_enabled":             basetypes.BoolType{},
		"radius_mac_acl_format":          basetypes.StringType{},
		"radius_mac_auth_enabled":        basetypes.BoolType{},
		"radius_profile_id":              basetypes.StringType{},
		"sae_groups": basetypes.ListType{
			ElemType: types.Int64Type,
		},
		"sae_psks": basetypes.ListType{
			ElemType: SaePsksValue{}.Type(ctx),
		},
		"schedule": basetypes.ListType{
			ElemType: ScheduleValue{}.Type(ctx),
		},
		"security":           basetypes.StringType{},
		"setting_preference": basetypes.StringType{},
		"site_id":            basetypes.StringType{},
		"uapsd_enabled":      basetypes.BoolType{},
		"user_group_id":      basetypes.StringType{},
		"wlan_band":          basetypes.StringType{},
		"wlan_bands": basetypes.ListType{
			ElemType: types.StringType,
		},
		"wpa3_enhanced_192": basetypes.BoolType{},
		"wpa3_fast_roaming": basetypes.BoolType{},
		"wpa3_support":      basetypes.BoolType{},
		"wpa3_transition":   basetypes.BoolType{},
		"wpa_enc":           basetypes.StringType{},
		"wpa_mode":          basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PrivatePresharedKeysType{}

type PrivatePresharedKeysType struct {
	basetypes.ObjectType
}

func (t PrivatePresharedKeysType) Equal(o attr.Type) bool {
	other, ok := o.(PrivatePresharedKeysType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PrivatePresharedKeysType) String() string {
	return "PrivatePresharedKeysType"
}

func (t PrivatePresharedKeysType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return nil, diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PrivatePresharedKeysValue{
		NetworkId: networkIdVal,
		Password:  passwordVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewPrivatePresharedKeysValueNull() PrivatePresharedKeysValue {
	return PrivatePresharedKeysValue{
		state: attr.ValueStateNull,
	}
}

func NewPrivatePresharedKeysValueUnknown() PrivatePresharedKeysValue {
	return PrivatePresharedKeysValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPrivatePresharedKeysValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PrivatePresharedKeysValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PrivatePresharedKeysValue Attribute Value",
				"While creating a PrivatePresharedKeysValue value, a missing attribute value was detected. "+
					"A PrivatePresharedKeysValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivatePresharedKeysValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PrivatePresharedKeysValue Attribute Type",
				"While creating a PrivatePresharedKeysValue value, an invalid attribute value was detected. "+
					"A PrivatePresharedKeysValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivatePresharedKeysValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PrivatePresharedKeysValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PrivatePresharedKeysValue Attribute Value",
				"While creating a PrivatePresharedKeysValue value, an extra attribute value was detected. "+
					"A PrivatePresharedKeysValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PrivatePresharedKeysValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	if diags.HasError() {
		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	return PrivatePresharedKeysValue{
		NetworkId: networkIdVal,
		Password:  passwordVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewPrivatePresharedKeysValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PrivatePresharedKeysValue {
	object, diags := NewPrivatePresharedKeysValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPrivatePresharedKeysValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PrivatePresharedKeysType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPrivatePresharedKeysValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPrivatePresharedKeysValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPrivatePresharedKeysValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPrivatePresharedKeysValueMust(PrivatePresharedKeysValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PrivatePresharedKeysType) ValueType(ctx context.Context) attr.Value {
	return PrivatePresharedKeysValue{}
}

var _ basetypes.ObjectValuable = PrivatePresharedKeysValue{}

type PrivatePresharedKeysValue struct {
	NetworkId basetypes.StringValue `tfsdk:"network_id"`
	Password  basetypes.StringValue `tfsdk:"password"`
	state     attr.ValueState
}

func (v PrivatePresharedKeysValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.NetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_id"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PrivatePresharedKeysValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PrivatePresharedKeysValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PrivatePresharedKeysValue) String() string {
	return "PrivatePresharedKeysValue"
}

func (v PrivatePresharedKeysValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"network_id": basetypes.StringType{},
		"password":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"network_id": v.NetworkId,
			"password":   v.Password,
		})

	return objVal, diags
}

func (v PrivatePresharedKeysValue) Equal(o attr.Value) bool {
	other, ok := o.(PrivatePresharedKeysValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.NetworkId.Equal(other.NetworkId) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	return true
}

func (v PrivatePresharedKeysValue) Type(ctx context.Context) attr.Type {
	return PrivatePresharedKeysType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PrivatePresharedKeysValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"network_id": basetypes.StringType{},
		"password":   basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SaePsksType{}

type SaePsksType struct {
	basetypes.ObjectType
}

func (t SaePsksType) Equal(o attr.Type) bool {
	other, ok := o.(SaePsksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SaePsksType) String() string {
	return "SaePsksType"
}

func (t SaePsksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return nil, diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	pskAttribute, ok := attributes["psk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`psk is missing from object`)

		return nil, diags
	}

	pskVal, ok := pskAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`psk expected to be basetypes.StringValue, was: %T`, pskAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return nil, diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.Int64Value, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SaePsksValue{
		Id:    idVal,
		Mac:   macVal,
		Psk:   pskVal,
		Vlan:  vlanVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSaePsksValueNull() SaePsksValue {
	return SaePsksValue{
		state: attr.ValueStateNull,
	}
}

func NewSaePsksValueUnknown() SaePsksValue {
	return SaePsksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSaePsksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SaePsksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SaePsksValue Attribute Value",
				"While creating a SaePsksValue value, a missing attribute value was detected. "+
					"A SaePsksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SaePsksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SaePsksValue Attribute Type",
				"While creating a SaePsksValue value, an invalid attribute value was detected. "+
					"A SaePsksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SaePsksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SaePsksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SaePsksValue Attribute Value",
				"While creating a SaePsksValue value, an extra attribute value was detected. "+
					"A SaePsksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SaePsksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSaePsksValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	pskAttribute, ok := attributes["psk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`psk is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	pskVal, ok := pskAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`psk expected to be basetypes.StringValue, was: %T`, pskAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.Int64Value, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return NewSaePsksValueUnknown(), diags
	}

	return SaePsksValue{
		Id:    idVal,
		Mac:   macVal,
		Psk:   pskVal,
		Vlan:  vlanVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSaePsksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SaePsksValue {
	object, diags := NewSaePsksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSaePsksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SaePsksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSaePsksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSaePsksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSaePsksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSaePsksValueMust(SaePsksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SaePsksType) ValueType(ctx context.Context) attr.Value {
	return SaePsksValue{}
}

var _ basetypes.ObjectValuable = SaePsksValue{}

type SaePsksValue struct {
	Id    basetypes.StringValue `tfsdk:"id"`
	Mac   basetypes.StringValue `tfsdk:"mac"`
	Psk   basetypes.StringValue `tfsdk:"psk"`
	Vlan  basetypes.Int64Value  `tfsdk:"vlan"`
	state attr.ValueState
}

func (v SaePsksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["psk"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vlan"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Mac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac"] = val

		val, err = v.Psk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["psk"] = val

		val, err = v.Vlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vlan"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SaePsksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SaePsksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SaePsksValue) String() string {
	return "SaePsksValue"
}

func (v SaePsksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.StringType{},
		"mac":  basetypes.StringType{},
		"psk":  basetypes.StringType{},
		"vlan": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.Id,
			"mac":  v.Mac,
			"psk":  v.Psk,
			"vlan": v.Vlan,
		})

	return objVal, diags
}

func (v SaePsksValue) Equal(o attr.Value) bool {
	other, ok := o.(SaePsksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Mac.Equal(other.Mac) {
		return false
	}

	if !v.Psk.Equal(other.Psk) {
		return false
	}

	if !v.Vlan.Equal(other.Vlan) {
		return false
	}

	return true
}

func (v SaePsksValue) Type(ctx context.Context) attr.Type {
	return SaePsksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SaePsksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.StringType{},
		"mac":  basetypes.StringType{},
		"psk":  basetypes.StringType{},
		"vlan": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = ScheduleType{}

type ScheduleType struct {
	basetypes.ObjectType
}

func (t ScheduleType) Equal(o attr.Type) bool {
	other, ok := o.(ScheduleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ScheduleType) String() string {
	return "ScheduleType"
}

func (t ScheduleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dayOfWeekAttribute, ok := attributes["day_of_week"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day_of_week is missing from object`)

		return nil, diags
	}

	dayOfWeekVal, ok := dayOfWeekAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day_of_week expected to be basetypes.StringValue, was: %T`, dayOfWeekAttribute))
	}

	durationAttribute, ok := attributes["duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`duration is missing from object`)

		return nil, diags
	}

	durationVal, ok := durationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`duration expected to be basetypes.Int64Value, was: %T`, durationAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	startHourAttribute, ok := attributes["start_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_hour is missing from object`)

		return nil, diags
	}

	startHourVal, ok := startHourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_hour expected to be basetypes.Int64Value, was: %T`, startHourAttribute))
	}

	startMinuteAttribute, ok := attributes["start_minute"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_minute is missing from object`)

		return nil, diags
	}

	startMinuteVal, ok := startMinuteAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_minute expected to be basetypes.Int64Value, was: %T`, startMinuteAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ScheduleValue{
		DayOfWeek:   dayOfWeekVal,
		Duration:    durationVal,
		Name:        nameVal,
		StartHour:   startHourVal,
		StartMinute: startMinuteVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewScheduleValueNull() ScheduleValue {
	return ScheduleValue{
		state: attr.ValueStateNull,
	}
}

func NewScheduleValueUnknown() ScheduleValue {
	return ScheduleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewScheduleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ScheduleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ScheduleValue Attribute Value",
				"While creating a ScheduleValue value, a missing attribute value was detected. "+
					"A ScheduleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScheduleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ScheduleValue Attribute Type",
				"While creating a ScheduleValue value, an invalid attribute value was detected. "+
					"A ScheduleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScheduleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ScheduleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ScheduleValue Attribute Value",
				"While creating a ScheduleValue value, an extra attribute value was detected. "+
					"A ScheduleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ScheduleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewScheduleValueUnknown(), diags
	}

	dayOfWeekAttribute, ok := attributes["day_of_week"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day_of_week is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	dayOfWeekVal, ok := dayOfWeekAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day_of_week expected to be basetypes.StringValue, was: %T`, dayOfWeekAttribute))
	}

	durationAttribute, ok := attributes["duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`duration is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	durationVal, ok := durationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`duration expected to be basetypes.Int64Value, was: %T`, durationAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	startHourAttribute, ok := attributes["start_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_hour is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	startHourVal, ok := startHourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_hour expected to be basetypes.Int64Value, was: %T`, startHourAttribute))
	}

	startMinuteAttribute, ok := attributes["start_minute"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_minute is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	startMinuteVal, ok := startMinuteAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_minute expected to be basetypes.Int64Value, was: %T`, startMinuteAttribute))
	}

	if diags.HasError() {
		return NewScheduleValueUnknown(), diags
	}

	return ScheduleValue{
		DayOfWeek:   dayOfWeekVal,
		Duration:    durationVal,
		Name:        nameVal,
		StartHour:   startHourVal,
		StartMinute: startMinuteVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewScheduleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ScheduleValue {
	object, diags := NewScheduleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewScheduleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ScheduleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewScheduleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewScheduleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewScheduleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewScheduleValueMust(ScheduleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ScheduleType) ValueType(ctx context.Context) attr.Value {
	return ScheduleValue{}
}

var _ basetypes.ObjectValuable = ScheduleValue{}

type ScheduleValue struct {
	DayOfWeek   basetypes.StringValue `tfsdk:"day_of_week"`
	Duration    basetypes.Int64Value  `tfsdk:"duration"`
	Name        basetypes.StringValue `tfsdk:"name"`
	StartHour   basetypes.Int64Value  `tfsdk:"start_hour"`
	StartMinute basetypes.Int64Value  `tfsdk:"start_minute"`
	state       attr.ValueState
}

func (v ScheduleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["day_of_week"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["duration"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["start_hour"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["start_minute"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.DayOfWeek.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["day_of_week"] = val

		val, err = v.Duration.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["duration"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.StartHour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_hour"] = val

		val, err = v.StartMinute.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_minute"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ScheduleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ScheduleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ScheduleValue) String() string {
	return "ScheduleValue"
}

func (v ScheduleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"day_of_week":  basetypes.StringType{},
		"duration":     basetypes.Int64Type{},
		"name":         basetypes.StringType{},
		"start_hour":   basetypes.Int64Type{},
		"start_minute": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"day_of_week":  v.DayOfWeek,
			"duration":     v.Duration,
			"name":         v.Name,
			"start_hour":   v.StartHour,
			"start_minute": v.StartMinute,
		})

	return objVal, diags
}

func (v ScheduleValue) Equal(o attr.Value) bool {
	other, ok := o.(ScheduleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DayOfWeek.Equal(other.DayOfWeek) {
		return false
	}

	if !v.Duration.Equal(other.Duration) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.StartHour.Equal(other.StartHour) {
		return false
	}

	if !v.StartMinute.Equal(other.StartMinute) {
		return false
	}

	return true
}

func (v ScheduleValue) Type(ctx context.Context) attr.Type {
	return ScheduleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ScheduleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"day_of_week":  basetypes.StringType{},
		"duration":     basetypes.Int64Type{},
		"name":         basetypes.StringType{},
		"start_hour":   basetypes.Int64Type{},
		"start_minute": basetypes.Int64Type{},
	}
}
