// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_port_forwards

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func PortForwardsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"port_forwards": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"dst_port": schema.StringAttribute{
							Computed:            true,
							Description:         "The destination port for the Port Forward.",
							MarkdownDescription: "The destination port for the Port Forward.",
						},
						"enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Specifies whether the Port Forward rule is enabled or not.",
							MarkdownDescription: "Specifies whether the Port Forward rule is enabled or not.",
						},
						"fwd_ip": schema.StringAttribute{
							Computed:            true,
							Description:         "The IPv4 address to forward the traffic to.",
							MarkdownDescription: "The IPv4 address to forward the traffic to.",
						},
						"fwd_port": schema.StringAttribute{
							Computed:            true,
							Description:         "The port to forward traffic to.",
							MarkdownDescription: "The port to forward traffic to.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Port Forward to look up.",
							MarkdownDescription: "The ID of the Port Forward to look up.",
						},
						"log": schema.BoolAttribute{
							Computed:            true,
							Description:         "Specifies whether to log forwarded traffic or not.",
							MarkdownDescription: "Specifies whether to log forwarded traffic or not.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the Port Forward.",
							MarkdownDescription: "The name of the Port Forward.",
						},
						"port_forward_interface": schema.StringAttribute{
							Computed:            true,
							Description:         "The Port Forward interface. Can be `wan`, `wan2`, or `both`.",
							MarkdownDescription: "The Port Forward interface. Can be `wan`, `wan2`, or `both`.",
						},
						"protocol": schema.StringAttribute{
							Computed:            true,
							Description:         "The protocol for the Port Forward rule. Can be `tcp`, `udp`, or `tcp_udp`.",
							MarkdownDescription: "The protocol for the Port Forward rule. Can be `tcp`, `udp`, or `tcp_udp`.",
						},
						"src_ip": schema.StringAttribute{
							Computed:            true,
							Description:         "The source IPv4 address (or CIDR) of the Port Forward rule. For all traffic specify `any`.",
							MarkdownDescription: "The source IPv4 address (or CIDR) of the Port Forward rule. For all traffic specify `any`.",
						},
					},
					CustomType: PortForwardsType{
						ObjectType: types.ObjectType{
							AttrTypes: PortForwardsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of Port Forwards associated with the site.",
				MarkdownDescription: "The list of Port Forwards associated with the site.",
			},
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the Port Forwards are associated with.",
				MarkdownDescription: "The name of the site the Port Forwards are associated with.",
			},
		},
	}
}

type PortForwardsModel struct {
	PortForwards types.List   `tfsdk:"port_forwards"`
	Site         types.String `tfsdk:"site"`
}

var _ basetypes.ObjectTypable = PortForwardsType{}

type PortForwardsType struct {
	basetypes.ObjectType
}

func (t PortForwardsType) Equal(o attr.Type) bool {
	other, ok := o.(PortForwardsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PortForwardsType) String() string {
	return "PortForwardsType"
}

func (t PortForwardsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dstPortAttribute, ok := attributes["dst_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_port is missing from object`)

		return nil, diags
	}

	dstPortVal, ok := dstPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_port expected to be basetypes.StringValue, was: %T`, dstPortAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	fwdIpAttribute, ok := attributes["fwd_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fwd_ip is missing from object`)

		return nil, diags
	}

	fwdIpVal, ok := fwdIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fwd_ip expected to be basetypes.StringValue, was: %T`, fwdIpAttribute))
	}

	fwdPortAttribute, ok := attributes["fwd_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fwd_port is missing from object`)

		return nil, diags
	}

	fwdPortVal, ok := fwdPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fwd_port expected to be basetypes.StringValue, was: %T`, fwdPortAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	logAttribute, ok := attributes["log"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log is missing from object`)

		return nil, diags
	}

	logVal, ok := logAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log expected to be basetypes.BoolValue, was: %T`, logAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	portForwardInterfaceAttribute, ok := attributes["port_forward_interface"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_forward_interface is missing from object`)

		return nil, diags
	}

	portForwardInterfaceVal, ok := portForwardInterfaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_forward_interface expected to be basetypes.StringValue, was: %T`, portForwardInterfaceAttribute))
	}

	protocolAttribute, ok := attributes["protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol is missing from object`)

		return nil, diags
	}

	protocolVal, ok := protocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol expected to be basetypes.StringValue, was: %T`, protocolAttribute))
	}

	srcIpAttribute, ok := attributes["src_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_ip is missing from object`)

		return nil, diags
	}

	srcIpVal, ok := srcIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_ip expected to be basetypes.StringValue, was: %T`, srcIpAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PortForwardsValue{
		DstPort:              dstPortVal,
		Enabled:              enabledVal,
		FwdIp:                fwdIpVal,
		FwdPort:              fwdPortVal,
		Id:                   idVal,
		Log:                  logVal,
		Name:                 nameVal,
		PortForwardInterface: portForwardInterfaceVal,
		Protocol:             protocolVal,
		SrcIp:                srcIpVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewPortForwardsValueNull() PortForwardsValue {
	return PortForwardsValue{
		state: attr.ValueStateNull,
	}
}

func NewPortForwardsValueUnknown() PortForwardsValue {
	return PortForwardsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPortForwardsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PortForwardsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PortForwardsValue Attribute Value",
				"While creating a PortForwardsValue value, a missing attribute value was detected. "+
					"A PortForwardsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PortForwardsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PortForwardsValue Attribute Type",
				"While creating a PortForwardsValue value, an invalid attribute value was detected. "+
					"A PortForwardsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PortForwardsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PortForwardsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PortForwardsValue Attribute Value",
				"While creating a PortForwardsValue value, an extra attribute value was detected. "+
					"A PortForwardsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PortForwardsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPortForwardsValueUnknown(), diags
	}

	dstPortAttribute, ok := attributes["dst_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_port is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	dstPortVal, ok := dstPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_port expected to be basetypes.StringValue, was: %T`, dstPortAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	fwdIpAttribute, ok := attributes["fwd_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fwd_ip is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	fwdIpVal, ok := fwdIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fwd_ip expected to be basetypes.StringValue, was: %T`, fwdIpAttribute))
	}

	fwdPortAttribute, ok := attributes["fwd_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fwd_port is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	fwdPortVal, ok := fwdPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fwd_port expected to be basetypes.StringValue, was: %T`, fwdPortAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	logAttribute, ok := attributes["log"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	logVal, ok := logAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log expected to be basetypes.BoolValue, was: %T`, logAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	portForwardInterfaceAttribute, ok := attributes["port_forward_interface"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_forward_interface is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	portForwardInterfaceVal, ok := portForwardInterfaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_forward_interface expected to be basetypes.StringValue, was: %T`, portForwardInterfaceAttribute))
	}

	protocolAttribute, ok := attributes["protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	protocolVal, ok := protocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol expected to be basetypes.StringValue, was: %T`, protocolAttribute))
	}

	srcIpAttribute, ok := attributes["src_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_ip is missing from object`)

		return NewPortForwardsValueUnknown(), diags
	}

	srcIpVal, ok := srcIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_ip expected to be basetypes.StringValue, was: %T`, srcIpAttribute))
	}

	if diags.HasError() {
		return NewPortForwardsValueUnknown(), diags
	}

	return PortForwardsValue{
		DstPort:              dstPortVal,
		Enabled:              enabledVal,
		FwdIp:                fwdIpVal,
		FwdPort:              fwdPortVal,
		Id:                   idVal,
		Log:                  logVal,
		Name:                 nameVal,
		PortForwardInterface: portForwardInterfaceVal,
		Protocol:             protocolVal,
		SrcIp:                srcIpVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewPortForwardsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PortForwardsValue {
	object, diags := NewPortForwardsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPortForwardsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PortForwardsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPortForwardsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPortForwardsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPortForwardsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPortForwardsValueMust(PortForwardsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PortForwardsType) ValueType(ctx context.Context) attr.Value {
	return PortForwardsValue{}
}

var _ basetypes.ObjectValuable = PortForwardsValue{}

type PortForwardsValue struct {
	DstPort              basetypes.StringValue `tfsdk:"dst_port"`
	Enabled              basetypes.BoolValue   `tfsdk:"enabled"`
	FwdIp                basetypes.StringValue `tfsdk:"fwd_ip"`
	FwdPort              basetypes.StringValue `tfsdk:"fwd_port"`
	Id                   basetypes.StringValue `tfsdk:"id"`
	Log                  basetypes.BoolValue   `tfsdk:"log"`
	Name                 basetypes.StringValue `tfsdk:"name"`
	PortForwardInterface basetypes.StringValue `tfsdk:"port_forward_interface"`
	Protocol             basetypes.StringValue `tfsdk:"protocol"`
	SrcIp                basetypes.StringValue `tfsdk:"src_ip"`
	state                attr.ValueState
}

func (v PortForwardsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["dst_port"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["fwd_ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fwd_port"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["log"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["port_forward_interface"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_ip"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.DstPort.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_port"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.FwdIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fwd_ip"] = val

		val, err = v.FwdPort.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fwd_port"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Log.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["log"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PortForwardInterface.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_forward_interface"] = val

		val, err = v.Protocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["protocol"] = val

		val, err = v.SrcIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_ip"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PortForwardsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PortForwardsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PortForwardsValue) String() string {
	return "PortForwardsValue"
}

func (v PortForwardsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"dst_port":               basetypes.StringType{},
		"enabled":                basetypes.BoolType{},
		"fwd_ip":                 basetypes.StringType{},
		"fwd_port":               basetypes.StringType{},
		"id":                     basetypes.StringType{},
		"log":                    basetypes.BoolType{},
		"name":                   basetypes.StringType{},
		"port_forward_interface": basetypes.StringType{},
		"protocol":               basetypes.StringType{},
		"src_ip":                 basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"dst_port":               v.DstPort,
			"enabled":                v.Enabled,
			"fwd_ip":                 v.FwdIp,
			"fwd_port":               v.FwdPort,
			"id":                     v.Id,
			"log":                    v.Log,
			"name":                   v.Name,
			"port_forward_interface": v.PortForwardInterface,
			"protocol":               v.Protocol,
			"src_ip":                 v.SrcIp,
		})

	return objVal, diags
}

func (v PortForwardsValue) Equal(o attr.Value) bool {
	other, ok := o.(PortForwardsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DstPort.Equal(other.DstPort) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.FwdIp.Equal(other.FwdIp) {
		return false
	}

	if !v.FwdPort.Equal(other.FwdPort) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Log.Equal(other.Log) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PortForwardInterface.Equal(other.PortForwardInterface) {
		return false
	}

	if !v.Protocol.Equal(other.Protocol) {
		return false
	}

	if !v.SrcIp.Equal(other.SrcIp) {
		return false
	}

	return true
}

func (v PortForwardsValue) Type(ctx context.Context) attr.Type {
	return PortForwardsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PortForwardsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"dst_port":               basetypes.StringType{},
		"enabled":                basetypes.BoolType{},
		"fwd_ip":                 basetypes.StringType{},
		"fwd_port":               basetypes.StringType{},
		"id":                     basetypes.StringType{},
		"log":                    basetypes.BoolType{},
		"name":                   basetypes.StringType{},
		"port_forward_interface": basetypes.StringType{},
		"protocol":               basetypes.StringType{},
		"src_ip":                 basetypes.StringType{},
	}
}
