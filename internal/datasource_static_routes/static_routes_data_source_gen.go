// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_static_routes

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func StaticRoutesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the Static Routes are associated with.",
				MarkdownDescription: "The name of the site the Static Routes are associated with.",
			},
			"static_routes": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"distance": schema.Int64Attribute{
							Computed:            true,
							Description:         "The distance of the Static Route.",
							MarkdownDescription: "The distance of the Static Route.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Static Route to look up.",
							MarkdownDescription: "The ID of the Static Route to look up.",
						},
						"interface": schema.StringAttribute{
							Computed:            true,
							Description:         "The interface of the Static Route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.",
							MarkdownDescription: "The interface of the Static Route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the Static Route.",
							MarkdownDescription: "The name of the Static Route.",
						},
						"network": schema.StringAttribute{
							Computed:            true,
							Description:         "The network subnet address.",
							MarkdownDescription: "The network subnet address.",
						},
						"next_hop": schema.StringAttribute{
							Computed:            true,
							Description:         "The next hop of the Static Route (only valid for `nexthop-route` type).",
							MarkdownDescription: "The next hop of the Static Route (only valid for `nexthop-route` type).",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of Static Route. Can be `interface-route`, `nexthop-route`, or `blackhole`.",
							MarkdownDescription: "The type of Static Route. Can be `interface-route`, `nexthop-route`, or `blackhole`.",
						},
					},
					CustomType: StaticRoutesType{
						ObjectType: types.ObjectType{
							AttrTypes: StaticRoutesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of Static Routes associated with the site.",
				MarkdownDescription: "The list of Static Routes associated with the site.",
			},
		},
	}
}

type StaticRoutesModel struct {
	Site         types.String `tfsdk:"site"`
	StaticRoutes types.List   `tfsdk:"static_routes"`
}

var _ basetypes.ObjectTypable = StaticRoutesType{}

type StaticRoutesType struct {
	basetypes.ObjectType
}

func (t StaticRoutesType) Equal(o attr.Type) bool {
	other, ok := o.(StaticRoutesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StaticRoutesType) String() string {
	return "StaticRoutesType"
}

func (t StaticRoutesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	distanceAttribute, ok := attributes["distance"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`distance is missing from object`)

		return nil, diags
	}

	distanceVal, ok := distanceAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`distance expected to be basetypes.Int64Value, was: %T`, distanceAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	interfaceAttribute, ok := attributes["interface"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface is missing from object`)

		return nil, diags
	}

	interfaceVal, ok := interfaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface expected to be basetypes.StringValue, was: %T`, interfaceAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networkAttribute, ok := attributes["network"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network is missing from object`)

		return nil, diags
	}

	networkVal, ok := networkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network expected to be basetypes.StringValue, was: %T`, networkAttribute))
	}

	nextHopAttribute, ok := attributes["next_hop"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next_hop is missing from object`)

		return nil, diags
	}

	nextHopVal, ok := nextHopAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next_hop expected to be basetypes.StringValue, was: %T`, nextHopAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return StaticRoutesValue{
		Distance:         distanceVal,
		Id:               idVal,
		Interface:        interfaceVal,
		Name:             nameVal,
		Network:          networkVal,
		NextHop:          nextHopVal,
		StaticRoutesType: typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewStaticRoutesValueNull() StaticRoutesValue {
	return StaticRoutesValue{
		state: attr.ValueStateNull,
	}
}

func NewStaticRoutesValueUnknown() StaticRoutesValue {
	return StaticRoutesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStaticRoutesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StaticRoutesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StaticRoutesValue Attribute Value",
				"While creating a StaticRoutesValue value, a missing attribute value was detected. "+
					"A StaticRoutesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StaticRoutesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StaticRoutesValue Attribute Type",
				"While creating a StaticRoutesValue value, an invalid attribute value was detected. "+
					"A StaticRoutesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StaticRoutesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StaticRoutesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StaticRoutesValue Attribute Value",
				"While creating a StaticRoutesValue value, an extra attribute value was detected. "+
					"A StaticRoutesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StaticRoutesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStaticRoutesValueUnknown(), diags
	}

	distanceAttribute, ok := attributes["distance"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`distance is missing from object`)

		return NewStaticRoutesValueUnknown(), diags
	}

	distanceVal, ok := distanceAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`distance expected to be basetypes.Int64Value, was: %T`, distanceAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewStaticRoutesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	interfaceAttribute, ok := attributes["interface"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface is missing from object`)

		return NewStaticRoutesValueUnknown(), diags
	}

	interfaceVal, ok := interfaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface expected to be basetypes.StringValue, was: %T`, interfaceAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewStaticRoutesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networkAttribute, ok := attributes["network"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network is missing from object`)

		return NewStaticRoutesValueUnknown(), diags
	}

	networkVal, ok := networkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network expected to be basetypes.StringValue, was: %T`, networkAttribute))
	}

	nextHopAttribute, ok := attributes["next_hop"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`next_hop is missing from object`)

		return NewStaticRoutesValueUnknown(), diags
	}

	nextHopVal, ok := nextHopAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`next_hop expected to be basetypes.StringValue, was: %T`, nextHopAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewStaticRoutesValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewStaticRoutesValueUnknown(), diags
	}

	return StaticRoutesValue{
		Distance:         distanceVal,
		Id:               idVal,
		Interface:        interfaceVal,
		Name:             nameVal,
		Network:          networkVal,
		NextHop:          nextHopVal,
		StaticRoutesType: typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewStaticRoutesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StaticRoutesValue {
	object, diags := NewStaticRoutesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStaticRoutesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StaticRoutesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStaticRoutesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStaticRoutesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStaticRoutesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStaticRoutesValueMust(StaticRoutesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StaticRoutesType) ValueType(ctx context.Context) attr.Value {
	return StaticRoutesValue{}
}

var _ basetypes.ObjectValuable = StaticRoutesValue{}

type StaticRoutesValue struct {
	Distance         basetypes.Int64Value  `tfsdk:"distance"`
	Id               basetypes.StringValue `tfsdk:"id"`
	Interface        basetypes.StringValue `tfsdk:"interface"`
	Name             basetypes.StringValue `tfsdk:"name"`
	Network          basetypes.StringValue `tfsdk:"network"`
	NextHop          basetypes.StringValue `tfsdk:"next_hop"`
	StaticRoutesType basetypes.StringValue `tfsdk:"type"`
	state            attr.ValueState
}

func (v StaticRoutesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["distance"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["network"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["next_hop"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Distance.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["distance"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Interface.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Network.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network"] = val

		val, err = v.NextHop.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["next_hop"] = val

		val, err = v.StaticRoutesType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StaticRoutesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StaticRoutesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StaticRoutesValue) String() string {
	return "StaticRoutesValue"
}

func (v StaticRoutesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"distance":  basetypes.Int64Type{},
		"id":        basetypes.StringType{},
		"interface": basetypes.StringType{},
		"name":      basetypes.StringType{},
		"network":   basetypes.StringType{},
		"next_hop":  basetypes.StringType{},
		"type":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"distance":  v.Distance,
			"id":        v.Id,
			"interface": v.Interface,
			"name":      v.Name,
			"network":   v.Network,
			"next_hop":  v.NextHop,
			"type":      v.StaticRoutesType,
		})

	return objVal, diags
}

func (v StaticRoutesValue) Equal(o attr.Value) bool {
	other, ok := o.(StaticRoutesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Distance.Equal(other.Distance) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Interface.Equal(other.Interface) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Network.Equal(other.Network) {
		return false
	}

	if !v.NextHop.Equal(other.NextHop) {
		return false
	}

	if !v.StaticRoutesType.Equal(other.StaticRoutesType) {
		return false
	}

	return true
}

func (v StaticRoutesValue) Type(ctx context.Context) attr.Type {
	return StaticRoutesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StaticRoutesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"distance":  basetypes.Int64Type{},
		"id":        basetypes.StringType{},
		"interface": basetypes.StringType{},
		"name":      basetypes.StringType{},
		"network":   basetypes.StringType{},
		"next_hop":  basetypes.StringType{},
		"type":      basetypes.StringType{},
	}
}
