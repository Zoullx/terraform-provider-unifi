// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_users

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func UsersDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the Users are associated with.",
				MarkdownDescription: "The name of the site the Users are associated with.",
			},
			"users": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"blocked": schema.BoolAttribute{
							Computed:            true,
							Description:         "Specifies whether the User should be blocked from the network.",
							MarkdownDescription: "Specifies whether the User should be blocked from the network.",
						},
						"dev_id_override": schema.Int64Attribute{
							Computed:            true,
							Description:         "Override the device fingerprint.",
							MarkdownDescription: "Override the device fingerprint.",
						},
						"fixed_ip": schema.StringAttribute{
							Computed:            true,
							Description:         "Fixed IPv4 address set for the User.",
							MarkdownDescription: "Fixed IPv4 address set for the User.",
						},
						"hostname": schema.StringAttribute{
							Computed:            true,
							Description:         "The hostname of the User.",
							MarkdownDescription: "The hostname of the User.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the User to look up.",
							MarkdownDescription: "The ID of the User to look up.",
						},
						"ip": schema.StringAttribute{
							Computed:            true,
							Description:         "The IP address of the User.",
							MarkdownDescription: "The IP address of the User.",
						},
						"local_dns_record": schema.StringAttribute{
							Computed:            true,
							Description:         "The local DNS record for the User.",
							MarkdownDescription: "The local DNS record for the User.",
						},
						"mac": schema.StringAttribute{
							Computed:            true,
							Description:         "The MAC address of the User.",
							MarkdownDescription: "The MAC address of the User.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of this User.",
							MarkdownDescription: "The name of this User.",
						},
						"network_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The network ID for the User.",
							MarkdownDescription: "The network ID for the User.",
						},
						"note": schema.StringAttribute{
							Computed:            true,
							Description:         "A note with additional information for the User.",
							MarkdownDescription: "A note with additional information for the User.",
						},
						"user_group_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The user group ID for the User.",
							MarkdownDescription: "The user group ID for the User.",
						},
					},
					CustomType: UsersType{
						ObjectType: types.ObjectType{
							AttrTypes: UsersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of Users associated with the site.",
				MarkdownDescription: "The list of Users associated with the site.",
			},
		},
	}
}

type UsersModel struct {
	Site  types.String `tfsdk:"site"`
	Users types.List   `tfsdk:"users"`
}

var _ basetypes.ObjectTypable = UsersType{}

type UsersType struct {
	basetypes.ObjectType
}

func (t UsersType) Equal(o attr.Type) bool {
	other, ok := o.(UsersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UsersType) String() string {
	return "UsersType"
}

func (t UsersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	blockedAttribute, ok := attributes["blocked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`blocked is missing from object`)

		return nil, diags
	}

	blockedVal, ok := blockedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`blocked expected to be basetypes.BoolValue, was: %T`, blockedAttribute))
	}

	devIdOverrideAttribute, ok := attributes["dev_id_override"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dev_id_override is missing from object`)

		return nil, diags
	}

	devIdOverrideVal, ok := devIdOverrideAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dev_id_override expected to be basetypes.Int64Value, was: %T`, devIdOverrideAttribute))
	}

	fixedIpAttribute, ok := attributes["fixed_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fixed_ip is missing from object`)

		return nil, diags
	}

	fixedIpVal, ok := fixedIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fixed_ip expected to be basetypes.StringValue, was: %T`, fixedIpAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return nil, diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be basetypes.StringValue, was: %T`, ipAttribute))
	}

	localDnsRecordAttribute, ok := attributes["local_dns_record"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`local_dns_record is missing from object`)

		return nil, diags
	}

	localDnsRecordVal, ok := localDnsRecordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`local_dns_record expected to be basetypes.StringValue, was: %T`, localDnsRecordAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return nil, diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return nil, diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	noteAttribute, ok := attributes["note"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`note is missing from object`)

		return nil, diags
	}

	noteVal, ok := noteAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`note expected to be basetypes.StringValue, was: %T`, noteAttribute))
	}

	userGroupIdAttribute, ok := attributes["user_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_group_id is missing from object`)

		return nil, diags
	}

	userGroupIdVal, ok := userGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_group_id expected to be basetypes.StringValue, was: %T`, userGroupIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UsersValue{
		Blocked:        blockedVal,
		DevIdOverride:  devIdOverrideVal,
		FixedIp:        fixedIpVal,
		Hostname:       hostnameVal,
		Id:             idVal,
		Ip:             ipVal,
		LocalDnsRecord: localDnsRecordVal,
		Mac:            macVal,
		Name:           nameVal,
		NetworkId:      networkIdVal,
		Note:           noteVal,
		UserGroupId:    userGroupIdVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewUsersValueNull() UsersValue {
	return UsersValue{
		state: attr.ValueStateNull,
	}
}

func NewUsersValueUnknown() UsersValue {
	return UsersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUsersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UsersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UsersValue Attribute Value",
				"While creating a UsersValue value, a missing attribute value was detected. "+
					"A UsersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UsersValue Attribute Type",
				"While creating a UsersValue value, an invalid attribute value was detected. "+
					"A UsersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UsersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UsersValue Attribute Value",
				"While creating a UsersValue value, an extra attribute value was detected. "+
					"A UsersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UsersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	blockedAttribute, ok := attributes["blocked"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`blocked is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	blockedVal, ok := blockedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`blocked expected to be basetypes.BoolValue, was: %T`, blockedAttribute))
	}

	devIdOverrideAttribute, ok := attributes["dev_id_override"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dev_id_override is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	devIdOverrideVal, ok := devIdOverrideAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dev_id_override expected to be basetypes.Int64Value, was: %T`, devIdOverrideAttribute))
	}

	fixedIpAttribute, ok := attributes["fixed_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fixed_ip is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	fixedIpVal, ok := fixedIpAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fixed_ip expected to be basetypes.StringValue, was: %T`, fixedIpAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be basetypes.StringValue, was: %T`, ipAttribute))
	}

	localDnsRecordAttribute, ok := attributes["local_dns_record"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`local_dns_record is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	localDnsRecordVal, ok := localDnsRecordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`local_dns_record expected to be basetypes.StringValue, was: %T`, localDnsRecordAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	noteAttribute, ok := attributes["note"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`note is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	noteVal, ok := noteAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`note expected to be basetypes.StringValue, was: %T`, noteAttribute))
	}

	userGroupIdAttribute, ok := attributes["user_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_group_id is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	userGroupIdVal, ok := userGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_group_id expected to be basetypes.StringValue, was: %T`, userGroupIdAttribute))
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	return UsersValue{
		Blocked:        blockedVal,
		DevIdOverride:  devIdOverrideVal,
		FixedIp:        fixedIpVal,
		Hostname:       hostnameVal,
		Id:             idVal,
		Ip:             ipVal,
		LocalDnsRecord: localDnsRecordVal,
		Mac:            macVal,
		Name:           nameVal,
		NetworkId:      networkIdVal,
		Note:           noteVal,
		UserGroupId:    userGroupIdVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewUsersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UsersValue {
	object, diags := NewUsersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUsersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UsersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUsersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUsersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUsersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUsersValueMust(UsersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UsersType) ValueType(ctx context.Context) attr.Value {
	return UsersValue{}
}

var _ basetypes.ObjectValuable = UsersValue{}

type UsersValue struct {
	Blocked        basetypes.BoolValue   `tfsdk:"blocked"`
	DevIdOverride  basetypes.Int64Value  `tfsdk:"dev_id_override"`
	FixedIp        basetypes.StringValue `tfsdk:"fixed_ip"`
	Hostname       basetypes.StringValue `tfsdk:"hostname"`
	Id             basetypes.StringValue `tfsdk:"id"`
	Ip             basetypes.StringValue `tfsdk:"ip"`
	LocalDnsRecord basetypes.StringValue `tfsdk:"local_dns_record"`
	Mac            basetypes.StringValue `tfsdk:"mac"`
	Name           basetypes.StringValue `tfsdk:"name"`
	NetworkId      basetypes.StringValue `tfsdk:"network_id"`
	Note           basetypes.StringValue `tfsdk:"note"`
	UserGroupId    basetypes.StringValue `tfsdk:"user_group_id"`
	state          attr.ValueState
}

func (v UsersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["blocked"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["dev_id_override"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["fixed_ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hostname"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["local_dns_record"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["note"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user_group_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.Blocked.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["blocked"] = val

		val, err = v.DevIdOverride.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dev_id_override"] = val

		val, err = v.FixedIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fixed_ip"] = val

		val, err = v.Hostname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hostname"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		val, err = v.LocalDnsRecord.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["local_dns_record"] = val

		val, err = v.Mac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.NetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_id"] = val

		val, err = v.Note.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["note"] = val

		val, err = v.UserGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user_group_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UsersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UsersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UsersValue) String() string {
	return "UsersValue"
}

func (v UsersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"blocked":          basetypes.BoolType{},
		"dev_id_override":  basetypes.Int64Type{},
		"fixed_ip":         basetypes.StringType{},
		"hostname":         basetypes.StringType{},
		"id":               basetypes.StringType{},
		"ip":               basetypes.StringType{},
		"local_dns_record": basetypes.StringType{},
		"mac":              basetypes.StringType{},
		"name":             basetypes.StringType{},
		"network_id":       basetypes.StringType{},
		"note":             basetypes.StringType{},
		"user_group_id":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"blocked":          v.Blocked,
			"dev_id_override":  v.DevIdOverride,
			"fixed_ip":         v.FixedIp,
			"hostname":         v.Hostname,
			"id":               v.Id,
			"ip":               v.Ip,
			"local_dns_record": v.LocalDnsRecord,
			"mac":              v.Mac,
			"name":             v.Name,
			"network_id":       v.NetworkId,
			"note":             v.Note,
			"user_group_id":    v.UserGroupId,
		})

	return objVal, diags
}

func (v UsersValue) Equal(o attr.Value) bool {
	other, ok := o.(UsersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Blocked.Equal(other.Blocked) {
		return false
	}

	if !v.DevIdOverride.Equal(other.DevIdOverride) {
		return false
	}

	if !v.FixedIp.Equal(other.FixedIp) {
		return false
	}

	if !v.Hostname.Equal(other.Hostname) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	if !v.LocalDnsRecord.Equal(other.LocalDnsRecord) {
		return false
	}

	if !v.Mac.Equal(other.Mac) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.NetworkId.Equal(other.NetworkId) {
		return false
	}

	if !v.Note.Equal(other.Note) {
		return false
	}

	if !v.UserGroupId.Equal(other.UserGroupId) {
		return false
	}

	return true
}

func (v UsersValue) Type(ctx context.Context) attr.Type {
	return UsersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UsersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"blocked":          basetypes.BoolType{},
		"dev_id_override":  basetypes.Int64Type{},
		"fixed_ip":         basetypes.StringType{},
		"hostname":         basetypes.StringType{},
		"id":               basetypes.StringType{},
		"ip":               basetypes.StringType{},
		"local_dns_record": basetypes.StringType{},
		"mac":              basetypes.StringType{},
		"name":             basetypes.StringType{},
		"network_id":       basetypes.StringType{},
		"note":             basetypes.StringType{},
		"user_group_id":    basetypes.StringType{},
	}
}
