// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_setting_mgmt

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func SettingMgmtDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auto_upgrade": schema.BoolAttribute{
				Computed:            true,
				Description:         "Automatically upgrade device firmware.",
				MarkdownDescription: "Automatically upgrade device firmware.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Setting Management.",
				MarkdownDescription: "The ID of the Setting Management.",
			},
			"site": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the site the Setting Management is associated with.",
				MarkdownDescription: "The name of the site the Setting Management is associated with.",
			},
			"ssh_enabled": schema.BoolAttribute{
				Computed:            true,
				Description:         "Enable SSH authentication.",
				MarkdownDescription: "Enable SSH authentication.",
			},
			"ssh_keys": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"comment": schema.StringAttribute{
							Computed:            true,
							Description:         "Comment.",
							MarkdownDescription: "Comment.",
						},
						"key": schema.StringAttribute{
							Computed:            true,
							Description:         "Public SSH key.",
							MarkdownDescription: "Public SSH key.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the SSH key.",
							MarkdownDescription: "Name of the SSH key.",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "Type of the SSH key, e.g. ssh-rsa.",
							MarkdownDescription: "Type of the SSH key, e.g. ssh-rsa.",
						},
					},
					CustomType: SshKeysType{
						ObjectType: types.ObjectType{
							AttrTypes: SshKeysValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "SSH Keys.",
				MarkdownDescription: "SSH Keys.",
			},
		},
	}
}

type SettingMgmtModel struct {
	AutoUpgrade types.Bool   `tfsdk:"auto_upgrade"`
	Id          types.String `tfsdk:"id"`
	Site        types.String `tfsdk:"site"`
	SshEnabled  types.Bool   `tfsdk:"ssh_enabled"`
	SshKeys     types.List   `tfsdk:"ssh_keys"`
}

var _ basetypes.ObjectTypable = SshKeysType{}

type SshKeysType struct {
	basetypes.ObjectType
}

func (t SshKeysType) Equal(o attr.Type) bool {
	other, ok := o.(SshKeysType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SshKeysType) String() string {
	return "SshKeysType"
}

func (t SshKeysType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	commentAttribute, ok := attributes["comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment is missing from object`)

		return nil, diags
	}

	commentVal, ok := commentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment expected to be basetypes.StringValue, was: %T`, commentAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SshKeysValue{
		Comment:     commentVal,
		Key:         keyVal,
		Name:        nameVal,
		SshKeysType: typeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSshKeysValueNull() SshKeysValue {
	return SshKeysValue{
		state: attr.ValueStateNull,
	}
}

func NewSshKeysValueUnknown() SshKeysValue {
	return SshKeysValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSshKeysValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SshKeysValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SshKeysValue Attribute Value",
				"While creating a SshKeysValue value, a missing attribute value was detected. "+
					"A SshKeysValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SshKeysValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SshKeysValue Attribute Type",
				"While creating a SshKeysValue value, an invalid attribute value was detected. "+
					"A SshKeysValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SshKeysValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SshKeysValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SshKeysValue Attribute Value",
				"While creating a SshKeysValue value, an extra attribute value was detected. "+
					"A SshKeysValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SshKeysValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSshKeysValueUnknown(), diags
	}

	commentAttribute, ok := attributes["comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment is missing from object`)

		return NewSshKeysValueUnknown(), diags
	}

	commentVal, ok := commentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment expected to be basetypes.StringValue, was: %T`, commentAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewSshKeysValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewSshKeysValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewSshKeysValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewSshKeysValueUnknown(), diags
	}

	return SshKeysValue{
		Comment:     commentVal,
		Key:         keyVal,
		Name:        nameVal,
		SshKeysType: typeVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSshKeysValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SshKeysValue {
	object, diags := NewSshKeysValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSshKeysValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SshKeysType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSshKeysValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSshKeysValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSshKeysValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSshKeysValueMust(SshKeysValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SshKeysType) ValueType(ctx context.Context) attr.Value {
	return SshKeysValue{}
}

var _ basetypes.ObjectValuable = SshKeysValue{}

type SshKeysValue struct {
	Comment     basetypes.StringValue `tfsdk:"comment"`
	Key         basetypes.StringValue `tfsdk:"key"`
	Name        basetypes.StringValue `tfsdk:"name"`
	SshKeysType basetypes.StringValue `tfsdk:"type"`
	state       attr.ValueState
}

func (v SshKeysValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["comment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Comment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["comment"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.SshKeysType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SshKeysValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SshKeysValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SshKeysValue) String() string {
	return "SshKeysValue"
}

func (v SshKeysValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"comment": basetypes.StringType{},
		"key":     basetypes.StringType{},
		"name":    basetypes.StringType{},
		"type":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"comment": v.Comment,
			"key":     v.Key,
			"name":    v.Name,
			"type":    v.SshKeysType,
		})

	return objVal, diags
}

func (v SshKeysValue) Equal(o attr.Value) bool {
	other, ok := o.(SshKeysValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Comment.Equal(other.Comment) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.SshKeysType.Equal(other.SshKeysType) {
		return false
	}

	return true
}

func (v SshKeysValue) Type(ctx context.Context) attr.Type {
	return SshKeysType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SshKeysValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"comment": basetypes.StringType{},
		"key":     basetypes.StringType{},
		"name":    basetypes.StringType{},
		"type":    basetypes.StringType{},
	}
}
