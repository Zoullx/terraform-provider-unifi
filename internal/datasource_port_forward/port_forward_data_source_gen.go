// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_port_forward

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func PortForwardDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"dst_port": schema.StringAttribute{
				Computed:            true,
				Description:         "The destination port for the Port Forward.",
				MarkdownDescription: "The destination port for the Port Forward.",
			},
			"enabled": schema.BoolAttribute{
				Computed:            true,
				Description:         "Specifies whether the Port Forward rule is enabled or not.",
				MarkdownDescription: "Specifies whether the Port Forward rule is enabled or not.",
			},
			"fwd_ip": schema.StringAttribute{
				Computed:            true,
				Description:         "The IPv4 address to forward the traffic to.",
				MarkdownDescription: "The IPv4 address to forward the traffic to.",
			},
			"fwd_port": schema.StringAttribute{
				Computed:            true,
				Description:         "The port to forward traffic to.",
				MarkdownDescription: "The port to forward traffic to.",
			},
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The ID of the Port Forward to look up.",
				MarkdownDescription: "The ID of the Port Forward to look up.",
			},
			"log": schema.BoolAttribute{
				Computed:            true,
				Description:         "Specifies whether to log forwarded traffic or not.",
				MarkdownDescription: "Specifies whether to log forwarded traffic or not.",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the Port Forward.",
				MarkdownDescription: "The name of the Port Forward.",
			},
			"port_forward_interface": schema.StringAttribute{
				Computed:            true,
				Description:         "The Port Forward interface. Can be `wan`, `wan2`, or `both`.",
				MarkdownDescription: "The Port Forward interface. Can be `wan`, `wan2`, or `both`.",
			},
			"protocol": schema.StringAttribute{
				Computed:            true,
				Description:         "The protocol for the Port Forward rule. Can be `tcp`, `udp`, or `tcp_udp`.",
				MarkdownDescription: "The protocol for the Port Forward rule. Can be `tcp`, `udp`, or `tcp_udp`.",
			},
			"site": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the site the Port Forward is associated with.",
				MarkdownDescription: "The name of the site the Port Forward is associated with.",
			},
			"site_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The id of the site the Port Forward is associated with.",
				MarkdownDescription: "The id of the site the Port Forward is associated with.",
			},
			"src_ip": schema.StringAttribute{
				Computed:            true,
				Description:         "The source IPv4 address (or CIDR) of the Port Forward rule. For all traffic specify `any`.",
				MarkdownDescription: "The source IPv4 address (or CIDR) of the Port Forward rule. For all traffic specify `any`.",
			},
		},
	}
}

type PortForwardModel struct {
	DstPort              types.String `tfsdk:"dst_port"`
	Enabled              types.Bool   `tfsdk:"enabled"`
	FwdIp                types.String `tfsdk:"fwd_ip"`
	FwdPort              types.String `tfsdk:"fwd_port"`
	Id                   types.String `tfsdk:"id"`
	Log                  types.Bool   `tfsdk:"log"`
	Name                 types.String `tfsdk:"name"`
	PortForwardInterface types.String `tfsdk:"port_forward_interface"`
	Protocol             types.String `tfsdk:"protocol"`
	Site                 types.String `tfsdk:"site"`
	SiteId               types.String `tfsdk:"site_id"`
	SrcIp                types.String `tfsdk:"src_ip"`
}
