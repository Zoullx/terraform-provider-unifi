// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_firewall_rules

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func FirewallRulesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"firewall_rules": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"action": schema.StringAttribute{
							Computed:            true,
							Description:         "The action of the Firewall Rule. Must be one of `drop`, `accept`, or `reject`.",
							MarkdownDescription: "The action of the Firewall Rule. Must be one of `drop`, `accept`, or `reject`.",
						},
						"dst_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The destination address of the Firewall Rule.",
							MarkdownDescription: "The destination address of the Firewall Rule.",
						},
						"dst_address_ipv6": schema.StringAttribute{
							Computed:            true,
							Description:         "The IPv6 destination address of the Firewall Rule.",
							MarkdownDescription: "The IPv6 destination address of the Firewall Rule.",
						},
						"dst_firewall_group_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The destination Firewall Group IDs of the Firewall Rule.",
							MarkdownDescription: "The destination Firewall Group IDs of the Firewall Rule.",
						},
						"dst_network_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The destination network ID of the Firewall Rule.",
							MarkdownDescription: "The destination network ID of the Firewall Rule.",
						},
						"dst_network_type": schema.StringAttribute{
							Computed:            true,
							Description:         "The destination network type of the Firewall Rule. Can be one of `ADDRv4` or `NETv4`.",
							MarkdownDescription: "The destination network type of the Firewall Rule. Can be one of `ADDRv4` or `NETv4`.",
						},
						"dst_port": schema.StringAttribute{
							Computed:            true,
							Description:         "The destination port for the Firewall Rule.",
							MarkdownDescription: "The destination port for the Firewall Rule.",
						},
						"enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Specifies whether the Firewall Rule should be enabled.",
							MarkdownDescription: "Specifies whether the Firewall Rule should be enabled.",
						},
						"icmp_typename": schema.StringAttribute{
							Computed:            true,
							Description:         "ICMP type name.",
							MarkdownDescription: "ICMP type name.",
						},
						"icmp_v6_typename": schema.StringAttribute{
							Computed:            true,
							Description:         "ICMPv6 type name.",
							MarkdownDescription: "ICMPv6 type name.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Firewall Rule.",
							MarkdownDescription: "The ID of the Firewall Rule.",
						},
						"ip_sec": schema.StringAttribute{
							Computed:            true,
							Description:         "Specify whether the Firewall Rule matches on IPSec packets. Can be one of `match-ipset` or `match-none`.",
							MarkdownDescription: "Specify whether the Firewall Rule matches on IPSec packets. Can be one of `match-ipset` or `match-none`.",
						},
						"logging": schema.BoolAttribute{
							Computed:            true,
							Description:         "Enable logging for the Firewall Rule.",
							MarkdownDescription: "Enable logging for the Firewall Rule.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the Firewall Rule.",
							MarkdownDescription: "The name of the Firewall Rule.",
						},
						"protocol": schema.StringAttribute{
							Computed:            true,
							Description:         "The protocol of the Firewall Rule.",
							MarkdownDescription: "The protocol of the Firewall Rule.",
						},
						"protocol_match_excepted": schema.BoolAttribute{
							Computed:            true,
							Description:         "TODO: Figure out what this is.",
							MarkdownDescription: "TODO: Figure out what this is.",
						},
						"protocol_v6": schema.StringAttribute{
							Computed:            true,
							Description:         "The IPv6 protocol of the Firewall Rule.",
							MarkdownDescription: "The IPv6 protocol of the Firewall Rule.",
						},
						"rule_index": schema.Int64Attribute{
							Computed:            true,
							Description:         "The index of the Firewall Rule. Must be >= 20000 < 30000 or >= 40000 < 50000.",
							MarkdownDescription: "The index of the Firewall Rule. Must be >= 20000 < 30000 or >= 40000 < 50000.",
						},
						"ruleset": schema.StringAttribute{
							Computed:            true,
							Description:         "The ruleset for the Firewall Rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.",
							MarkdownDescription: "The ruleset for the Firewall Rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.",
						},
						"setting_preference": schema.StringAttribute{
							Computed:            true,
							Description:         "Specifies the setting preference for the Firewall Rule. Valid values are: `auto` and `manual`.",
							MarkdownDescription: "Specifies the setting preference for the Firewall Rule. Valid values are: `auto` and `manual`.",
						},
						"site_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the site the Firewall Rule is associated with.",
							MarkdownDescription: "The ID of the site the Firewall Rule is associated with.",
						},
						"src_address": schema.StringAttribute{
							Computed:            true,
							Description:         "The source address for the Firewall Rule.",
							MarkdownDescription: "The source address for the Firewall Rule.",
						},
						"src_address_ipv6": schema.StringAttribute{
							Computed:            true,
							Description:         "The IPv6 source address for the Firewall Rule.",
							MarkdownDescription: "The IPv6 source address for the Firewall Rule.",
						},
						"src_firewall_group_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The source Firewall Group IDs for the Firewall Rule.",
							MarkdownDescription: "The source Firewall Group IDs for the Firewall Rule.",
						},
						"src_mac": schema.StringAttribute{
							Computed:            true,
							Description:         "The source MAC address of the Firewall Rule.",
							MarkdownDescription: "The source MAC address of the Firewall Rule.",
						},
						"src_network_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The source network ID for the Firewall Rule.",
							MarkdownDescription: "The source network ID for the Firewall Rule.",
						},
						"src_network_type": schema.StringAttribute{
							Computed:            true,
							Description:         "The source network type of the Firewall Rule. Can be one of `ADDRv4` or `NETv4`.",
							MarkdownDescription: "The source network type of the Firewall Rule. Can be one of `ADDRv4` or `NETv4`.",
						},
						"src_port": schema.StringAttribute{
							Computed:            true,
							Description:         "The source port of the Firewall Rule.",
							MarkdownDescription: "The source port of the Firewall Rule.",
						},
						"state_established": schema.BoolAttribute{
							Computed:            true,
							Description:         "Match where the state is established.",
							MarkdownDescription: "Match where the state is established.",
						},
						"state_invalid": schema.BoolAttribute{
							Computed:            true,
							Description:         "Match where the state is invalid.",
							MarkdownDescription: "Match where the state is invalid.",
						},
						"state_new": schema.BoolAttribute{
							Computed:            true,
							Description:         "Match where the state is new.",
							MarkdownDescription: "Match where the state is new.",
						},
						"state_related": schema.BoolAttribute{
							Computed:            true,
							Description:         "Match where the state is related.",
							MarkdownDescription: "Match where the state is related.",
						},
					},
					CustomType: FirewallRulesType{
						ObjectType: types.ObjectType{
							AttrTypes: FirewallRulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of Firewall Rules associated with the site.",
				MarkdownDescription: "The list of Firewall Rules associated with the site.",
			},
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the Firewall Rules are associated with.",
				MarkdownDescription: "The name of the site the Firewall Rules are associated with.",
			},
		},
	}
}

type FirewallRulesModel struct {
	FirewallRules types.List   `tfsdk:"firewall_rules"`
	Site          types.String `tfsdk:"site"`
}

var _ basetypes.ObjectTypable = FirewallRulesType{}

type FirewallRulesType struct {
	basetypes.ObjectType
}

func (t FirewallRulesType) Equal(o attr.Type) bool {
	other, ok := o.(FirewallRulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FirewallRulesType) String() string {
	return "FirewallRulesType"
}

func (t FirewallRulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return nil, diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	dstAddressAttribute, ok := attributes["dst_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_address is missing from object`)

		return nil, diags
	}

	dstAddressVal, ok := dstAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_address expected to be basetypes.StringValue, was: %T`, dstAddressAttribute))
	}

	dstAddressIpv6Attribute, ok := attributes["dst_address_ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_address_ipv6 is missing from object`)

		return nil, diags
	}

	dstAddressIpv6Val, ok := dstAddressIpv6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_address_ipv6 expected to be basetypes.StringValue, was: %T`, dstAddressIpv6Attribute))
	}

	dstFirewallGroupIdsAttribute, ok := attributes["dst_firewall_group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_firewall_group_ids is missing from object`)

		return nil, diags
	}

	dstFirewallGroupIdsVal, ok := dstFirewallGroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_firewall_group_ids expected to be basetypes.ListValue, was: %T`, dstFirewallGroupIdsAttribute))
	}

	dstNetworkIdAttribute, ok := attributes["dst_network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_network_id is missing from object`)

		return nil, diags
	}

	dstNetworkIdVal, ok := dstNetworkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_network_id expected to be basetypes.StringValue, was: %T`, dstNetworkIdAttribute))
	}

	dstNetworkTypeAttribute, ok := attributes["dst_network_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_network_type is missing from object`)

		return nil, diags
	}

	dstNetworkTypeVal, ok := dstNetworkTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_network_type expected to be basetypes.StringValue, was: %T`, dstNetworkTypeAttribute))
	}

	dstPortAttribute, ok := attributes["dst_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_port is missing from object`)

		return nil, diags
	}

	dstPortVal, ok := dstPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_port expected to be basetypes.StringValue, was: %T`, dstPortAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	icmpTypenameAttribute, ok := attributes["icmp_typename"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`icmp_typename is missing from object`)

		return nil, diags
	}

	icmpTypenameVal, ok := icmpTypenameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`icmp_typename expected to be basetypes.StringValue, was: %T`, icmpTypenameAttribute))
	}

	icmpV6TypenameAttribute, ok := attributes["icmp_v6_typename"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`icmp_v6_typename is missing from object`)

		return nil, diags
	}

	icmpV6TypenameVal, ok := icmpV6TypenameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`icmp_v6_typename expected to be basetypes.StringValue, was: %T`, icmpV6TypenameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	ipSecAttribute, ok := attributes["ip_sec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_sec is missing from object`)

		return nil, diags
	}

	ipSecVal, ok := ipSecAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_sec expected to be basetypes.StringValue, was: %T`, ipSecAttribute))
	}

	loggingAttribute, ok := attributes["logging"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logging is missing from object`)

		return nil, diags
	}

	loggingVal, ok := loggingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logging expected to be basetypes.BoolValue, was: %T`, loggingAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	protocolAttribute, ok := attributes["protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol is missing from object`)

		return nil, diags
	}

	protocolVal, ok := protocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol expected to be basetypes.StringValue, was: %T`, protocolAttribute))
	}

	protocolMatchExceptedAttribute, ok := attributes["protocol_match_excepted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol_match_excepted is missing from object`)

		return nil, diags
	}

	protocolMatchExceptedVal, ok := protocolMatchExceptedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol_match_excepted expected to be basetypes.BoolValue, was: %T`, protocolMatchExceptedAttribute))
	}

	protocolV6Attribute, ok := attributes["protocol_v6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol_v6 is missing from object`)

		return nil, diags
	}

	protocolV6Val, ok := protocolV6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol_v6 expected to be basetypes.StringValue, was: %T`, protocolV6Attribute))
	}

	ruleIndexAttribute, ok := attributes["rule_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rule_index is missing from object`)

		return nil, diags
	}

	ruleIndexVal, ok := ruleIndexAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rule_index expected to be basetypes.Int64Value, was: %T`, ruleIndexAttribute))
	}

	rulesetAttribute, ok := attributes["ruleset"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ruleset is missing from object`)

		return nil, diags
	}

	rulesetVal, ok := rulesetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ruleset expected to be basetypes.StringValue, was: %T`, rulesetAttribute))
	}

	settingPreferenceAttribute, ok := attributes["setting_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`setting_preference is missing from object`)

		return nil, diags
	}

	settingPreferenceVal, ok := settingPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`setting_preference expected to be basetypes.StringValue, was: %T`, settingPreferenceAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return nil, diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	srcAddressAttribute, ok := attributes["src_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_address is missing from object`)

		return nil, diags
	}

	srcAddressVal, ok := srcAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_address expected to be basetypes.StringValue, was: %T`, srcAddressAttribute))
	}

	srcAddressIpv6Attribute, ok := attributes["src_address_ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_address_ipv6 is missing from object`)

		return nil, diags
	}

	srcAddressIpv6Val, ok := srcAddressIpv6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_address_ipv6 expected to be basetypes.StringValue, was: %T`, srcAddressIpv6Attribute))
	}

	srcFirewallGroupIdsAttribute, ok := attributes["src_firewall_group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_firewall_group_ids is missing from object`)

		return nil, diags
	}

	srcFirewallGroupIdsVal, ok := srcFirewallGroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_firewall_group_ids expected to be basetypes.ListValue, was: %T`, srcFirewallGroupIdsAttribute))
	}

	srcMacAttribute, ok := attributes["src_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_mac is missing from object`)

		return nil, diags
	}

	srcMacVal, ok := srcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_mac expected to be basetypes.StringValue, was: %T`, srcMacAttribute))
	}

	srcNetworkIdAttribute, ok := attributes["src_network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_network_id is missing from object`)

		return nil, diags
	}

	srcNetworkIdVal, ok := srcNetworkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_network_id expected to be basetypes.StringValue, was: %T`, srcNetworkIdAttribute))
	}

	srcNetworkTypeAttribute, ok := attributes["src_network_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_network_type is missing from object`)

		return nil, diags
	}

	srcNetworkTypeVal, ok := srcNetworkTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_network_type expected to be basetypes.StringValue, was: %T`, srcNetworkTypeAttribute))
	}

	srcPortAttribute, ok := attributes["src_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_port is missing from object`)

		return nil, diags
	}

	srcPortVal, ok := srcPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_port expected to be basetypes.StringValue, was: %T`, srcPortAttribute))
	}

	stateEstablishedAttribute, ok := attributes["state_established"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_established is missing from object`)

		return nil, diags
	}

	stateEstablishedVal, ok := stateEstablishedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_established expected to be basetypes.BoolValue, was: %T`, stateEstablishedAttribute))
	}

	stateInvalidAttribute, ok := attributes["state_invalid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_invalid is missing from object`)

		return nil, diags
	}

	stateInvalidVal, ok := stateInvalidAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_invalid expected to be basetypes.BoolValue, was: %T`, stateInvalidAttribute))
	}

	stateNewAttribute, ok := attributes["state_new"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_new is missing from object`)

		return nil, diags
	}

	stateNewVal, ok := stateNewAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_new expected to be basetypes.BoolValue, was: %T`, stateNewAttribute))
	}

	stateRelatedAttribute, ok := attributes["state_related"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_related is missing from object`)

		return nil, diags
	}

	stateRelatedVal, ok := stateRelatedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_related expected to be basetypes.BoolValue, was: %T`, stateRelatedAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FirewallRulesValue{
		Action:                actionVal,
		DstAddress:            dstAddressVal,
		DstAddressIpv6:        dstAddressIpv6Val,
		DstFirewallGroupIds:   dstFirewallGroupIdsVal,
		DstNetworkId:          dstNetworkIdVal,
		DstNetworkType:        dstNetworkTypeVal,
		DstPort:               dstPortVal,
		Enabled:               enabledVal,
		IcmpTypename:          icmpTypenameVal,
		IcmpV6Typename:        icmpV6TypenameVal,
		Id:                    idVal,
		IpSec:                 ipSecVal,
		Logging:               loggingVal,
		Name:                  nameVal,
		Protocol:              protocolVal,
		ProtocolMatchExcepted: protocolMatchExceptedVal,
		ProtocolV6:            protocolV6Val,
		RuleIndex:             ruleIndexVal,
		Ruleset:               rulesetVal,
		SettingPreference:     settingPreferenceVal,
		SiteId:                siteIdVal,
		SrcAddress:            srcAddressVal,
		SrcAddressIpv6:        srcAddressIpv6Val,
		SrcFirewallGroupIds:   srcFirewallGroupIdsVal,
		SrcMac:                srcMacVal,
		SrcNetworkId:          srcNetworkIdVal,
		SrcNetworkType:        srcNetworkTypeVal,
		SrcPort:               srcPortVal,
		StateEstablished:      stateEstablishedVal,
		StateInvalid:          stateInvalidVal,
		StateNew:              stateNewVal,
		StateRelated:          stateRelatedVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewFirewallRulesValueNull() FirewallRulesValue {
	return FirewallRulesValue{
		state: attr.ValueStateNull,
	}
}

func NewFirewallRulesValueUnknown() FirewallRulesValue {
	return FirewallRulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFirewallRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FirewallRulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FirewallRulesValue Attribute Value",
				"While creating a FirewallRulesValue value, a missing attribute value was detected. "+
					"A FirewallRulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FirewallRulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FirewallRulesValue Attribute Type",
				"While creating a FirewallRulesValue value, an invalid attribute value was detected. "+
					"A FirewallRulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FirewallRulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FirewallRulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FirewallRulesValue Attribute Value",
				"While creating a FirewallRulesValue value, an extra attribute value was detected. "+
					"A FirewallRulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FirewallRulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFirewallRulesValueUnknown(), diags
	}

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	dstAddressAttribute, ok := attributes["dst_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_address is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	dstAddressVal, ok := dstAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_address expected to be basetypes.StringValue, was: %T`, dstAddressAttribute))
	}

	dstAddressIpv6Attribute, ok := attributes["dst_address_ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_address_ipv6 is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	dstAddressIpv6Val, ok := dstAddressIpv6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_address_ipv6 expected to be basetypes.StringValue, was: %T`, dstAddressIpv6Attribute))
	}

	dstFirewallGroupIdsAttribute, ok := attributes["dst_firewall_group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_firewall_group_ids is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	dstFirewallGroupIdsVal, ok := dstFirewallGroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_firewall_group_ids expected to be basetypes.ListValue, was: %T`, dstFirewallGroupIdsAttribute))
	}

	dstNetworkIdAttribute, ok := attributes["dst_network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_network_id is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	dstNetworkIdVal, ok := dstNetworkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_network_id expected to be basetypes.StringValue, was: %T`, dstNetworkIdAttribute))
	}

	dstNetworkTypeAttribute, ok := attributes["dst_network_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_network_type is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	dstNetworkTypeVal, ok := dstNetworkTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_network_type expected to be basetypes.StringValue, was: %T`, dstNetworkTypeAttribute))
	}

	dstPortAttribute, ok := attributes["dst_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_port is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	dstPortVal, ok := dstPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_port expected to be basetypes.StringValue, was: %T`, dstPortAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	icmpTypenameAttribute, ok := attributes["icmp_typename"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`icmp_typename is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	icmpTypenameVal, ok := icmpTypenameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`icmp_typename expected to be basetypes.StringValue, was: %T`, icmpTypenameAttribute))
	}

	icmpV6TypenameAttribute, ok := attributes["icmp_v6_typename"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`icmp_v6_typename is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	icmpV6TypenameVal, ok := icmpV6TypenameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`icmp_v6_typename expected to be basetypes.StringValue, was: %T`, icmpV6TypenameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	ipSecAttribute, ok := attributes["ip_sec"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_sec is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	ipSecVal, ok := ipSecAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_sec expected to be basetypes.StringValue, was: %T`, ipSecAttribute))
	}

	loggingAttribute, ok := attributes["logging"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`logging is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	loggingVal, ok := loggingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`logging expected to be basetypes.BoolValue, was: %T`, loggingAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	protocolAttribute, ok := attributes["protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	protocolVal, ok := protocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol expected to be basetypes.StringValue, was: %T`, protocolAttribute))
	}

	protocolMatchExceptedAttribute, ok := attributes["protocol_match_excepted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol_match_excepted is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	protocolMatchExceptedVal, ok := protocolMatchExceptedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol_match_excepted expected to be basetypes.BoolValue, was: %T`, protocolMatchExceptedAttribute))
	}

	protocolV6Attribute, ok := attributes["protocol_v6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol_v6 is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	protocolV6Val, ok := protocolV6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol_v6 expected to be basetypes.StringValue, was: %T`, protocolV6Attribute))
	}

	ruleIndexAttribute, ok := attributes["rule_index"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rule_index is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	ruleIndexVal, ok := ruleIndexAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rule_index expected to be basetypes.Int64Value, was: %T`, ruleIndexAttribute))
	}

	rulesetAttribute, ok := attributes["ruleset"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ruleset is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	rulesetVal, ok := rulesetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ruleset expected to be basetypes.StringValue, was: %T`, rulesetAttribute))
	}

	settingPreferenceAttribute, ok := attributes["setting_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`setting_preference is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	settingPreferenceVal, ok := settingPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`setting_preference expected to be basetypes.StringValue, was: %T`, settingPreferenceAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	srcAddressAttribute, ok := attributes["src_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_address is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	srcAddressVal, ok := srcAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_address expected to be basetypes.StringValue, was: %T`, srcAddressAttribute))
	}

	srcAddressIpv6Attribute, ok := attributes["src_address_ipv6"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_address_ipv6 is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	srcAddressIpv6Val, ok := srcAddressIpv6Attribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_address_ipv6 expected to be basetypes.StringValue, was: %T`, srcAddressIpv6Attribute))
	}

	srcFirewallGroupIdsAttribute, ok := attributes["src_firewall_group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_firewall_group_ids is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	srcFirewallGroupIdsVal, ok := srcFirewallGroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_firewall_group_ids expected to be basetypes.ListValue, was: %T`, srcFirewallGroupIdsAttribute))
	}

	srcMacAttribute, ok := attributes["src_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_mac is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	srcMacVal, ok := srcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_mac expected to be basetypes.StringValue, was: %T`, srcMacAttribute))
	}

	srcNetworkIdAttribute, ok := attributes["src_network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_network_id is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	srcNetworkIdVal, ok := srcNetworkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_network_id expected to be basetypes.StringValue, was: %T`, srcNetworkIdAttribute))
	}

	srcNetworkTypeAttribute, ok := attributes["src_network_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_network_type is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	srcNetworkTypeVal, ok := srcNetworkTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_network_type expected to be basetypes.StringValue, was: %T`, srcNetworkTypeAttribute))
	}

	srcPortAttribute, ok := attributes["src_port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src_port is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	srcPortVal, ok := srcPortAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src_port expected to be basetypes.StringValue, was: %T`, srcPortAttribute))
	}

	stateEstablishedAttribute, ok := attributes["state_established"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_established is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	stateEstablishedVal, ok := stateEstablishedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_established expected to be basetypes.BoolValue, was: %T`, stateEstablishedAttribute))
	}

	stateInvalidAttribute, ok := attributes["state_invalid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_invalid is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	stateInvalidVal, ok := stateInvalidAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_invalid expected to be basetypes.BoolValue, was: %T`, stateInvalidAttribute))
	}

	stateNewAttribute, ok := attributes["state_new"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_new is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	stateNewVal, ok := stateNewAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_new expected to be basetypes.BoolValue, was: %T`, stateNewAttribute))
	}

	stateRelatedAttribute, ok := attributes["state_related"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state_related is missing from object`)

		return NewFirewallRulesValueUnknown(), diags
	}

	stateRelatedVal, ok := stateRelatedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state_related expected to be basetypes.BoolValue, was: %T`, stateRelatedAttribute))
	}

	if diags.HasError() {
		return NewFirewallRulesValueUnknown(), diags
	}

	return FirewallRulesValue{
		Action:                actionVal,
		DstAddress:            dstAddressVal,
		DstAddressIpv6:        dstAddressIpv6Val,
		DstFirewallGroupIds:   dstFirewallGroupIdsVal,
		DstNetworkId:          dstNetworkIdVal,
		DstNetworkType:        dstNetworkTypeVal,
		DstPort:               dstPortVal,
		Enabled:               enabledVal,
		IcmpTypename:          icmpTypenameVal,
		IcmpV6Typename:        icmpV6TypenameVal,
		Id:                    idVal,
		IpSec:                 ipSecVal,
		Logging:               loggingVal,
		Name:                  nameVal,
		Protocol:              protocolVal,
		ProtocolMatchExcepted: protocolMatchExceptedVal,
		ProtocolV6:            protocolV6Val,
		RuleIndex:             ruleIndexVal,
		Ruleset:               rulesetVal,
		SettingPreference:     settingPreferenceVal,
		SiteId:                siteIdVal,
		SrcAddress:            srcAddressVal,
		SrcAddressIpv6:        srcAddressIpv6Val,
		SrcFirewallGroupIds:   srcFirewallGroupIdsVal,
		SrcMac:                srcMacVal,
		SrcNetworkId:          srcNetworkIdVal,
		SrcNetworkType:        srcNetworkTypeVal,
		SrcPort:               srcPortVal,
		StateEstablished:      stateEstablishedVal,
		StateInvalid:          stateInvalidVal,
		StateNew:              stateNewVal,
		StateRelated:          stateRelatedVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewFirewallRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FirewallRulesValue {
	object, diags := NewFirewallRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFirewallRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FirewallRulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFirewallRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFirewallRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFirewallRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFirewallRulesValueMust(FirewallRulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FirewallRulesType) ValueType(ctx context.Context) attr.Value {
	return FirewallRulesValue{}
}

var _ basetypes.ObjectValuable = FirewallRulesValue{}

type FirewallRulesValue struct {
	Action                basetypes.StringValue `tfsdk:"action"`
	DstAddress            basetypes.StringValue `tfsdk:"dst_address"`
	DstAddressIpv6        basetypes.StringValue `tfsdk:"dst_address_ipv6"`
	DstFirewallGroupIds   basetypes.ListValue   `tfsdk:"dst_firewall_group_ids"`
	DstNetworkId          basetypes.StringValue `tfsdk:"dst_network_id"`
	DstNetworkType        basetypes.StringValue `tfsdk:"dst_network_type"`
	DstPort               basetypes.StringValue `tfsdk:"dst_port"`
	Enabled               basetypes.BoolValue   `tfsdk:"enabled"`
	IcmpTypename          basetypes.StringValue `tfsdk:"icmp_typename"`
	IcmpV6Typename        basetypes.StringValue `tfsdk:"icmp_v6_typename"`
	Id                    basetypes.StringValue `tfsdk:"id"`
	IpSec                 basetypes.StringValue `tfsdk:"ip_sec"`
	Logging               basetypes.BoolValue   `tfsdk:"logging"`
	Name                  basetypes.StringValue `tfsdk:"name"`
	Protocol              basetypes.StringValue `tfsdk:"protocol"`
	ProtocolMatchExcepted basetypes.BoolValue   `tfsdk:"protocol_match_excepted"`
	ProtocolV6            basetypes.StringValue `tfsdk:"protocol_v6"`
	RuleIndex             basetypes.Int64Value  `tfsdk:"rule_index"`
	Ruleset               basetypes.StringValue `tfsdk:"ruleset"`
	SettingPreference     basetypes.StringValue `tfsdk:"setting_preference"`
	SiteId                basetypes.StringValue `tfsdk:"site_id"`
	SrcAddress            basetypes.StringValue `tfsdk:"src_address"`
	SrcAddressIpv6        basetypes.StringValue `tfsdk:"src_address_ipv6"`
	SrcFirewallGroupIds   basetypes.ListValue   `tfsdk:"src_firewall_group_ids"`
	SrcMac                basetypes.StringValue `tfsdk:"src_mac"`
	SrcNetworkId          basetypes.StringValue `tfsdk:"src_network_id"`
	SrcNetworkType        basetypes.StringValue `tfsdk:"src_network_type"`
	SrcPort               basetypes.StringValue `tfsdk:"src_port"`
	StateEstablished      basetypes.BoolValue   `tfsdk:"state_established"`
	StateInvalid          basetypes.BoolValue   `tfsdk:"state_invalid"`
	StateNew              basetypes.BoolValue   `tfsdk:"state_new"`
	StateRelated          basetypes.BoolValue   `tfsdk:"state_related"`
	state                 attr.ValueState
}

func (v FirewallRulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 32)

	var val tftypes.Value
	var err error

	attrTypes["action"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dst_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dst_address_ipv6"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dst_firewall_group_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["dst_network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dst_network_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["dst_port"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["icmp_typename"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["icmp_v6_typename"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_sec"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["logging"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["protocol_match_excepted"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["protocol_v6"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["rule_index"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ruleset"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["setting_preference"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_address_ipv6"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_firewall_group_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["src_mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_network_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src_port"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state_established"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["state_invalid"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["state_new"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["state_related"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 32)

		val, err = v.Action.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["action"] = val

		val, err = v.DstAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_address"] = val

		val, err = v.DstAddressIpv6.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_address_ipv6"] = val

		val, err = v.DstFirewallGroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_firewall_group_ids"] = val

		val, err = v.DstNetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_network_id"] = val

		val, err = v.DstNetworkType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_network_type"] = val

		val, err = v.DstPort.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_port"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.IcmpTypename.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["icmp_typename"] = val

		val, err = v.IcmpV6Typename.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["icmp_v6_typename"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.IpSec.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_sec"] = val

		val, err = v.Logging.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["logging"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Protocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["protocol"] = val

		val, err = v.ProtocolMatchExcepted.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["protocol_match_excepted"] = val

		val, err = v.ProtocolV6.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["protocol_v6"] = val

		val, err = v.RuleIndex.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rule_index"] = val

		val, err = v.Ruleset.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ruleset"] = val

		val, err = v.SettingPreference.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["setting_preference"] = val

		val, err = v.SiteId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_id"] = val

		val, err = v.SrcAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_address"] = val

		val, err = v.SrcAddressIpv6.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_address_ipv6"] = val

		val, err = v.SrcFirewallGroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_firewall_group_ids"] = val

		val, err = v.SrcMac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_mac"] = val

		val, err = v.SrcNetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_network_id"] = val

		val, err = v.SrcNetworkType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_network_type"] = val

		val, err = v.SrcPort.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src_port"] = val

		val, err = v.StateEstablished.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state_established"] = val

		val, err = v.StateInvalid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state_invalid"] = val

		val, err = v.StateNew.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state_new"] = val

		val, err = v.StateRelated.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state_related"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FirewallRulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FirewallRulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FirewallRulesValue) String() string {
	return "FirewallRulesValue"
}

func (v FirewallRulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var dstFirewallGroupIdsVal basetypes.ListValue
	switch {
	case v.DstFirewallGroupIds.IsUnknown():
		dstFirewallGroupIdsVal = types.ListUnknown(types.StringType)
	case v.DstFirewallGroupIds.IsNull():
		dstFirewallGroupIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		dstFirewallGroupIdsVal, d = types.ListValue(types.StringType, v.DstFirewallGroupIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"action":           basetypes.StringType{},
			"dst_address":      basetypes.StringType{},
			"dst_address_ipv6": basetypes.StringType{},
			"dst_firewall_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"dst_network_id":          basetypes.StringType{},
			"dst_network_type":        basetypes.StringType{},
			"dst_port":                basetypes.StringType{},
			"enabled":                 basetypes.BoolType{},
			"icmp_typename":           basetypes.StringType{},
			"icmp_v6_typename":        basetypes.StringType{},
			"id":                      basetypes.StringType{},
			"ip_sec":                  basetypes.StringType{},
			"logging":                 basetypes.BoolType{},
			"name":                    basetypes.StringType{},
			"protocol":                basetypes.StringType{},
			"protocol_match_excepted": basetypes.BoolType{},
			"protocol_v6":             basetypes.StringType{},
			"rule_index":              basetypes.Int64Type{},
			"ruleset":                 basetypes.StringType{},
			"setting_preference":      basetypes.StringType{},
			"site_id":                 basetypes.StringType{},
			"src_address":             basetypes.StringType{},
			"src_address_ipv6":        basetypes.StringType{},
			"src_firewall_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"src_mac":           basetypes.StringType{},
			"src_network_id":    basetypes.StringType{},
			"src_network_type":  basetypes.StringType{},
			"src_port":          basetypes.StringType{},
			"state_established": basetypes.BoolType{},
			"state_invalid":     basetypes.BoolType{},
			"state_new":         basetypes.BoolType{},
			"state_related":     basetypes.BoolType{},
		}), diags
	}

	var srcFirewallGroupIdsVal basetypes.ListValue
	switch {
	case v.SrcFirewallGroupIds.IsUnknown():
		srcFirewallGroupIdsVal = types.ListUnknown(types.StringType)
	case v.SrcFirewallGroupIds.IsNull():
		srcFirewallGroupIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		srcFirewallGroupIdsVal, d = types.ListValue(types.StringType, v.SrcFirewallGroupIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"action":           basetypes.StringType{},
			"dst_address":      basetypes.StringType{},
			"dst_address_ipv6": basetypes.StringType{},
			"dst_firewall_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"dst_network_id":          basetypes.StringType{},
			"dst_network_type":        basetypes.StringType{},
			"dst_port":                basetypes.StringType{},
			"enabled":                 basetypes.BoolType{},
			"icmp_typename":           basetypes.StringType{},
			"icmp_v6_typename":        basetypes.StringType{},
			"id":                      basetypes.StringType{},
			"ip_sec":                  basetypes.StringType{},
			"logging":                 basetypes.BoolType{},
			"name":                    basetypes.StringType{},
			"protocol":                basetypes.StringType{},
			"protocol_match_excepted": basetypes.BoolType{},
			"protocol_v6":             basetypes.StringType{},
			"rule_index":              basetypes.Int64Type{},
			"ruleset":                 basetypes.StringType{},
			"setting_preference":      basetypes.StringType{},
			"site_id":                 basetypes.StringType{},
			"src_address":             basetypes.StringType{},
			"src_address_ipv6":        basetypes.StringType{},
			"src_firewall_group_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"src_mac":           basetypes.StringType{},
			"src_network_id":    basetypes.StringType{},
			"src_network_type":  basetypes.StringType{},
			"src_port":          basetypes.StringType{},
			"state_established": basetypes.BoolType{},
			"state_invalid":     basetypes.BoolType{},
			"state_new":         basetypes.BoolType{},
			"state_related":     basetypes.BoolType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"action":           basetypes.StringType{},
		"dst_address":      basetypes.StringType{},
		"dst_address_ipv6": basetypes.StringType{},
		"dst_firewall_group_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"dst_network_id":          basetypes.StringType{},
		"dst_network_type":        basetypes.StringType{},
		"dst_port":                basetypes.StringType{},
		"enabled":                 basetypes.BoolType{},
		"icmp_typename":           basetypes.StringType{},
		"icmp_v6_typename":        basetypes.StringType{},
		"id":                      basetypes.StringType{},
		"ip_sec":                  basetypes.StringType{},
		"logging":                 basetypes.BoolType{},
		"name":                    basetypes.StringType{},
		"protocol":                basetypes.StringType{},
		"protocol_match_excepted": basetypes.BoolType{},
		"protocol_v6":             basetypes.StringType{},
		"rule_index":              basetypes.Int64Type{},
		"ruleset":                 basetypes.StringType{},
		"setting_preference":      basetypes.StringType{},
		"site_id":                 basetypes.StringType{},
		"src_address":             basetypes.StringType{},
		"src_address_ipv6":        basetypes.StringType{},
		"src_firewall_group_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"src_mac":           basetypes.StringType{},
		"src_network_id":    basetypes.StringType{},
		"src_network_type":  basetypes.StringType{},
		"src_port":          basetypes.StringType{},
		"state_established": basetypes.BoolType{},
		"state_invalid":     basetypes.BoolType{},
		"state_new":         basetypes.BoolType{},
		"state_related":     basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"action":                  v.Action,
			"dst_address":             v.DstAddress,
			"dst_address_ipv6":        v.DstAddressIpv6,
			"dst_firewall_group_ids":  dstFirewallGroupIdsVal,
			"dst_network_id":          v.DstNetworkId,
			"dst_network_type":        v.DstNetworkType,
			"dst_port":                v.DstPort,
			"enabled":                 v.Enabled,
			"icmp_typename":           v.IcmpTypename,
			"icmp_v6_typename":        v.IcmpV6Typename,
			"id":                      v.Id,
			"ip_sec":                  v.IpSec,
			"logging":                 v.Logging,
			"name":                    v.Name,
			"protocol":                v.Protocol,
			"protocol_match_excepted": v.ProtocolMatchExcepted,
			"protocol_v6":             v.ProtocolV6,
			"rule_index":              v.RuleIndex,
			"ruleset":                 v.Ruleset,
			"setting_preference":      v.SettingPreference,
			"site_id":                 v.SiteId,
			"src_address":             v.SrcAddress,
			"src_address_ipv6":        v.SrcAddressIpv6,
			"src_firewall_group_ids":  srcFirewallGroupIdsVal,
			"src_mac":                 v.SrcMac,
			"src_network_id":          v.SrcNetworkId,
			"src_network_type":        v.SrcNetworkType,
			"src_port":                v.SrcPort,
			"state_established":       v.StateEstablished,
			"state_invalid":           v.StateInvalid,
			"state_new":               v.StateNew,
			"state_related":           v.StateRelated,
		})

	return objVal, diags
}

func (v FirewallRulesValue) Equal(o attr.Value) bool {
	other, ok := o.(FirewallRulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Action.Equal(other.Action) {
		return false
	}

	if !v.DstAddress.Equal(other.DstAddress) {
		return false
	}

	if !v.DstAddressIpv6.Equal(other.DstAddressIpv6) {
		return false
	}

	if !v.DstFirewallGroupIds.Equal(other.DstFirewallGroupIds) {
		return false
	}

	if !v.DstNetworkId.Equal(other.DstNetworkId) {
		return false
	}

	if !v.DstNetworkType.Equal(other.DstNetworkType) {
		return false
	}

	if !v.DstPort.Equal(other.DstPort) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.IcmpTypename.Equal(other.IcmpTypename) {
		return false
	}

	if !v.IcmpV6Typename.Equal(other.IcmpV6Typename) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.IpSec.Equal(other.IpSec) {
		return false
	}

	if !v.Logging.Equal(other.Logging) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Protocol.Equal(other.Protocol) {
		return false
	}

	if !v.ProtocolMatchExcepted.Equal(other.ProtocolMatchExcepted) {
		return false
	}

	if !v.ProtocolV6.Equal(other.ProtocolV6) {
		return false
	}

	if !v.RuleIndex.Equal(other.RuleIndex) {
		return false
	}

	if !v.Ruleset.Equal(other.Ruleset) {
		return false
	}

	if !v.SettingPreference.Equal(other.SettingPreference) {
		return false
	}

	if !v.SiteId.Equal(other.SiteId) {
		return false
	}

	if !v.SrcAddress.Equal(other.SrcAddress) {
		return false
	}

	if !v.SrcAddressIpv6.Equal(other.SrcAddressIpv6) {
		return false
	}

	if !v.SrcFirewallGroupIds.Equal(other.SrcFirewallGroupIds) {
		return false
	}

	if !v.SrcMac.Equal(other.SrcMac) {
		return false
	}

	if !v.SrcNetworkId.Equal(other.SrcNetworkId) {
		return false
	}

	if !v.SrcNetworkType.Equal(other.SrcNetworkType) {
		return false
	}

	if !v.SrcPort.Equal(other.SrcPort) {
		return false
	}

	if !v.StateEstablished.Equal(other.StateEstablished) {
		return false
	}

	if !v.StateInvalid.Equal(other.StateInvalid) {
		return false
	}

	if !v.StateNew.Equal(other.StateNew) {
		return false
	}

	if !v.StateRelated.Equal(other.StateRelated) {
		return false
	}

	return true
}

func (v FirewallRulesValue) Type(ctx context.Context) attr.Type {
	return FirewallRulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FirewallRulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"action":           basetypes.StringType{},
		"dst_address":      basetypes.StringType{},
		"dst_address_ipv6": basetypes.StringType{},
		"dst_firewall_group_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"dst_network_id":          basetypes.StringType{},
		"dst_network_type":        basetypes.StringType{},
		"dst_port":                basetypes.StringType{},
		"enabled":                 basetypes.BoolType{},
		"icmp_typename":           basetypes.StringType{},
		"icmp_v6_typename":        basetypes.StringType{},
		"id":                      basetypes.StringType{},
		"ip_sec":                  basetypes.StringType{},
		"logging":                 basetypes.BoolType{},
		"name":                    basetypes.StringType{},
		"protocol":                basetypes.StringType{},
		"protocol_match_excepted": basetypes.BoolType{},
		"protocol_v6":             basetypes.StringType{},
		"rule_index":              basetypes.Int64Type{},
		"ruleset":                 basetypes.StringType{},
		"setting_preference":      basetypes.StringType{},
		"site_id":                 basetypes.StringType{},
		"src_address":             basetypes.StringType{},
		"src_address_ipv6":        basetypes.StringType{},
		"src_firewall_group_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"src_mac":           basetypes.StringType{},
		"src_network_id":    basetypes.StringType{},
		"src_network_type":  basetypes.StringType{},
		"src_port":          basetypes.StringType{},
		"state_established": basetypes.BoolType{},
		"state_invalid":     basetypes.BoolType{},
		"state_new":         basetypes.BoolType{},
		"state_related":     basetypes.BoolType{},
	}
}
