// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_dynamic_dnses

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func DynamicDnsesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"dynamic_dnses": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"host_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The host name to update in the Dynamic DNS service.",
							MarkdownDescription: "The host name to update in the Dynamic DNS service.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Dynamic DNS.",
							MarkdownDescription: "The ID of the Dynamic DNS.",
						},
						"interface": schema.StringAttribute{
							Computed:            true,
							Description:         "The interface for the Dynamic DNS. Can be `wan` or `wan2`.",
							MarkdownDescription: "The interface for the Dynamic DNS. Can be `wan` or `wan2`.",
						},
						"login": schema.StringAttribute{
							Computed:            true,
							Description:         "The login username for the Dynamic DNS service.",
							MarkdownDescription: "The login username for the Dynamic DNS service.",
						},
						"password": schema.StringAttribute{
							Computed:            true,
							Description:         "The password for the Dynamic DNS service.",
							MarkdownDescription: "The password for the Dynamic DNS service.",
						},
						"server": schema.StringAttribute{
							Computed:            true,
							Description:         "The server for the Dynamic DNS service.",
							MarkdownDescription: "The server for the Dynamic DNS service.",
						},
						"service": schema.StringAttribute{
							Computed:            true,
							Description:         "The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).",
							MarkdownDescription: "The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).",
						},
					},
					CustomType: DynamicDnsesType{
						ObjectType: types.ObjectType{
							AttrTypes: DynamicDnsesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of Dynamic DNSes associated with the site.",
				MarkdownDescription: "The list of Dynamic DNSes associated with the site.",
			},
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the Dynamic DNSes are associated with.",
				MarkdownDescription: "The name of the site the Dynamic DNSes are associated with.",
			},
		},
	}
}

type DynamicDnsesModel struct {
	DynamicDnses types.List   `tfsdk:"dynamic_dnses"`
	Site         types.String `tfsdk:"site"`
}

var _ basetypes.ObjectTypable = DynamicDnsesType{}

type DynamicDnsesType struct {
	basetypes.ObjectType
}

func (t DynamicDnsesType) Equal(o attr.Type) bool {
	other, ok := o.(DynamicDnsesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DynamicDnsesType) String() string {
	return "DynamicDnsesType"
}

func (t DynamicDnsesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	hostNameAttribute, ok := attributes["host_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host_name is missing from object`)

		return nil, diags
	}

	hostNameVal, ok := hostNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host_name expected to be basetypes.StringValue, was: %T`, hostNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	interfaceAttribute, ok := attributes["interface"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface is missing from object`)

		return nil, diags
	}

	interfaceVal, ok := interfaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface expected to be basetypes.StringValue, was: %T`, interfaceAttribute))
	}

	loginAttribute, ok := attributes["login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`login is missing from object`)

		return nil, diags
	}

	loginVal, ok := loginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`login expected to be basetypes.StringValue, was: %T`, loginAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	serverAttribute, ok := attributes["server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`server is missing from object`)

		return nil, diags
	}

	serverVal, ok := serverAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`server expected to be basetypes.StringValue, was: %T`, serverAttribute))
	}

	serviceAttribute, ok := attributes["service"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service is missing from object`)

		return nil, diags
	}

	serviceVal, ok := serviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service expected to be basetypes.StringValue, was: %T`, serviceAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DynamicDnsesValue{
		HostName:  hostNameVal,
		Id:        idVal,
		Interface: interfaceVal,
		Login:     loginVal,
		Password:  passwordVal,
		Server:    serverVal,
		Service:   serviceVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewDynamicDnsesValueNull() DynamicDnsesValue {
	return DynamicDnsesValue{
		state: attr.ValueStateNull,
	}
}

func NewDynamicDnsesValueUnknown() DynamicDnsesValue {
	return DynamicDnsesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDynamicDnsesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DynamicDnsesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DynamicDnsesValue Attribute Value",
				"While creating a DynamicDnsesValue value, a missing attribute value was detected. "+
					"A DynamicDnsesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DynamicDnsesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DynamicDnsesValue Attribute Type",
				"While creating a DynamicDnsesValue value, an invalid attribute value was detected. "+
					"A DynamicDnsesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DynamicDnsesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DynamicDnsesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DynamicDnsesValue Attribute Value",
				"While creating a DynamicDnsesValue value, an extra attribute value was detected. "+
					"A DynamicDnsesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DynamicDnsesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDynamicDnsesValueUnknown(), diags
	}

	hostNameAttribute, ok := attributes["host_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host_name is missing from object`)

		return NewDynamicDnsesValueUnknown(), diags
	}

	hostNameVal, ok := hostNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host_name expected to be basetypes.StringValue, was: %T`, hostNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewDynamicDnsesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	interfaceAttribute, ok := attributes["interface"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interface is missing from object`)

		return NewDynamicDnsesValueUnknown(), diags
	}

	interfaceVal, ok := interfaceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interface expected to be basetypes.StringValue, was: %T`, interfaceAttribute))
	}

	loginAttribute, ok := attributes["login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`login is missing from object`)

		return NewDynamicDnsesValueUnknown(), diags
	}

	loginVal, ok := loginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`login expected to be basetypes.StringValue, was: %T`, loginAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewDynamicDnsesValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	serverAttribute, ok := attributes["server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`server is missing from object`)

		return NewDynamicDnsesValueUnknown(), diags
	}

	serverVal, ok := serverAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`server expected to be basetypes.StringValue, was: %T`, serverAttribute))
	}

	serviceAttribute, ok := attributes["service"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service is missing from object`)

		return NewDynamicDnsesValueUnknown(), diags
	}

	serviceVal, ok := serviceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service expected to be basetypes.StringValue, was: %T`, serviceAttribute))
	}

	if diags.HasError() {
		return NewDynamicDnsesValueUnknown(), diags
	}

	return DynamicDnsesValue{
		HostName:  hostNameVal,
		Id:        idVal,
		Interface: interfaceVal,
		Login:     loginVal,
		Password:  passwordVal,
		Server:    serverVal,
		Service:   serviceVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewDynamicDnsesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DynamicDnsesValue {
	object, diags := NewDynamicDnsesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDynamicDnsesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DynamicDnsesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDynamicDnsesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDynamicDnsesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDynamicDnsesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDynamicDnsesValueMust(DynamicDnsesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DynamicDnsesType) ValueType(ctx context.Context) attr.Value {
	return DynamicDnsesValue{}
}

var _ basetypes.ObjectValuable = DynamicDnsesValue{}

type DynamicDnsesValue struct {
	HostName  basetypes.StringValue `tfsdk:"host_name"`
	Id        basetypes.StringValue `tfsdk:"id"`
	Interface basetypes.StringValue `tfsdk:"interface"`
	Login     basetypes.StringValue `tfsdk:"login"`
	Password  basetypes.StringValue `tfsdk:"password"`
	Server    basetypes.StringValue `tfsdk:"server"`
	Service   basetypes.StringValue `tfsdk:"service"`
	state     attr.ValueState
}

func (v DynamicDnsesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["host_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interface"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["login"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["server"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["service"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.HostName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host_name"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Interface.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interface"] = val

		val, err = v.Login.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["login"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Server.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["server"] = val

		val, err = v.Service.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DynamicDnsesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DynamicDnsesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DynamicDnsesValue) String() string {
	return "DynamicDnsesValue"
}

func (v DynamicDnsesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"host_name": basetypes.StringType{},
		"id":        basetypes.StringType{},
		"interface": basetypes.StringType{},
		"login":     basetypes.StringType{},
		"password":  basetypes.StringType{},
		"server":    basetypes.StringType{},
		"service":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"host_name": v.HostName,
			"id":        v.Id,
			"interface": v.Interface,
			"login":     v.Login,
			"password":  v.Password,
			"server":    v.Server,
			"service":   v.Service,
		})

	return objVal, diags
}

func (v DynamicDnsesValue) Equal(o attr.Value) bool {
	other, ok := o.(DynamicDnsesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.HostName.Equal(other.HostName) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Interface.Equal(other.Interface) {
		return false
	}

	if !v.Login.Equal(other.Login) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Server.Equal(other.Server) {
		return false
	}

	if !v.Service.Equal(other.Service) {
		return false
	}

	return true
}

func (v DynamicDnsesValue) Type(ctx context.Context) attr.Type {
	return DynamicDnsesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DynamicDnsesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"host_name": basetypes.StringType{},
		"id":        basetypes.StringType{},
		"interface": basetypes.StringType{},
		"login":     basetypes.StringType{},
		"password":  basetypes.StringType{},
		"server":    basetypes.StringType{},
		"service":   basetypes.StringType{},
	}
}
