// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_user_groups

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func UserGroupsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the User Groups are associated with.",
				MarkdownDescription: "The name of the site the User Groups are associated with.",
			},
			"user_groups": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the User Group to look up.",
							MarkdownDescription: "The ID of the User Group to look up.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of this User Group.",
							MarkdownDescription: "The name of this User Group.",
						},
						"qos_rate_max_down": schema.Int64Attribute{
							Computed:            true,
							Description:         "QOS max download rate for the User Group.",
							MarkdownDescription: "QOS max download rate for the User Group.",
						},
						"qos_rate_max_up": schema.Int64Attribute{
							Computed:            true,
							Description:         "QOS max upload rate for the User Group.",
							MarkdownDescription: "QOS max upload rate for the User Group.",
						},
					},
					CustomType: UserGroupsType{
						ObjectType: types.ObjectType{
							AttrTypes: UserGroupsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of User Groups associated with the site.",
				MarkdownDescription: "The list of User Groups associated with the site.",
			},
		},
	}
}

type UserGroupsModel struct {
	Site       types.String `tfsdk:"site"`
	UserGroups types.List   `tfsdk:"user_groups"`
}

var _ basetypes.ObjectTypable = UserGroupsType{}

type UserGroupsType struct {
	basetypes.ObjectType
}

func (t UserGroupsType) Equal(o attr.Type) bool {
	other, ok := o.(UserGroupsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UserGroupsType) String() string {
	return "UserGroupsType"
}

func (t UserGroupsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	qosRateMaxDownAttribute, ok := attributes["qos_rate_max_down"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`qos_rate_max_down is missing from object`)

		return nil, diags
	}

	qosRateMaxDownVal, ok := qosRateMaxDownAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`qos_rate_max_down expected to be basetypes.Int64Value, was: %T`, qosRateMaxDownAttribute))
	}

	qosRateMaxUpAttribute, ok := attributes["qos_rate_max_up"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`qos_rate_max_up is missing from object`)

		return nil, diags
	}

	qosRateMaxUpVal, ok := qosRateMaxUpAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`qos_rate_max_up expected to be basetypes.Int64Value, was: %T`, qosRateMaxUpAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UserGroupsValue{
		Id:             idVal,
		Name:           nameVal,
		QosRateMaxDown: qosRateMaxDownVal,
		QosRateMaxUp:   qosRateMaxUpVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewUserGroupsValueNull() UserGroupsValue {
	return UserGroupsValue{
		state: attr.ValueStateNull,
	}
}

func NewUserGroupsValueUnknown() UserGroupsValue {
	return UserGroupsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUserGroupsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UserGroupsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UserGroupsValue Attribute Value",
				"While creating a UserGroupsValue value, a missing attribute value was detected. "+
					"A UserGroupsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UserGroupsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UserGroupsValue Attribute Type",
				"While creating a UserGroupsValue value, an invalid attribute value was detected. "+
					"A UserGroupsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UserGroupsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UserGroupsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UserGroupsValue Attribute Value",
				"While creating a UserGroupsValue value, an extra attribute value was detected. "+
					"A UserGroupsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UserGroupsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUserGroupsValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewUserGroupsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewUserGroupsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	qosRateMaxDownAttribute, ok := attributes["qos_rate_max_down"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`qos_rate_max_down is missing from object`)

		return NewUserGroupsValueUnknown(), diags
	}

	qosRateMaxDownVal, ok := qosRateMaxDownAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`qos_rate_max_down expected to be basetypes.Int64Value, was: %T`, qosRateMaxDownAttribute))
	}

	qosRateMaxUpAttribute, ok := attributes["qos_rate_max_up"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`qos_rate_max_up is missing from object`)

		return NewUserGroupsValueUnknown(), diags
	}

	qosRateMaxUpVal, ok := qosRateMaxUpAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`qos_rate_max_up expected to be basetypes.Int64Value, was: %T`, qosRateMaxUpAttribute))
	}

	if diags.HasError() {
		return NewUserGroupsValueUnknown(), diags
	}

	return UserGroupsValue{
		Id:             idVal,
		Name:           nameVal,
		QosRateMaxDown: qosRateMaxDownVal,
		QosRateMaxUp:   qosRateMaxUpVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewUserGroupsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UserGroupsValue {
	object, diags := NewUserGroupsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUserGroupsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UserGroupsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUserGroupsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUserGroupsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUserGroupsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUserGroupsValueMust(UserGroupsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UserGroupsType) ValueType(ctx context.Context) attr.Value {
	return UserGroupsValue{}
}

var _ basetypes.ObjectValuable = UserGroupsValue{}

type UserGroupsValue struct {
	Id             basetypes.StringValue `tfsdk:"id"`
	Name           basetypes.StringValue `tfsdk:"name"`
	QosRateMaxDown basetypes.Int64Value  `tfsdk:"qos_rate_max_down"`
	QosRateMaxUp   basetypes.Int64Value  `tfsdk:"qos_rate_max_up"`
	state          attr.ValueState
}

func (v UserGroupsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["qos_rate_max_down"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["qos_rate_max_up"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.QosRateMaxDown.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["qos_rate_max_down"] = val

		val, err = v.QosRateMaxUp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["qos_rate_max_up"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UserGroupsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UserGroupsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UserGroupsValue) String() string {
	return "UserGroupsValue"
}

func (v UserGroupsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":                basetypes.StringType{},
		"name":              basetypes.StringType{},
		"qos_rate_max_down": basetypes.Int64Type{},
		"qos_rate_max_up":   basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":                v.Id,
			"name":              v.Name,
			"qos_rate_max_down": v.QosRateMaxDown,
			"qos_rate_max_up":   v.QosRateMaxUp,
		})

	return objVal, diags
}

func (v UserGroupsValue) Equal(o attr.Value) bool {
	other, ok := o.(UserGroupsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.QosRateMaxDown.Equal(other.QosRateMaxDown) {
		return false
	}

	if !v.QosRateMaxUp.Equal(other.QosRateMaxUp) {
		return false
	}

	return true
}

func (v UserGroupsValue) Type(ctx context.Context) attr.Type {
	return UserGroupsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UserGroupsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":                basetypes.StringType{},
		"name":              basetypes.StringType{},
		"qos_rate_max_down": basetypes.Int64Type{},
		"qos_rate_max_up":   basetypes.Int64Type{},
	}
}
