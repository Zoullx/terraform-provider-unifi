// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_user_group

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UserGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the User Group to look up.",
				MarkdownDescription: "The ID of the User Group to look up.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"last_updated": schema.StringAttribute{
				Computed:            true,
				Description:         "Timestamp of the last Terraform update of the User Group.",
				MarkdownDescription: "Timestamp of the last Terraform update of the User Group.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of this User Group.",
				MarkdownDescription: "The name of this User Group.",
			},
			"qos_rate_max_down": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "QOS max download rate for the User Group.",
				MarkdownDescription: "QOS max download rate for the User Group.",
			},
			"qos_rate_max_up": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "QOS max upload rate for the User Group.",
				MarkdownDescription: "QOS max upload rate for the User Group.",
			},
			"site": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the site the User Group is associated with.",
				MarkdownDescription: "The name of the site the User Group is associated with.",
			},
			"site_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The id of the site the User Group is associated with.",
				MarkdownDescription: "The id of the site the User Group is associated with.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

type UserGroupModel struct {
	Id             types.String `tfsdk:"id"`
	LastUpdated    types.String `tfsdk:"last_updated"`
	Name           types.String `tfsdk:"name"`
	QosRateMaxDown types.Int64  `tfsdk:"qos_rate_max_down"`
	QosRateMaxUp   types.Int64  `tfsdk:"qos_rate_max_up"`
	Site           types.String `tfsdk:"site"`
	SiteId         types.String `tfsdk:"site_id"`
}
