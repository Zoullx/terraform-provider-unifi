// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_firewall_groups

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func FirewallGroupsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"firewall_groups": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the Firewall Group.",
							MarkdownDescription: "The ID of the Firewall Group.",
						},
						"members": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "The members of the Firewall Group.",
							MarkdownDescription: "The members of the Firewall Group.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the Firewall Group.",
							MarkdownDescription: "The name of the Firewall Group.",
						},
						"site_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the site the Firewall Groups are associated with.",
							MarkdownDescription: "The name of the site the Firewall Groups are associated with.",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of the Firewall Group. Must be one of: `address-group`, `port-group`, or `ipv6-address-group`.",
							MarkdownDescription: "The type of the Firewall Group. Must be one of: `address-group`, `port-group`, or `ipv6-address-group`.",
						},
					},
					CustomType: FirewallGroupsType{
						ObjectType: types.ObjectType{
							AttrTypes: FirewallGroupsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The list of Firewall Groups associated with the site.",
				MarkdownDescription: "The list of Firewall Groups associated with the site.",
			},
			"site": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the site the Firewall Groups are associated with.",
				MarkdownDescription: "The name of the site the Firewall Groups are associated with.",
			},
		},
	}
}

type FirewallGroupsModel struct {
	FirewallGroups types.List   `tfsdk:"firewall_groups"`
	Site           types.String `tfsdk:"site"`
}

var _ basetypes.ObjectTypable = FirewallGroupsType{}

type FirewallGroupsType struct {
	basetypes.ObjectType
}

func (t FirewallGroupsType) Equal(o attr.Type) bool {
	other, ok := o.(FirewallGroupsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FirewallGroupsType) String() string {
	return "FirewallGroupsType"
}

func (t FirewallGroupsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	membersAttribute, ok := attributes["members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`members is missing from object`)

		return nil, diags
	}

	membersVal, ok := membersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`members expected to be basetypes.ListValue, was: %T`, membersAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return nil, diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FirewallGroupsValue{
		Id:                 idVal,
		Members:            membersVal,
		Name:               nameVal,
		SiteId:             siteIdVal,
		FirewallGroupsType: typeVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewFirewallGroupsValueNull() FirewallGroupsValue {
	return FirewallGroupsValue{
		state: attr.ValueStateNull,
	}
}

func NewFirewallGroupsValueUnknown() FirewallGroupsValue {
	return FirewallGroupsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFirewallGroupsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FirewallGroupsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FirewallGroupsValue Attribute Value",
				"While creating a FirewallGroupsValue value, a missing attribute value was detected. "+
					"A FirewallGroupsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FirewallGroupsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FirewallGroupsValue Attribute Type",
				"While creating a FirewallGroupsValue value, an invalid attribute value was detected. "+
					"A FirewallGroupsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FirewallGroupsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FirewallGroupsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FirewallGroupsValue Attribute Value",
				"While creating a FirewallGroupsValue value, an extra attribute value was detected. "+
					"A FirewallGroupsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FirewallGroupsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFirewallGroupsValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewFirewallGroupsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	membersAttribute, ok := attributes["members"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`members is missing from object`)

		return NewFirewallGroupsValueUnknown(), diags
	}

	membersVal, ok := membersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`members expected to be basetypes.ListValue, was: %T`, membersAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewFirewallGroupsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return NewFirewallGroupsValueUnknown(), diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewFirewallGroupsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewFirewallGroupsValueUnknown(), diags
	}

	return FirewallGroupsValue{
		Id:                 idVal,
		Members:            membersVal,
		Name:               nameVal,
		SiteId:             siteIdVal,
		FirewallGroupsType: typeVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewFirewallGroupsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FirewallGroupsValue {
	object, diags := NewFirewallGroupsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFirewallGroupsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FirewallGroupsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFirewallGroupsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFirewallGroupsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFirewallGroupsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFirewallGroupsValueMust(FirewallGroupsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FirewallGroupsType) ValueType(ctx context.Context) attr.Value {
	return FirewallGroupsValue{}
}

var _ basetypes.ObjectValuable = FirewallGroupsValue{}

type FirewallGroupsValue struct {
	Id                 basetypes.StringValue `tfsdk:"id"`
	Members            basetypes.ListValue   `tfsdk:"members"`
	Name               basetypes.StringValue `tfsdk:"name"`
	SiteId             basetypes.StringValue `tfsdk:"site_id"`
	FirewallGroupsType basetypes.StringValue `tfsdk:"type"`
	state              attr.ValueState
}

func (v FirewallGroupsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["members"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Members.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["members"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.SiteId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_id"] = val

		val, err = v.FirewallGroupsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FirewallGroupsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FirewallGroupsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FirewallGroupsValue) String() string {
	return "FirewallGroupsValue"
}

func (v FirewallGroupsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var membersVal basetypes.ListValue
	switch {
	case v.Members.IsUnknown():
		membersVal = types.ListUnknown(types.StringType)
	case v.Members.IsNull():
		membersVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		membersVal, d = types.ListValue(types.StringType, v.Members.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"id": basetypes.StringType{},
			"members": basetypes.ListType{
				ElemType: types.StringType,
			},
			"name":    basetypes.StringType{},
			"site_id": basetypes.StringType{},
			"type":    basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"id": basetypes.StringType{},
		"members": basetypes.ListType{
			ElemType: types.StringType,
		},
		"name":    basetypes.StringType{},
		"site_id": basetypes.StringType{},
		"type":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":      v.Id,
			"members": membersVal,
			"name":    v.Name,
			"site_id": v.SiteId,
			"type":    v.FirewallGroupsType,
		})

	return objVal, diags
}

func (v FirewallGroupsValue) Equal(o attr.Value) bool {
	other, ok := o.(FirewallGroupsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Members.Equal(other.Members) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.SiteId.Equal(other.SiteId) {
		return false
	}

	if !v.FirewallGroupsType.Equal(other.FirewallGroupsType) {
		return false
	}

	return true
}

func (v FirewallGroupsValue) Type(ctx context.Context) attr.Type {
	return FirewallGroupsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FirewallGroupsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id": basetypes.StringType{},
		"members": basetypes.ListType{
			ElemType: types.StringType,
		},
		"name":    basetypes.StringType{},
		"site_id": basetypes.StringType{},
		"type":    basetypes.StringType{},
	}
}
