// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_user

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UserResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"blocked": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether the User should be blocked from the network.",
				MarkdownDescription: "Specifies whether the User should be blocked from the network.",
			},
			"dev_id_override": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Override the device fingerprint.",
				MarkdownDescription: "Override the device fingerprint.",
			},
			"fixed_ip": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Fixed IPv4 address set for the User.",
				MarkdownDescription: "Fixed IPv4 address set for the User.",
			},
			"hostname": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The hostname of the User.",
				MarkdownDescription: "The hostname of the User.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the User to look up.",
				MarkdownDescription: "The ID of the User to look up.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"ip": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IP address of the User.",
				MarkdownDescription: "The IP address of the User.",
			},
			"last_updated": schema.StringAttribute{
				Computed:            true,
				Description:         "Timestamp of the last Terraform update of the User.",
				MarkdownDescription: "Timestamp of the last Terraform update of the User.",
			},
			"local_dns_record": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The local DNS record for the User.",
				MarkdownDescription: "The local DNS record for the User.",
			},
			"mac": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The MAC address of the User.",
				MarkdownDescription: "The MAC address of the User.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of this User.",
				MarkdownDescription: "The name of this User.",
			},
			"network_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The network ID for the User.",
				MarkdownDescription: "The network ID for the User.",
			},
			"note": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A note with additional information for the User.",
				MarkdownDescription: "A note with additional information for the User.",
			},
			"site": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the site the User is associated with.",
				MarkdownDescription: "The name of the site the User is associated with.",
			},
			"site_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The id of the site the User is associated with.",
				MarkdownDescription: "The id of the site the User is associated with.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"user_group_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The user group ID for the User.",
				MarkdownDescription: "The user group ID for the User.",
			},
		},
	}
}

type UserModel struct {
	Blocked        types.Bool   `tfsdk:"blocked"`
	DevIdOverride  types.Int64  `tfsdk:"dev_id_override"`
	FixedIp        types.String `tfsdk:"fixed_ip"`
	Hostname       types.String `tfsdk:"hostname"`
	Id             types.String `tfsdk:"id"`
	Ip             types.String `tfsdk:"ip"`
	LastUpdated    types.String `tfsdk:"last_updated"`
	LocalDnsRecord types.String `tfsdk:"local_dns_record"`
	Mac            types.String `tfsdk:"mac"`
	Name           types.String `tfsdk:"name"`
	NetworkId      types.String `tfsdk:"network_id"`
	Note           types.String `tfsdk:"note"`
	Site           types.String `tfsdk:"site"`
	SiteId         types.String `tfsdk:"site_id"`
	UserGroupId    types.String `tfsdk:"user_group_id"`
}
