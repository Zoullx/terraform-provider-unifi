// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_network

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func NetworkResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auto_scale_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable auto scaling on the Network.",
				MarkdownDescription: "Whether or not to enable auto scaling on the Network.",
			},
			"dhcp_boot_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Toggles on the DHCP boot options. Will be set to true if you have `dhcpd_boot_filename`, and `dhcpd_boot_server` set.",
				MarkdownDescription: "Toggles on the DHCP boot options. Will be set to true if you have `dhcpd_boot_filename`, and `dhcpd_boot_server` set.",
			},
			"dhcp_boot_filename": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The file to PXE boot from on the `dhcpd_boot_server`.",
				MarkdownDescription: "The file to PXE boot from on the `dhcpd_boot_server`.",
			},
			"dhcp_boot_server": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IPv4 address of a TFTP server to network boot from.",
				MarkdownDescription: "IPv4 address of a TFTP server to network boot from.",
			},
			"dhcp_conflict_checking": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable DHCPd Conflict Checking.",
				MarkdownDescription: "Whether or not to enable DHCPd Conflict Checking.",
			},
			"dhcp_dns": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "IPv4 addresses for the DNS server to be returned from the DHCP server.",
				MarkdownDescription: "IPv4 addresses for the DNS server to be returned from the DHCP server.",
				Validators: []validator.List{
					listvalidator.SizeAtMost(4),
				},
			},
			"dhcp_dns_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable DNS for DHCP.",
				MarkdownDescription: "Whether or not to enable DNS for DHCP.",
			},
			"dhcp_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether DHCP is enabled or not on the Network.",
				MarkdownDescription: "Whether DHCP is enabled or not on the Network.",
			},
			"dhcp_gateway_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable DHCPd Gateway.",
				MarkdownDescription: "Whether or not to enable DHCPd Gateway.",
			},
			"dhcp_guard_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable DHCP Guard.",
				MarkdownDescription: "Whether or not to enable DHCP Guard.",
			},
			"dhcp_lease_time": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Lease time for DHCP addresses.",
				MarkdownDescription: "Lease time for DHCP addresses.",
			},
			"dhcp_ntp_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable NTP for DHCPd.",
				MarkdownDescription: "Whether or not to enable NTP for DHCPd.",
			},
			"dhcp_relay_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable a DHCP Relay server.",
				MarkdownDescription: "Whether or not to enable a DHCP Relay server.",
			},
			"dhcp_start": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv4 address where the DHCP range of addresses start.",
				MarkdownDescription: "The IPv4 address where the DHCP range of addresses start.",
			},
			"dhcp_stop": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv4 address where the DHCP range of addresses stop.",
				MarkdownDescription: "The IPv4 address where the DHCP range of addresses stop.",
			},
			"dhcp_tftp_server": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the TFTP server for DHCPd.",
				MarkdownDescription: "Specifies the TFTP server for DHCPd.",
			},
			"dhcp_time_offset_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable Time Offset for DHCPd.",
				MarkdownDescription: "Whether or not to enable Time Offset for DHCPd.",
			},
			"dhcp_unifi_controller": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the Unifi Controller for DHCPd.",
				MarkdownDescription: "Specifies the Unifi Controller for DHCPd.",
			},
			"dhcp_v6_allow_slaac": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to allow slaac with DHCP v6.",
				MarkdownDescription: "Whether or not to allow slaac with DHCP v6.",
			},
			"dhcp_v6_dns": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.",
				MarkdownDescription: "Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.",
				Validators: []validator.List{
					listvalidator.SizeAtMost(4),
				},
			},
			"dhcp_v6_dns_auto": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise.",
				MarkdownDescription: "Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise.",
			},
			"dhcp_v6_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable stateful DHCPv6 for static configuration.",
				MarkdownDescription: "Enable stateful DHCPv6 for static configuration.",
			},
			"dhcp_v6_lease_time": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the lease time for DHCPv6 addresses.",
				MarkdownDescription: "Specifies the lease time for DHCPv6 addresses.",
			},
			"dhcp_v6_start": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Start address of the DHCPv6 range. Used in static DHCPv6 configuration.",
				MarkdownDescription: "Start address of the DHCPv6 range. Used in static DHCPv6 configuration.",
			},
			"dhcp_v6_stop": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "End address of the DHCPv6 range. Used in static DHCPv6 configuration.",
				MarkdownDescription: "End address of the DHCPv6 range. Used in static DHCPv6 configuration.",
			},
			"dhcp_wins_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"dhcp_wpad_url": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the WPAd URL for DHCPd.",
				MarkdownDescription: "Specifies the WPAd URL for DHCPd.",
			},
			"domain_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The domain name of the network.",
				MarkdownDescription: "The domain name of the network.",
			},
			"enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable the Network.",
				MarkdownDescription: "Whether or not to enable the Network.",
				Default:             booldefault.StaticBool(true),
			},
			"gateway_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the Gateway type.",
				MarkdownDescription: "Specifies the Gateway type.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Network.",
				MarkdownDescription: "The ID of the Network.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"igmp_snooping": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether IGMP snooping is enabled or not.",
				MarkdownDescription: "Specifies whether IGMP snooping is enabled or not.",
			},
			"internet_access_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether internet access is enabled for the Network or not.",
				MarkdownDescription: "Specifies whether internet access is enabled for the Network or not.",
			},
			"ipv6_client_address_assignment": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the client address assignment for IPv6",
				MarkdownDescription: "Specifies the client address assignment for IPv6",
			},
			"ipv6_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable IPv6.",
				MarkdownDescription: "Whether or not to enable IPv6.",
			},
			"ipv6_interface_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`.",
				MarkdownDescription: "Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`.",
				Validators: []validator.String{
					stringvalidator.OneOf("static", "pd", "none"),
				},
			},
			"ipv6_pd_auto_prefixid_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable IPv6 Auto Prefix ID.",
				MarkdownDescription: "Whether or not to enable IPv6 Auto Prefix ID.",
			},
			"ipv6_pd_interface": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.",
				MarkdownDescription: "Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.",
				Validators: []validator.String{
					stringvalidator.OneOf("wan", "wan2"),
				},
			},
			"ipv6_pd_prefixid": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the IPv6 Prefix ID.",
				MarkdownDescription: "Specifies the IPv6 Prefix ID.",
			},
			"ipv6_pd_start": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.",
				MarkdownDescription: "Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.",
			},
			"ipv6_pd_stop": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.",
				MarkdownDescription: "End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.",
			},
			"ipv6_ra_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether to enable router advertisements or not.",
				MarkdownDescription: "Specifies whether to enable router advertisements or not.",
			},
			"ipv6_ra_preferred_lifetime": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime`.",
				MarkdownDescription: "Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime`.",
			},
			"ipv6_ra_priority": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`.",
				MarkdownDescription: "IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`.",
				Validators: []validator.String{
					stringvalidator.OneOf("high", "medium", "low"),
				},
			},
			"ipv6_ra_valid_lifetime": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`.",
				MarkdownDescription: "Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`.",
			},
			"ipv6_setting_preference": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the setting preference for IPv6.",
				MarkdownDescription: "Specifies the setting preference for IPv6.",
			},
			"ipv6_static_subnet": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the static IPv6 subnet (when `ipv6_interface_type` is `static`).",
				MarkdownDescription: "Specifies the static IPv6 subnet (when `ipv6_interface_type` is `static`).",
			},
			"last_updated": schema.StringAttribute{
				Computed:            true,
				Description:         "Timestamp of the last Terraform update of the Network.",
				MarkdownDescription: "Timestamp of the last Terraform update of the Network.",
			},
			"lte_lan_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable LTE LAN.",
				MarkdownDescription: "Whether or not to enable LTE LAN.",
			},
			"multicast_dns_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether Multicast DNS (mDNS) is enabled or not on the Network (Controller >=v7).",
				MarkdownDescription: "Specifies whether Multicast DNS (mDNS) is enabled or not on the Network (Controller >=v7).",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the Network.",
				MarkdownDescription: "The name of the Network.",
			},
			"nat_outbound_ip_addresses": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"ip_address": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Specifies a single IP address to use for outbound NAT. Used when `mode` is set to `ip_address`.",
							MarkdownDescription: "Specifies a single IP address to use for outbound NAT. Used when `mode` is set to `ip_address`.",
						},
						"ip_address_pool": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "Specifies a list of IP addresses to use for outbound NAT. Used when `mode` is set to `ip_address_pool`.",
							MarkdownDescription: "Specifies a list of IP addresses to use for outbound NAT. Used when `mode` is set to `ip_address_pool`.",
						},
						"mode": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Specifies the mode for outbound NAT. Can be one of `all`, `ip_address`, or `ip_address_pool`.",
							MarkdownDescription: "Specifies the mode for outbound NAT. Can be one of `all`, `ip_address`, or `ip_address_pool`.",
							Validators: []validator.String{
								stringvalidator.OneOf("all", "ip_address", "ip_address_pool"),
							},
						},
						"wan_network_group": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Specifies the WAN network group that the outbound NAT is associated with. Can be one of `WAN`, `WAN2`.",
							MarkdownDescription: "Specifies the WAN network group that the outbound NAT is associated with. Can be one of `WAN`, `WAN2`.",
							Validators: []validator.String{
								stringvalidator.OneOf("WAN", "WAN2"),
							},
						},
					},
					CustomType: NatOutboundIpAddressesType{
						ObjectType: types.ObjectType{
							AttrTypes: NatOutboundIpAddressesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the outbound IP address pool for NAT.",
				MarkdownDescription: "Specifies the outbound IP address pool for NAT.",
			},
			"network_group": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The group of the Network.",
				MarkdownDescription: "The group of the Network.",
			},
			"network_isolation_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether network isolation is enabled for the Network.",
				MarkdownDescription: "Specifies whether network isolation is enabled for the Network.",
			},
			"purpose": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The purpose of the Network. One of `corporate`, `guest`, `wan`, or `vlan-only`.",
				MarkdownDescription: "The purpose of the Network. One of `corporate`, `guest`, `wan`, or `vlan-only`.",
				Validators: []validator.String{
					stringvalidator.OneOf("corporate", "guest", "wan", "vlan-only"),
				},
			},
			"setting_preference": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the setting preference for the Network.",
				MarkdownDescription: "Specifies the setting preference for the Network.",
			},
			"site": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the site the Network is associated with.",
				MarkdownDescription: "The name of the site the Network is associated with.",
			},
			"site_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the site the Network is associated with.",
				MarkdownDescription: "The ID of the site the Network is associated with.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"subnet": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The subnet of the Network (CIDR address).",
				MarkdownDescription: "The subnet of the Network (CIDR address).",
			},
			"upnp_lan_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable UPnP LAN.",
				MarkdownDescription: "Whether or not to enable UPnP LAN.",
			},
			"vlan_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether or not to enable VLAN.",
				MarkdownDescription: "Whether or not to enable VLAN.",
			},
			"vlan_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The VLAN ID of the Network.",
				MarkdownDescription: "The VLAN ID of the Network.",
			},
			"wan_dhcp_v6_pd_size": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the IPv6 prefix size to request from ISP. Must be a number between 48 and 64.",
				MarkdownDescription: "Specifies the IPv6 prefix size to request from ISP. Must be a number between 48 and 64.",
				Validators: []validator.Int64{
					int64validator.Between(48, 64),
				},
			},
			"wan_dns": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "DNS servers IPs of the WAN.",
				MarkdownDescription: "DNS servers IPs of the WAN.",
				Validators: []validator.List{
					listvalidator.SizeAtMost(4),
				},
			},
			"wan_egress_qos": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the WAN egress quality of service.",
				MarkdownDescription: "Specifies the WAN egress quality of service.",
			},
			"wan_gateway": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv4 gateway of the WAN.",
				MarkdownDescription: "The IPv4 gateway of the WAN.",
			},
			"wan_gateway_v6": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv6 gateway of the WAN.",
				MarkdownDescription: "The IPv6 gateway of the WAN.",
			},
			"wan_ip": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv4 address of the WAN.",
				MarkdownDescription: "The IPv4 address of the WAN.",
			},
			"wan_ipv6": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv6 address of the WAN.",
				MarkdownDescription: "The IPv6 address of the WAN.",
			},
			"wan_netmask": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv4 netmask of the WAN.",
				MarkdownDescription: "The IPv4 netmask of the WAN.",
			},
			"wan_network_group": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the WAN network group. One of either `WAN`, `WAN2`, or `WAN_LTE_FAILOVER`.",
				MarkdownDescription: "Specifies the WAN network group. One of either `WAN`, `WAN2`, or `WAN_LTE_FAILOVER`.",
				Validators: []validator.String{
					stringvalidator.OneOf("WAN", "WAN2", "WAN_LTE_FAILOVER"),
				},
			},
			"wan_password": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the IPv4 WAN password.",
				MarkdownDescription: "Specifies the IPv4 WAN password.",
			},
			"wan_prefixlen": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The IPv6 prefix length of the WAN. Must be a number between 1 and 128.",
				MarkdownDescription: "The IPv6 prefix length of the WAN. Must be a number between 1 and 128.",
				Validators: []validator.Int64{
					int64validator.Between(1, 128),
				},
			},
			"wan_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the IPv4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.",
				MarkdownDescription: "Specifies the IPv4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.",
				Validators: []validator.String{
					stringvalidator.OneOf("disabled", "static", "dhcp", "pppoe"),
				},
			},
			"wan_type_v6": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the IPv6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.",
				MarkdownDescription: "Specifies the IPv6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.",
				Validators: []validator.String{
					stringvalidator.OneOf("disabled", "static", "dhcpv6"),
				},
			},
			"wan_username": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the IPv4 WAN username.",
				MarkdownDescription: "Specifies the IPv4 WAN username.",
			},
		},
	}
}

type NetworkModel struct {
	AutoScaleEnabled            types.Bool   `tfsdk:"auto_scale_enabled"`
	DhcpBootEnabled             types.Bool   `tfsdk:"dhcp_boot_enabled"`
	DhcpBootFilename            types.String `tfsdk:"dhcp_boot_filename"`
	DhcpBootServer              types.String `tfsdk:"dhcp_boot_server"`
	DhcpConflictChecking        types.Bool   `tfsdk:"dhcp_conflict_checking"`
	DhcpDns                     types.List   `tfsdk:"dhcp_dns"`
	DhcpDnsEnabled              types.Bool   `tfsdk:"dhcp_dns_enabled"`
	DhcpEnabled                 types.Bool   `tfsdk:"dhcp_enabled"`
	DhcpGatewayEnabled          types.Bool   `tfsdk:"dhcp_gateway_enabled"`
	DhcpGuardEnabled            types.Bool   `tfsdk:"dhcp_guard_enabled"`
	DhcpLeaseTime               types.Int64  `tfsdk:"dhcp_lease_time"`
	DhcpNtpEnabled              types.Bool   `tfsdk:"dhcp_ntp_enabled"`
	DhcpRelayEnabled            types.Bool   `tfsdk:"dhcp_relay_enabled"`
	DhcpStart                   types.String `tfsdk:"dhcp_start"`
	DhcpStop                    types.String `tfsdk:"dhcp_stop"`
	DhcpTftpServer              types.String `tfsdk:"dhcp_tftp_server"`
	DhcpTimeOffsetEnabled       types.Bool   `tfsdk:"dhcp_time_offset_enabled"`
	DhcpUnifiController         types.String `tfsdk:"dhcp_unifi_controller"`
	DhcpV6AllowSlaac            types.Bool   `tfsdk:"dhcp_v6_allow_slaac"`
	DhcpV6Dns                   types.List   `tfsdk:"dhcp_v6_dns"`
	DhcpV6DnsAuto               types.Bool   `tfsdk:"dhcp_v6_dns_auto"`
	DhcpV6Enabled               types.Bool   `tfsdk:"dhcp_v6_enabled"`
	DhcpV6LeaseTime             types.Int64  `tfsdk:"dhcp_v6_lease_time"`
	DhcpV6Start                 types.String `tfsdk:"dhcp_v6_start"`
	DhcpV6Stop                  types.String `tfsdk:"dhcp_v6_stop"`
	DhcpWinsEnabled             types.Bool   `tfsdk:"dhcp_wins_enabled"`
	DhcpWpadUrl                 types.String `tfsdk:"dhcp_wpad_url"`
	DomainName                  types.String `tfsdk:"domain_name"`
	Enabled                     types.Bool   `tfsdk:"enabled"`
	GatewayType                 types.String `tfsdk:"gateway_type"`
	Id                          types.String `tfsdk:"id"`
	IgmpSnooping                types.Bool   `tfsdk:"igmp_snooping"`
	InternetAccessEnabled       types.Bool   `tfsdk:"internet_access_enabled"`
	Ipv6ClientAddressAssignment types.String `tfsdk:"ipv6_client_address_assignment"`
	Ipv6Enabled                 types.Bool   `tfsdk:"ipv6_enabled"`
	Ipv6InterfaceType           types.String `tfsdk:"ipv6_interface_type"`
	Ipv6PdAutoPrefixidEnabled   types.Bool   `tfsdk:"ipv6_pd_auto_prefixid_enabled"`
	Ipv6PdInterface             types.String `tfsdk:"ipv6_pd_interface"`
	Ipv6PdPrefixid              types.String `tfsdk:"ipv6_pd_prefixid"`
	Ipv6PdStart                 types.String `tfsdk:"ipv6_pd_start"`
	Ipv6PdStop                  types.String `tfsdk:"ipv6_pd_stop"`
	Ipv6RaEnabled               types.Bool   `tfsdk:"ipv6_ra_enabled"`
	Ipv6RaPreferredLifetime     types.Int64  `tfsdk:"ipv6_ra_preferred_lifetime"`
	Ipv6RaPriority              types.String `tfsdk:"ipv6_ra_priority"`
	Ipv6RaValidLifetime         types.Int64  `tfsdk:"ipv6_ra_valid_lifetime"`
	Ipv6SettingPreference       types.String `tfsdk:"ipv6_setting_preference"`
	Ipv6StaticSubnet            types.String `tfsdk:"ipv6_static_subnet"`
	LastUpdated                 types.String `tfsdk:"last_updated"`
	LteLanEnabled               types.Bool   `tfsdk:"lte_lan_enabled"`
	MulticastDnsEnabled         types.Bool   `tfsdk:"multicast_dns_enabled"`
	Name                        types.String `tfsdk:"name"`
	NatOutboundIpAddresses      types.List   `tfsdk:"nat_outbound_ip_addresses"`
	NetworkGroup                types.String `tfsdk:"network_group"`
	NetworkIsolationEnabled     types.Bool   `tfsdk:"network_isolation_enabled"`
	Purpose                     types.String `tfsdk:"purpose"`
	SettingPreference           types.String `tfsdk:"setting_preference"`
	Site                        types.String `tfsdk:"site"`
	SiteId                      types.String `tfsdk:"site_id"`
	Subnet                      types.String `tfsdk:"subnet"`
	UpnpLanEnabled              types.Bool   `tfsdk:"upnp_lan_enabled"`
	VlanEnabled                 types.Bool   `tfsdk:"vlan_enabled"`
	VlanId                      types.Int64  `tfsdk:"vlan_id"`
	WanDhcpV6PdSize             types.Int64  `tfsdk:"wan_dhcp_v6_pd_size"`
	WanDns                      types.List   `tfsdk:"wan_dns"`
	WanEgressQos                types.Int64  `tfsdk:"wan_egress_qos"`
	WanGateway                  types.String `tfsdk:"wan_gateway"`
	WanGatewayV6                types.String `tfsdk:"wan_gateway_v6"`
	WanIp                       types.String `tfsdk:"wan_ip"`
	WanIpv6                     types.String `tfsdk:"wan_ipv6"`
	WanNetmask                  types.String `tfsdk:"wan_netmask"`
	WanNetworkGroup             types.String `tfsdk:"wan_network_group"`
	WanPassword                 types.String `tfsdk:"wan_password"`
	WanPrefixlen                types.Int64  `tfsdk:"wan_prefixlen"`
	WanType                     types.String `tfsdk:"wan_type"`
	WanTypeV6                   types.String `tfsdk:"wan_type_v6"`
	WanUsername                 types.String `tfsdk:"wan_username"`
}

var _ basetypes.ObjectTypable = NatOutboundIpAddressesType{}

type NatOutboundIpAddressesType struct {
	basetypes.ObjectType
}

func (t NatOutboundIpAddressesType) Equal(o attr.Type) bool {
	other, ok := o.(NatOutboundIpAddressesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NatOutboundIpAddressesType) String() string {
	return "NatOutboundIpAddressesType"
}

func (t NatOutboundIpAddressesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return nil, diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	ipAddressPoolAttribute, ok := attributes["ip_address_pool"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address_pool is missing from object`)

		return nil, diags
	}

	ipAddressPoolVal, ok := ipAddressPoolAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address_pool expected to be basetypes.ListValue, was: %T`, ipAddressPoolAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return nil, diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	wanNetworkGroupAttribute, ok := attributes["wan_network_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wan_network_group is missing from object`)

		return nil, diags
	}

	wanNetworkGroupVal, ok := wanNetworkGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wan_network_group expected to be basetypes.StringValue, was: %T`, wanNetworkGroupAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NatOutboundIpAddressesValue{
		IpAddress:       ipAddressVal,
		IpAddressPool:   ipAddressPoolVal,
		Mode:            modeVal,
		WanNetworkGroup: wanNetworkGroupVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewNatOutboundIpAddressesValueNull() NatOutboundIpAddressesValue {
	return NatOutboundIpAddressesValue{
		state: attr.ValueStateNull,
	}
}

func NewNatOutboundIpAddressesValueUnknown() NatOutboundIpAddressesValue {
	return NatOutboundIpAddressesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNatOutboundIpAddressesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NatOutboundIpAddressesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NatOutboundIpAddressesValue Attribute Value",
				"While creating a NatOutboundIpAddressesValue value, a missing attribute value was detected. "+
					"A NatOutboundIpAddressesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NatOutboundIpAddressesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NatOutboundIpAddressesValue Attribute Type",
				"While creating a NatOutboundIpAddressesValue value, an invalid attribute value was detected. "+
					"A NatOutboundIpAddressesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NatOutboundIpAddressesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NatOutboundIpAddressesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NatOutboundIpAddressesValue Attribute Value",
				"While creating a NatOutboundIpAddressesValue value, an extra attribute value was detected. "+
					"A NatOutboundIpAddressesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NatOutboundIpAddressesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNatOutboundIpAddressesValueUnknown(), diags
	}

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return NewNatOutboundIpAddressesValueUnknown(), diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	ipAddressPoolAttribute, ok := attributes["ip_address_pool"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address_pool is missing from object`)

		return NewNatOutboundIpAddressesValueUnknown(), diags
	}

	ipAddressPoolVal, ok := ipAddressPoolAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address_pool expected to be basetypes.ListValue, was: %T`, ipAddressPoolAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return NewNatOutboundIpAddressesValueUnknown(), diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	wanNetworkGroupAttribute, ok := attributes["wan_network_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wan_network_group is missing from object`)

		return NewNatOutboundIpAddressesValueUnknown(), diags
	}

	wanNetworkGroupVal, ok := wanNetworkGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wan_network_group expected to be basetypes.StringValue, was: %T`, wanNetworkGroupAttribute))
	}

	if diags.HasError() {
		return NewNatOutboundIpAddressesValueUnknown(), diags
	}

	return NatOutboundIpAddressesValue{
		IpAddress:       ipAddressVal,
		IpAddressPool:   ipAddressPoolVal,
		Mode:            modeVal,
		WanNetworkGroup: wanNetworkGroupVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewNatOutboundIpAddressesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NatOutboundIpAddressesValue {
	object, diags := NewNatOutboundIpAddressesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNatOutboundIpAddressesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NatOutboundIpAddressesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNatOutboundIpAddressesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNatOutboundIpAddressesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNatOutboundIpAddressesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNatOutboundIpAddressesValueMust(NatOutboundIpAddressesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NatOutboundIpAddressesType) ValueType(ctx context.Context) attr.Value {
	return NatOutboundIpAddressesValue{}
}

var _ basetypes.ObjectValuable = NatOutboundIpAddressesValue{}

type NatOutboundIpAddressesValue struct {
	IpAddress       basetypes.StringValue `tfsdk:"ip_address"`
	IpAddressPool   basetypes.ListValue   `tfsdk:"ip_address_pool"`
	Mode            basetypes.StringValue `tfsdk:"mode"`
	WanNetworkGroup basetypes.StringValue `tfsdk:"wan_network_group"`
	state           attr.ValueState
}

func (v NatOutboundIpAddressesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["ip_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip_address_pool"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["wan_network_group"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IpAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_address"] = val

		val, err = v.IpAddressPool.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_address_pool"] = val

		val, err = v.Mode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mode"] = val

		val, err = v.WanNetworkGroup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wan_network_group"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NatOutboundIpAddressesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NatOutboundIpAddressesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NatOutboundIpAddressesValue) String() string {
	return "NatOutboundIpAddressesValue"
}

func (v NatOutboundIpAddressesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var ipAddressPoolVal basetypes.ListValue
	switch {
	case v.IpAddressPool.IsUnknown():
		ipAddressPoolVal = types.ListUnknown(types.StringType)
	case v.IpAddressPool.IsNull():
		ipAddressPoolVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		ipAddressPoolVal, d = types.ListValue(types.StringType, v.IpAddressPool.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"ip_address": basetypes.StringType{},
			"ip_address_pool": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mode":              basetypes.StringType{},
			"wan_network_group": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"ip_address": basetypes.StringType{},
		"ip_address_pool": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mode":              basetypes.StringType{},
		"wan_network_group": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ip_address":        v.IpAddress,
			"ip_address_pool":   ipAddressPoolVal,
			"mode":              v.Mode,
			"wan_network_group": v.WanNetworkGroup,
		})

	return objVal, diags
}

func (v NatOutboundIpAddressesValue) Equal(o attr.Value) bool {
	other, ok := o.(NatOutboundIpAddressesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IpAddress.Equal(other.IpAddress) {
		return false
	}

	if !v.IpAddressPool.Equal(other.IpAddressPool) {
		return false
	}

	if !v.Mode.Equal(other.Mode) {
		return false
	}

	if !v.WanNetworkGroup.Equal(other.WanNetworkGroup) {
		return false
	}

	return true
}

func (v NatOutboundIpAddressesValue) Type(ctx context.Context) attr.Type {
	return NatOutboundIpAddressesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NatOutboundIpAddressesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ip_address": basetypes.StringType{},
		"ip_address_pool": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mode":              basetypes.StringType{},
		"wan_network_group": basetypes.StringType{},
	}
}
