// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_wlan

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WlanResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"ap_group_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "IDs of the AP groups to use for the network.",
				MarkdownDescription: "IDs of the AP groups to use for the network.",
			},
			"ap_group_mode": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is. Valid values are: `all`, `groups`, and `devices`.",
				MarkdownDescription: "TODO: Figure out what this is. Valid values are: `all`, `groups`, and `devices`.",
				Validators: []validator.String{
					stringvalidator.OneOf("all", "groups", "devices"),
				},
			},
			"b_supported": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"broadcast_filter_list": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"bss_transition": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Improves client transitions between APs when they have a weak signal.",
				MarkdownDescription: "Improves client transitions between APs when they have a weak signal.",
			},
			"dtim_2g": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"dtim_5g": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"dtim_6e": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"dtim_mode": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is. Valid values are: `default` and `custom`.",
				MarkdownDescription: "TODO: Figure out what this is. Valid values are: `default` and `custom`.",
				Validators: []validator.String{
					stringvalidator.OneOf("default", "custom"),
				},
			},
			"enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not to enable this WLAN.",
				MarkdownDescription: "Indicates whether or not to enable this WLAN.",
			},
			"enhanced_iot": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not to enable enhanced handling for IoT devices.",
				MarkdownDescription: "Indicates whether or not to enable enhanced handling for IoT devices.",
			},
			"fast_roaming_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enables 802.11r fast roaming.",
				MarkdownDescription: "Enables 802.11r fast roaming.",
			},
			"group_rekey": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"hide_ssid": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not to hide the SSID from broadcast.",
				MarkdownDescription: "Indicates whether or not to hide the SSID from broadcast.",
			},
			"hotspot2conf_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"iapp_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"iapp_key": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the WLAN to look up.",
				MarkdownDescription: "The ID of the WLAN to look up.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"is_guest": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates that this is a guest WLAN and should use guest behaviors.",
				MarkdownDescription: "Indicates that this is a guest WLAN and should use guest behaviors.",
			},
			"l2_isolation": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Isolates stations on layer 2 (ethernet) level.",
				MarkdownDescription: "Isolates stations on layer 2 (ethernet) level.",
			},
			"last_updated": schema.StringAttribute{
				Computed:            true,
				Description:         "Timestamp of the last Terraform update of the WLAN.",
				MarkdownDescription: "Timestamp of the last Terraform update of the WLAN.",
			},
			"mac_filter_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not the MAC filter is turned on for the network.",
				MarkdownDescription: "Indicates whether or not the MAC filter is turned on for the network.",
			},
			"mac_filter_list": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).",
				MarkdownDescription: "List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).",
			},
			"mac_filter_policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Valid values are: `allow` and `deny`.",
				MarkdownDescription: "MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Valid values are: `allow` and `deny`.",
				Validators: []validator.String{
					stringvalidator.OneOf("allow", "deny"),
				},
			},
			"minimum_2g_advertising_rates": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"minimum_2g_data_rate_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not to enable minimum data rates for 2G band.",
				MarkdownDescription: "Indicates whether or not to enable minimum data rates for 2G band.",
			},
			"minimum_2g_data_rate_kbps": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Set minimum data rate control for 2G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
				MarkdownDescription: "Set minimum data rate control for 2G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
				Validators: []validator.Int64{
					int64validator.OneOf(0, 1000, 2000, 5500, 6000, 9000, 11000, 12000, 18000, 24000, 36000, 48000, 54000),
				},
			},
			"minimum_5g_advertising_rates": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"minimum_5g_data_rate_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not to enable minimum data rates for 5G band.",
				MarkdownDescription: "Indicates whether or not to enable minimum data rates for 5G band.",
			},
			"minimum_5g_data_rate_kbps": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Set minimum data rate control for 5G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
				MarkdownDescription: "Set minimum data rate control for 5G devices in Kbps. Use `0` to disable minimum data rates. Valid values are `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`, and `54000`.",
				Validators: []validator.Int64{
					int64validator.OneOf(0, 6000, 9000, 12000, 18000, 24000, 36000, 48000, 54000),
				},
			},
			"minimum_data_rate_setting_preference": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the minimum data rate setting preference. Valid values are: `auto` or `manual`.",
				MarkdownDescription: "Specifies the minimum data rate setting preference. Valid values are: `auto` or `manual`.",
				Validators: []validator.String{
					stringvalidator.OneOf("auto", "manual"),
				},
			},
			"mlo_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"multicast_enhance_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not Multicast Enhance is turned on for the network.",
				MarkdownDescription: "Indicates whether or not Multicast Enhance is turned on for the network.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the WLAN.",
				MarkdownDescription: "The name of the WLAN.",
			},
			"network_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "ID of the network for this SSID.",
				MarkdownDescription: "ID of the network for this SSID.",
			},
			"no2ghz_oui": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Notify high performance clients to move to 5GHz to improve network performance.",
				MarkdownDescription: "Notify high performance clients to move to 5GHz to improve network performance.",
			},
			"optimize_iot_wifi_connectivity": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"passphrase": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The passphrase for the network. This is only required if `security` is not set to `open`.",
				MarkdownDescription: "The passphrase for the network. This is only required if `security` is not set to `open`.",
			},
			"passphrase_autogenerated": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not to autogenerate the passphrase.",
				MarkdownDescription: "Indicates whether or not to autogenerate the passphrase.",
			},
			"pmf_mode": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`.",
				MarkdownDescription: "Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`.",
				Validators: []validator.String{
					stringvalidator.OneOf("required", "optional", "disabled"),
				},
			},
			"private_preshared_keys": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"network_id": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The ID of the Network associated with the Preshared Key.",
							MarkdownDescription: "The ID of the Network associated with the Preshared Key.",
						},
						"password": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The password of the Preshared Key.",
							MarkdownDescription: "The password of the Preshared Key.",
						},
					},
					CustomType: PrivatePresharedKeysType{
						ObjectType: types.ObjectType{
							AttrTypes: PrivatePresharedKeysValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "List of private preshared keys (only valid if `private_preshared_keys_enabled` is `true`).",
				MarkdownDescription: "List of private preshared keys (only valid if `private_preshared_keys_enabled` is `true`).",
			},
			"private_preshared_keys_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether or not to enable private preshared keys.",
				MarkdownDescription: "Indicates whether or not to enable private preshared keys.",
			},
			"proxy_arp": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Reduces airtime usage by allowing APs to \"proxy\" common broadcast frames as unicast.",
				MarkdownDescription: "Reduces airtime usage by allowing APs to \"proxy\" common broadcast frames as unicast.",
			},
			"radius_das_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"radius_mac_acl_format": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is. Valid values are: `none_lower`, `hyphen_lower`, `colon_lower`, `none_upper`, `hyphen_upper`, and `colon_upper`",
				MarkdownDescription: "TODO: Figure out what this is. Valid values are: `none_lower`, `hyphen_lower`, `colon_lower`, `none_upper`, `hyphen_upper`, and `colon_upper`",
				Validators: []validator.String{
					stringvalidator.OneOf("none_lower", "hyphen_lower", "colon_lower", "none_upper", "hyphen_upper", "colon_upper"),
				},
			},
			"radius_mac_auth_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"radius_profile_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "ID of the RADIUS profile to use when security `wpaeap`. You can query this via `unifi_radius_profile` data source.",
				MarkdownDescription: "ID of the RADIUS profile to use when security `wpaeap`. You can query this via `unifi_radius_profile` data source.",
			},
			"sae_groups": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"sae_psks": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Id of the SAE Psk.",
							MarkdownDescription: "Id of the SAE Psk.",
						},
						"mac": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "MAC Address of the SAE Psk.",
							MarkdownDescription: "MAC Address of the SAE Psk.",
						},
						"psk": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Psk of the SAE Psk.",
							MarkdownDescription: "Psk of the SAE Psk.",
						},
						"vlan": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "VLAN for this SAE Psk.",
							MarkdownDescription: "VLAN for this SAE Psk.",
						},
					},
					CustomType: SaePsksType{
						ObjectType: types.ObjectType{
							AttrTypes: SaePsksValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"schedule": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"day_of_week": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.",
							MarkdownDescription: "Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.",
							Validators: []validator.String{
								stringvalidator.OneOf("sun", "mon", "tue", "wed", "thu", "fri", "sat"),
							},
						},
						"duration": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Length of the block in minutes.",
							MarkdownDescription: "Length of the block in minutes.",
						},
						"name": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Name of the block.",
							MarkdownDescription: "Name of the block.",
						},
						"start_hour": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Start hour for the block (0-23).",
							MarkdownDescription: "Start hour for the block (0-23).",
							Validators: []validator.Int64{
								int64validator.Between(0, 23),
							},
						},
						"start_minute": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Start minute for the block (0-59).",
							MarkdownDescription: "Start minute for the block (0-59).",
							Validators: []validator.Int64{
								int64validator.Between(0, 59),
							},
						},
					},
					CustomType: ScheduleType{
						ObjectType: types.ObjectType{
							AttrTypes: ScheduleValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Start and stop schedules for the WLAN.",
				MarkdownDescription: "Start and stop schedules for the WLAN.",
			},
			"security": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.",
				MarkdownDescription: "The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.",
				Validators: []validator.String{
					stringvalidator.OneOf("wpapsk", "wpaeap", "open"),
				},
			},
			"setting_preference": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the setting preference for the Network. Valid values are: `auto` or `manual`",
				MarkdownDescription: "Specifies the setting preference for the Network. Valid values are: `auto` or `manual`",
				Validators: []validator.String{
					stringvalidator.OneOf("auto", "manual"),
				},
			},
			"site": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the site the WLAN is associated with.",
				MarkdownDescription: "The name of the site the WLAN is associated with.",
			},
			"site_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The name of the site the WLAN is associated with.",
				MarkdownDescription: "The name of the site the WLAN is associated with.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"uapsd_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable Unscheduled Automatic Power Save Delivery.",
				MarkdownDescription: "Enable Unscheduled Automatic Power Save Delivery.",
			},
			"user_group_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Id of the user group to use for this network.",
				MarkdownDescription: "Id of the user group to use for this network.",
			},
			"wlan_band": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Radio band your WiFi network will use. Valid values are: `2g`, `5g`, or `both`.",
				MarkdownDescription: "Radio band your WiFi network will use. Valid values are: `2g`, `5g`, or `both`.",
				Validators: []validator.String{
					stringvalidator.OneOf("2g", "5g", "both"),
				},
			},
			"wlan_bands": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of bands to use for this WLAN. Valid items are: `2g`, `5g` and/or `6g`. (`6g` only works if the specified AP's are compatible)",
				MarkdownDescription: "List of bands to use for this WLAN. Valid items are: `2g`, `5g` and/or `6g`. (`6g` only works if the specified AP's are compatible)",
				Validators: []validator.List{
					listvalidator.SizeAtMost(3),
					listvalidator.ValueStringsAre(stringvalidator.OneOf("2g", "5g", "6g")),
				},
			},
			"wpa3_enhanced_192": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"wpa3_fast_roaming": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is.",
				MarkdownDescription: "TODO: Figure out what this is.",
			},
			"wpa3_support": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).",
				MarkdownDescription: "Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).",
			},
			"wpa3_transition": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).",
				MarkdownDescription: "Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).",
			},
			"wpa_enc": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "TODO: Figure out what this is. Valid values are: `auto`, `ccmp`, `gcmp`, `ccmp-256`, and `gcmp-256`.",
				MarkdownDescription: "TODO: Figure out what this is. Valid values are: `auto`, `ccmp`, `gcmp`, `ccmp-256`, and `gcmp-256`.",
				Validators: []validator.String{
					stringvalidator.OneOf("auto", "ccmp", "gcmp", "ccmp-256", "gcmp-256"),
				},
			},
			"wpa_mode": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the mode of WPA. Valid values are: `auto`, `wpa1`, and `wpa2`",
				MarkdownDescription: "Specifies the mode of WPA. Valid values are: `auto`, `wpa1`, and `wpa2`",
				Validators: []validator.String{
					stringvalidator.OneOf("auto", "wpa1", "wpa2"),
				},
			},
		},
	}
}

type WlanModel struct {
	ApGroupIds                       types.List   `tfsdk:"ap_group_ids"`
	ApGroupMode                      types.String `tfsdk:"ap_group_mode"`
	BSupported                       types.Bool   `tfsdk:"b_supported"`
	BroadcastFilterList              types.List   `tfsdk:"broadcast_filter_list"`
	BssTransition                    types.Bool   `tfsdk:"bss_transition"`
	Dtim2g                           types.Int64  `tfsdk:"dtim_2g"`
	Dtim5g                           types.Int64  `tfsdk:"dtim_5g"`
	Dtim6e                           types.Int64  `tfsdk:"dtim_6e"`
	DtimMode                         types.String `tfsdk:"dtim_mode"`
	Enabled                          types.Bool   `tfsdk:"enabled"`
	EnhancedIot                      types.Bool   `tfsdk:"enhanced_iot"`
	FastRoamingEnabled               types.Bool   `tfsdk:"fast_roaming_enabled"`
	GroupRekey                       types.Int64  `tfsdk:"group_rekey"`
	HideSsid                         types.Bool   `tfsdk:"hide_ssid"`
	Hotspot2confEnabled              types.Bool   `tfsdk:"hotspot2conf_enabled"`
	IappEnabled                      types.Bool   `tfsdk:"iapp_enabled"`
	IappKey                          types.String `tfsdk:"iapp_key"`
	Id                               types.String `tfsdk:"id"`
	IsGuest                          types.Bool   `tfsdk:"is_guest"`
	L2Isolation                      types.Bool   `tfsdk:"l2_isolation"`
	LastUpdated                      types.String `tfsdk:"last_updated"`
	MacFilterEnabled                 types.Bool   `tfsdk:"mac_filter_enabled"`
	MacFilterList                    types.List   `tfsdk:"mac_filter_list"`
	MacFilterPolicy                  types.String `tfsdk:"mac_filter_policy"`
	Minimum2gAdvertisingRates        types.Bool   `tfsdk:"minimum_2g_advertising_rates"`
	Minimum2gDataRateEnabled         types.Bool   `tfsdk:"minimum_2g_data_rate_enabled"`
	Minimum2gDataRateKbps            types.Int64  `tfsdk:"minimum_2g_data_rate_kbps"`
	Minimum5gAdvertisingRates        types.Bool   `tfsdk:"minimum_5g_advertising_rates"`
	Minimum5gDataRateEnabled         types.Bool   `tfsdk:"minimum_5g_data_rate_enabled"`
	Minimum5gDataRateKbps            types.Int64  `tfsdk:"minimum_5g_data_rate_kbps"`
	MinimumDataRateSettingPreference types.String `tfsdk:"minimum_data_rate_setting_preference"`
	MloEnabled                       types.Bool   `tfsdk:"mlo_enabled"`
	MulticastEnhanceEnabled          types.Bool   `tfsdk:"multicast_enhance_enabled"`
	Name                             types.String `tfsdk:"name"`
	NetworkId                        types.String `tfsdk:"network_id"`
	No2ghzOui                        types.Bool   `tfsdk:"no2ghz_oui"`
	OptimizeIotWifiConnectivity      types.Bool   `tfsdk:"optimize_iot_wifi_connectivity"`
	Passphrase                       types.String `tfsdk:"passphrase"`
	PassphraseAutogenerated          types.Bool   `tfsdk:"passphrase_autogenerated"`
	PmfMode                          types.String `tfsdk:"pmf_mode"`
	PrivatePresharedKeys             types.List   `tfsdk:"private_preshared_keys"`
	PrivatePresharedKeysEnabled      types.Bool   `tfsdk:"private_preshared_keys_enabled"`
	ProxyArp                         types.Bool   `tfsdk:"proxy_arp"`
	RadiusDasEnabled                 types.Bool   `tfsdk:"radius_das_enabled"`
	RadiusMacAclFormat               types.String `tfsdk:"radius_mac_acl_format"`
	RadiusMacAuthEnabled             types.Bool   `tfsdk:"radius_mac_auth_enabled"`
	RadiusProfileId                  types.String `tfsdk:"radius_profile_id"`
	SaeGroups                        types.List   `tfsdk:"sae_groups"`
	SaePsks                          types.List   `tfsdk:"sae_psks"`
	Schedule                         types.List   `tfsdk:"schedule"`
	Security                         types.String `tfsdk:"security"`
	SettingPreference                types.String `tfsdk:"setting_preference"`
	Site                             types.String `tfsdk:"site"`
	SiteId                           types.String `tfsdk:"site_id"`
	UapsdEnabled                     types.Bool   `tfsdk:"uapsd_enabled"`
	UserGroupId                      types.String `tfsdk:"user_group_id"`
	WlanBand                         types.String `tfsdk:"wlan_band"`
	WlanBands                        types.List   `tfsdk:"wlan_bands"`
	Wpa3Enhanced192                  types.Bool   `tfsdk:"wpa3_enhanced_192"`
	Wpa3FastRoaming                  types.Bool   `tfsdk:"wpa3_fast_roaming"`
	Wpa3Support                      types.Bool   `tfsdk:"wpa3_support"`
	Wpa3Transition                   types.Bool   `tfsdk:"wpa3_transition"`
	WpaEnc                           types.String `tfsdk:"wpa_enc"`
	WpaMode                          types.String `tfsdk:"wpa_mode"`
}

var _ basetypes.ObjectTypable = PrivatePresharedKeysType{}

type PrivatePresharedKeysType struct {
	basetypes.ObjectType
}

func (t PrivatePresharedKeysType) Equal(o attr.Type) bool {
	other, ok := o.(PrivatePresharedKeysType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PrivatePresharedKeysType) String() string {
	return "PrivatePresharedKeysType"
}

func (t PrivatePresharedKeysType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return nil, diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PrivatePresharedKeysValue{
		NetworkId: networkIdVal,
		Password:  passwordVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewPrivatePresharedKeysValueNull() PrivatePresharedKeysValue {
	return PrivatePresharedKeysValue{
		state: attr.ValueStateNull,
	}
}

func NewPrivatePresharedKeysValueUnknown() PrivatePresharedKeysValue {
	return PrivatePresharedKeysValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPrivatePresharedKeysValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PrivatePresharedKeysValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PrivatePresharedKeysValue Attribute Value",
				"While creating a PrivatePresharedKeysValue value, a missing attribute value was detected. "+
					"A PrivatePresharedKeysValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivatePresharedKeysValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PrivatePresharedKeysValue Attribute Type",
				"While creating a PrivatePresharedKeysValue value, an invalid attribute value was detected. "+
					"A PrivatePresharedKeysValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrivatePresharedKeysValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PrivatePresharedKeysValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PrivatePresharedKeysValue Attribute Value",
				"While creating a PrivatePresharedKeysValue value, an extra attribute value was detected. "+
					"A PrivatePresharedKeysValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PrivatePresharedKeysValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	networkIdVal, ok := networkIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be basetypes.StringValue, was: %T`, networkIdAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	if diags.HasError() {
		return NewPrivatePresharedKeysValueUnknown(), diags
	}

	return PrivatePresharedKeysValue{
		NetworkId: networkIdVal,
		Password:  passwordVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewPrivatePresharedKeysValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PrivatePresharedKeysValue {
	object, diags := NewPrivatePresharedKeysValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPrivatePresharedKeysValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PrivatePresharedKeysType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPrivatePresharedKeysValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPrivatePresharedKeysValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPrivatePresharedKeysValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPrivatePresharedKeysValueMust(PrivatePresharedKeysValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PrivatePresharedKeysType) ValueType(ctx context.Context) attr.Value {
	return PrivatePresharedKeysValue{}
}

var _ basetypes.ObjectValuable = PrivatePresharedKeysValue{}

type PrivatePresharedKeysValue struct {
	NetworkId basetypes.StringValue `tfsdk:"network_id"`
	Password  basetypes.StringValue `tfsdk:"password"`
	state     attr.ValueState
}

func (v PrivatePresharedKeysValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.NetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_id"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PrivatePresharedKeysValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PrivatePresharedKeysValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PrivatePresharedKeysValue) String() string {
	return "PrivatePresharedKeysValue"
}

func (v PrivatePresharedKeysValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"network_id": basetypes.StringType{},
		"password":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"network_id": v.NetworkId,
			"password":   v.Password,
		})

	return objVal, diags
}

func (v PrivatePresharedKeysValue) Equal(o attr.Value) bool {
	other, ok := o.(PrivatePresharedKeysValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.NetworkId.Equal(other.NetworkId) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	return true
}

func (v PrivatePresharedKeysValue) Type(ctx context.Context) attr.Type {
	return PrivatePresharedKeysType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PrivatePresharedKeysValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"network_id": basetypes.StringType{},
		"password":   basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SaePsksType{}

type SaePsksType struct {
	basetypes.ObjectType
}

func (t SaePsksType) Equal(o attr.Type) bool {
	other, ok := o.(SaePsksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SaePsksType) String() string {
	return "SaePsksType"
}

func (t SaePsksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return nil, diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	pskAttribute, ok := attributes["psk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`psk is missing from object`)

		return nil, diags
	}

	pskVal, ok := pskAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`psk expected to be basetypes.StringValue, was: %T`, pskAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return nil, diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.Int64Value, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SaePsksValue{
		Id:    idVal,
		Mac:   macVal,
		Psk:   pskVal,
		Vlan:  vlanVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSaePsksValueNull() SaePsksValue {
	return SaePsksValue{
		state: attr.ValueStateNull,
	}
}

func NewSaePsksValueUnknown() SaePsksValue {
	return SaePsksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSaePsksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SaePsksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SaePsksValue Attribute Value",
				"While creating a SaePsksValue value, a missing attribute value was detected. "+
					"A SaePsksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SaePsksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SaePsksValue Attribute Type",
				"While creating a SaePsksValue value, an invalid attribute value was detected. "+
					"A SaePsksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SaePsksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SaePsksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SaePsksValue Attribute Value",
				"While creating a SaePsksValue value, an extra attribute value was detected. "+
					"A SaePsksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SaePsksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSaePsksValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	pskAttribute, ok := attributes["psk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`psk is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	pskVal, ok := pskAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`psk expected to be basetypes.StringValue, was: %T`, pskAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return NewSaePsksValueUnknown(), diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.Int64Value, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return NewSaePsksValueUnknown(), diags
	}

	return SaePsksValue{
		Id:    idVal,
		Mac:   macVal,
		Psk:   pskVal,
		Vlan:  vlanVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSaePsksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SaePsksValue {
	object, diags := NewSaePsksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSaePsksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SaePsksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSaePsksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSaePsksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSaePsksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSaePsksValueMust(SaePsksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SaePsksType) ValueType(ctx context.Context) attr.Value {
	return SaePsksValue{}
}

var _ basetypes.ObjectValuable = SaePsksValue{}

type SaePsksValue struct {
	Id    basetypes.StringValue `tfsdk:"id"`
	Mac   basetypes.StringValue `tfsdk:"mac"`
	Psk   basetypes.StringValue `tfsdk:"psk"`
	Vlan  basetypes.Int64Value  `tfsdk:"vlan"`
	state attr.ValueState
}

func (v SaePsksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["psk"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vlan"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Mac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac"] = val

		val, err = v.Psk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["psk"] = val

		val, err = v.Vlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vlan"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SaePsksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SaePsksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SaePsksValue) String() string {
	return "SaePsksValue"
}

func (v SaePsksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.StringType{},
		"mac":  basetypes.StringType{},
		"psk":  basetypes.StringType{},
		"vlan": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.Id,
			"mac":  v.Mac,
			"psk":  v.Psk,
			"vlan": v.Vlan,
		})

	return objVal, diags
}

func (v SaePsksValue) Equal(o attr.Value) bool {
	other, ok := o.(SaePsksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Mac.Equal(other.Mac) {
		return false
	}

	if !v.Psk.Equal(other.Psk) {
		return false
	}

	if !v.Vlan.Equal(other.Vlan) {
		return false
	}

	return true
}

func (v SaePsksValue) Type(ctx context.Context) attr.Type {
	return SaePsksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SaePsksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.StringType{},
		"mac":  basetypes.StringType{},
		"psk":  basetypes.StringType{},
		"vlan": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = ScheduleType{}

type ScheduleType struct {
	basetypes.ObjectType
}

func (t ScheduleType) Equal(o attr.Type) bool {
	other, ok := o.(ScheduleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ScheduleType) String() string {
	return "ScheduleType"
}

func (t ScheduleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dayOfWeekAttribute, ok := attributes["day_of_week"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day_of_week is missing from object`)

		return nil, diags
	}

	dayOfWeekVal, ok := dayOfWeekAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day_of_week expected to be basetypes.StringValue, was: %T`, dayOfWeekAttribute))
	}

	durationAttribute, ok := attributes["duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`duration is missing from object`)

		return nil, diags
	}

	durationVal, ok := durationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`duration expected to be basetypes.Int64Value, was: %T`, durationAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	startHourAttribute, ok := attributes["start_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_hour is missing from object`)

		return nil, diags
	}

	startHourVal, ok := startHourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_hour expected to be basetypes.Int64Value, was: %T`, startHourAttribute))
	}

	startMinuteAttribute, ok := attributes["start_minute"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_minute is missing from object`)

		return nil, diags
	}

	startMinuteVal, ok := startMinuteAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_minute expected to be basetypes.Int64Value, was: %T`, startMinuteAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ScheduleValue{
		DayOfWeek:   dayOfWeekVal,
		Duration:    durationVal,
		Name:        nameVal,
		StartHour:   startHourVal,
		StartMinute: startMinuteVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewScheduleValueNull() ScheduleValue {
	return ScheduleValue{
		state: attr.ValueStateNull,
	}
}

func NewScheduleValueUnknown() ScheduleValue {
	return ScheduleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewScheduleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ScheduleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ScheduleValue Attribute Value",
				"While creating a ScheduleValue value, a missing attribute value was detected. "+
					"A ScheduleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScheduleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ScheduleValue Attribute Type",
				"While creating a ScheduleValue value, an invalid attribute value was detected. "+
					"A ScheduleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScheduleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ScheduleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ScheduleValue Attribute Value",
				"While creating a ScheduleValue value, an extra attribute value was detected. "+
					"A ScheduleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ScheduleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewScheduleValueUnknown(), diags
	}

	dayOfWeekAttribute, ok := attributes["day_of_week"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day_of_week is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	dayOfWeekVal, ok := dayOfWeekAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day_of_week expected to be basetypes.StringValue, was: %T`, dayOfWeekAttribute))
	}

	durationAttribute, ok := attributes["duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`duration is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	durationVal, ok := durationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`duration expected to be basetypes.Int64Value, was: %T`, durationAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	startHourAttribute, ok := attributes["start_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_hour is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	startHourVal, ok := startHourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_hour expected to be basetypes.Int64Value, was: %T`, startHourAttribute))
	}

	startMinuteAttribute, ok := attributes["start_minute"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`start_minute is missing from object`)

		return NewScheduleValueUnknown(), diags
	}

	startMinuteVal, ok := startMinuteAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`start_minute expected to be basetypes.Int64Value, was: %T`, startMinuteAttribute))
	}

	if diags.HasError() {
		return NewScheduleValueUnknown(), diags
	}

	return ScheduleValue{
		DayOfWeek:   dayOfWeekVal,
		Duration:    durationVal,
		Name:        nameVal,
		StartHour:   startHourVal,
		StartMinute: startMinuteVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewScheduleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ScheduleValue {
	object, diags := NewScheduleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewScheduleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ScheduleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewScheduleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewScheduleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewScheduleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewScheduleValueMust(ScheduleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ScheduleType) ValueType(ctx context.Context) attr.Value {
	return ScheduleValue{}
}

var _ basetypes.ObjectValuable = ScheduleValue{}

type ScheduleValue struct {
	DayOfWeek   basetypes.StringValue `tfsdk:"day_of_week"`
	Duration    basetypes.Int64Value  `tfsdk:"duration"`
	Name        basetypes.StringValue `tfsdk:"name"`
	StartHour   basetypes.Int64Value  `tfsdk:"start_hour"`
	StartMinute basetypes.Int64Value  `tfsdk:"start_minute"`
	state       attr.ValueState
}

func (v ScheduleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["day_of_week"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["duration"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["start_hour"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["start_minute"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.DayOfWeek.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["day_of_week"] = val

		val, err = v.Duration.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["duration"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.StartHour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_hour"] = val

		val, err = v.StartMinute.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["start_minute"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ScheduleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ScheduleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ScheduleValue) String() string {
	return "ScheduleValue"
}

func (v ScheduleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"day_of_week":  basetypes.StringType{},
		"duration":     basetypes.Int64Type{},
		"name":         basetypes.StringType{},
		"start_hour":   basetypes.Int64Type{},
		"start_minute": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"day_of_week":  v.DayOfWeek,
			"duration":     v.Duration,
			"name":         v.Name,
			"start_hour":   v.StartHour,
			"start_minute": v.StartMinute,
		})

	return objVal, diags
}

func (v ScheduleValue) Equal(o attr.Value) bool {
	other, ok := o.(ScheduleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DayOfWeek.Equal(other.DayOfWeek) {
		return false
	}

	if !v.Duration.Equal(other.Duration) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.StartHour.Equal(other.StartHour) {
		return false
	}

	if !v.StartMinute.Equal(other.StartMinute) {
		return false
	}

	return true
}

func (v ScheduleValue) Type(ctx context.Context) attr.Type {
	return ScheduleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ScheduleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"day_of_week":  basetypes.StringType{},
		"duration":     basetypes.Int64Type{},
		"name":         basetypes.StringType{},
		"start_hour":   basetypes.Int64Type{},
		"start_minute": basetypes.Int64Type{},
	}
}
