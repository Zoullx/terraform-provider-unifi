// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_device

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DeviceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allow_adoption": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether this resource should tell the controller to adopt the device on create.",
				MarkdownDescription: "Specifies whether this resource should tell the controller to adopt the device on create.",
				Default:             booldefault.StaticBool(true),
			},
			"disabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether this device should be disabled.",
				MarkdownDescription: "Specifies whether this device should be disabled.",
			},
			"forget_on_destroy": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether this resource should tell the controller to forget the device on destroy.",
				MarkdownDescription: "Specifies whether this resource should tell the controller to forget the device on destroy.",
				Default:             booldefault.StaticBool(true),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Device to look up.",
				MarkdownDescription: "The ID of the Device to look up.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"last_updated": schema.StringAttribute{
				Computed:            true,
				Description:         "Timestamp of the last Terraform update of the Device.",
				MarkdownDescription: "Timestamp of the last Terraform update of the Device.",
			},
			"mac": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The MAC address of the Device. This can be specified so that the provider can take control of a device (since devices are created through adoption).",
				MarkdownDescription: "The MAC address of the Device. This can be specified so that the provider can take control of a device (since devices are created through adoption).",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Device.",
				MarkdownDescription: "The name of the Device.",
			},
			"port_overrides": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"aggregate_num_ports": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Number of ports in the aggregate.",
							MarkdownDescription: "Number of ports in the aggregate.",
							Validators: []validator.Int64{
								int64validator.Between(2, 8),
							},
						},
						"name": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Human-readable name of the port.",
							MarkdownDescription: "Human-readable name of the port.",
						},
						"number": schema.Int64Attribute{
							Optional:            true,
							Computed:            true,
							Description:         "Switch port number.",
							MarkdownDescription: "Switch port number.",
						},
						"op_mode": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Operating mode of the port, valid values are `switch`, `mirror`, and `aggregate`.",
							MarkdownDescription: "Operating mode of the port, valid values are `switch`, `mirror`, and `aggregate`.",
							Validators: []validator.String{
								stringvalidator.OneOf("switch", "mirror", "aggregate"),
							},
						},
						"poe_mode": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "PoE mode of the port, valid values are `auto`, `pasv24`, `passthrough`, and `off`.",
							MarkdownDescription: "PoE mode of the port, valid values are `auto`, `pasv24`, `passthrough`, and `off`.",
							Validators: []validator.String{
								stringvalidator.OneOf("auto", "pasv24", "passthrough", "off"),
							},
						},
						"port_profile_id": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "ID of the Port Profile used on this port.",
							MarkdownDescription: "ID of the Port Profile used on this port.",
						},
					},
					CustomType: PortOverridesType{
						ObjectType: types.ObjectType{
							AttrTypes: PortOverridesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Settings overrides for the specific switch ports.",
				MarkdownDescription: "Settings overrides for the specific switch ports.",
			},
			"site": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the site the Device is associated with.",
				MarkdownDescription: "The name of the site the Device is associated with.",
			},
			"site_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The id of the site the Device is associated with.",
				MarkdownDescription: "The id of the site the Device is associated with.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

type DeviceModel struct {
	AllowAdoption   types.Bool   `tfsdk:"allow_adoption"`
	Disabled        types.Bool   `tfsdk:"disabled"`
	ForgetOnDestroy types.Bool   `tfsdk:"forget_on_destroy"`
	Id              types.String `tfsdk:"id"`
	LastUpdated     types.String `tfsdk:"last_updated"`
	Mac             types.String `tfsdk:"mac"`
	Name            types.String `tfsdk:"name"`
	PortOverrides   types.List   `tfsdk:"port_overrides"`
	Site            types.String `tfsdk:"site"`
	SiteId          types.String `tfsdk:"site_id"`
}

var _ basetypes.ObjectTypable = PortOverridesType{}

type PortOverridesType struct {
	basetypes.ObjectType
}

func (t PortOverridesType) Equal(o attr.Type) bool {
	other, ok := o.(PortOverridesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PortOverridesType) String() string {
	return "PortOverridesType"
}

func (t PortOverridesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aggregateNumPortsAttribute, ok := attributes["aggregate_num_ports"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aggregate_num_ports is missing from object`)

		return nil, diags
	}

	aggregateNumPortsVal, ok := aggregateNumPortsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aggregate_num_ports expected to be basetypes.Int64Value, was: %T`, aggregateNumPortsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	numberAttribute, ok := attributes["number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`number is missing from object`)

		return nil, diags
	}

	numberVal, ok := numberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`number expected to be basetypes.Int64Value, was: %T`, numberAttribute))
	}

	opModeAttribute, ok := attributes["op_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`op_mode is missing from object`)

		return nil, diags
	}

	opModeVal, ok := opModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`op_mode expected to be basetypes.StringValue, was: %T`, opModeAttribute))
	}

	poeModeAttribute, ok := attributes["poe_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`poe_mode is missing from object`)

		return nil, diags
	}

	poeModeVal, ok := poeModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`poe_mode expected to be basetypes.StringValue, was: %T`, poeModeAttribute))
	}

	portProfileIdAttribute, ok := attributes["port_profile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_profile_id is missing from object`)

		return nil, diags
	}

	portProfileIdVal, ok := portProfileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_profile_id expected to be basetypes.StringValue, was: %T`, portProfileIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PortOverridesValue{
		AggregateNumPorts: aggregateNumPortsVal,
		Name:              nameVal,
		Number:            numberVal,
		OpMode:            opModeVal,
		PoeMode:           poeModeVal,
		PortProfileId:     portProfileIdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewPortOverridesValueNull() PortOverridesValue {
	return PortOverridesValue{
		state: attr.ValueStateNull,
	}
}

func NewPortOverridesValueUnknown() PortOverridesValue {
	return PortOverridesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPortOverridesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PortOverridesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PortOverridesValue Attribute Value",
				"While creating a PortOverridesValue value, a missing attribute value was detected. "+
					"A PortOverridesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PortOverridesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PortOverridesValue Attribute Type",
				"While creating a PortOverridesValue value, an invalid attribute value was detected. "+
					"A PortOverridesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PortOverridesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PortOverridesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PortOverridesValue Attribute Value",
				"While creating a PortOverridesValue value, an extra attribute value was detected. "+
					"A PortOverridesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PortOverridesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPortOverridesValueUnknown(), diags
	}

	aggregateNumPortsAttribute, ok := attributes["aggregate_num_ports"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aggregate_num_ports is missing from object`)

		return NewPortOverridesValueUnknown(), diags
	}

	aggregateNumPortsVal, ok := aggregateNumPortsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aggregate_num_ports expected to be basetypes.Int64Value, was: %T`, aggregateNumPortsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewPortOverridesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	numberAttribute, ok := attributes["number"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`number is missing from object`)

		return NewPortOverridesValueUnknown(), diags
	}

	numberVal, ok := numberAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`number expected to be basetypes.Int64Value, was: %T`, numberAttribute))
	}

	opModeAttribute, ok := attributes["op_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`op_mode is missing from object`)

		return NewPortOverridesValueUnknown(), diags
	}

	opModeVal, ok := opModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`op_mode expected to be basetypes.StringValue, was: %T`, opModeAttribute))
	}

	poeModeAttribute, ok := attributes["poe_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`poe_mode is missing from object`)

		return NewPortOverridesValueUnknown(), diags
	}

	poeModeVal, ok := poeModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`poe_mode expected to be basetypes.StringValue, was: %T`, poeModeAttribute))
	}

	portProfileIdAttribute, ok := attributes["port_profile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_profile_id is missing from object`)

		return NewPortOverridesValueUnknown(), diags
	}

	portProfileIdVal, ok := portProfileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_profile_id expected to be basetypes.StringValue, was: %T`, portProfileIdAttribute))
	}

	if diags.HasError() {
		return NewPortOverridesValueUnknown(), diags
	}

	return PortOverridesValue{
		AggregateNumPorts: aggregateNumPortsVal,
		Name:              nameVal,
		Number:            numberVal,
		OpMode:            opModeVal,
		PoeMode:           poeModeVal,
		PortProfileId:     portProfileIdVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewPortOverridesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PortOverridesValue {
	object, diags := NewPortOverridesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPortOverridesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PortOverridesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPortOverridesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPortOverridesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPortOverridesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPortOverridesValueMust(PortOverridesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PortOverridesType) ValueType(ctx context.Context) attr.Value {
	return PortOverridesValue{}
}

var _ basetypes.ObjectValuable = PortOverridesValue{}

type PortOverridesValue struct {
	AggregateNumPorts basetypes.Int64Value  `tfsdk:"aggregate_num_ports"`
	Name              basetypes.StringValue `tfsdk:"name"`
	Number            basetypes.Int64Value  `tfsdk:"number"`
	OpMode            basetypes.StringValue `tfsdk:"op_mode"`
	PoeMode           basetypes.StringValue `tfsdk:"poe_mode"`
	PortProfileId     basetypes.StringValue `tfsdk:"port_profile_id"`
	state             attr.ValueState
}

func (v PortOverridesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["aggregate_num_ports"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["number"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["op_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["poe_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["port_profile_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.AggregateNumPorts.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["aggregate_num_ports"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Number.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["number"] = val

		val, err = v.OpMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["op_mode"] = val

		val, err = v.PoeMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["poe_mode"] = val

		val, err = v.PortProfileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_profile_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PortOverridesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PortOverridesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PortOverridesValue) String() string {
	return "PortOverridesValue"
}

func (v PortOverridesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"aggregate_num_ports": basetypes.Int64Type{},
		"name":                basetypes.StringType{},
		"number":              basetypes.Int64Type{},
		"op_mode":             basetypes.StringType{},
		"poe_mode":            basetypes.StringType{},
		"port_profile_id":     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"aggregate_num_ports": v.AggregateNumPorts,
			"name":                v.Name,
			"number":              v.Number,
			"op_mode":             v.OpMode,
			"poe_mode":            v.PoeMode,
			"port_profile_id":     v.PortProfileId,
		})

	return objVal, diags
}

func (v PortOverridesValue) Equal(o attr.Value) bool {
	other, ok := o.(PortOverridesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AggregateNumPorts.Equal(other.AggregateNumPorts) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Number.Equal(other.Number) {
		return false
	}

	if !v.OpMode.Equal(other.OpMode) {
		return false
	}

	if !v.PoeMode.Equal(other.PoeMode) {
		return false
	}

	if !v.PortProfileId.Equal(other.PortProfileId) {
		return false
	}

	return true
}

func (v PortOverridesValue) Type(ctx context.Context) attr.Type {
	return PortOverridesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PortOverridesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"aggregate_num_ports": basetypes.Int64Type{},
		"name":                basetypes.StringType{},
		"number":              basetypes.Int64Type{},
		"op_mode":             basetypes.StringType{},
		"poe_mode":            basetypes.StringType{},
		"port_profile_id":     basetypes.StringType{},
	}
}
